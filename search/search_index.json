{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Grist? # Grist is a software product to organize, analyze, and share data. It is built with structured data in mind. The name Grist is a portmanteau combining grid (as of spreadsheet cells) and list (as of database records). It is also an English word describing the useful part of grain, or more generally, something useful or turned to advantage, as in \u201cgrist for one\u2019s mill.\u201d We see that definition as aptly fitting, as Grist helps users extract meaning from their data. Who is Grist for? # Grist is designed as a general purpose tool for structured data. That said, we think it\u2019s particular useful to individuals or teams trying to solve the following problems: Manage confusing spreadsheets that hold relational data Perform side-by-side reconciliation of disparate datasets Clean up and maintain clean data using validation rules Write Python against data you can see and manipulate Creating multiple views on top of the same underlying data Who makes Grist? # Grist is proudly made by Grist Labs, a team of software engineers in New York City. If you\u2019d like to get in touch with us for any reason, please e-mail us at info@getgrist.com .","title":"Home"},{"location":"#what-is-grist","text":"Grist is a software product to organize, analyze, and share data. It is built with structured data in mind. The name Grist is a portmanteau combining grid (as of spreadsheet cells) and list (as of database records). It is also an English word describing the useful part of grain, or more generally, something useful or turned to advantage, as in \u201cgrist for one\u2019s mill.\u201d We see that definition as aptly fitting, as Grist helps users extract meaning from their data.","title":"What is Grist?"},{"location":"#who-is-grist-for","text":"Grist is designed as a general purpose tool for structured data. That said, we think it\u2019s particular useful to individuals or teams trying to solve the following problems: Manage confusing spreadsheets that hold relational data Perform side-by-side reconciliation of disparate datasets Clean up and maintain clean data using validation rules Write Python against data you can see and manipulate Creating multiple views on top of the same underlying data","title":"Who is Grist for?"},{"location":"#who-makes-grist","text":"Grist is proudly made by Grist Labs, a team of software engineers in New York City. If you\u2019d like to get in touch with us for any reason, please e-mail us at info@getgrist.com .","title":"Who makes Grist?"},{"location":"add-columns/","text":"Documentation to be written.","title":"Adding and deleting columns"},{"location":"add-records/","text":"Documentation to be written.","title":"Adding and deleting records"},{"location":"col-change-type/","text":"Documentation to be written.","title":"Changing column types"},{"location":"col-naming/","text":"Documentation to be written.","title":"Naming columns"},{"location":"col-refs/","text":"Reference columns # Overview # Reference columns in Grist allow one table to create an explicit reference to another. In the database world this is similar to a foreign key. In the spreadsheet world this is similar to a VLOOKUP , but much more powerful and easier to use. In this guide we\u2019ll use the term underlying table for the table that lists all available values, and referencing table for the table that uses those values. Creating a new reference column # To create a reference column, simply select it as an option in Field options > Type and specify the table and column that the column references. Understanding the reference The column value always references the entire record in the underlying table. The displayed value can be any column from that record, as selected in Show column . You can also include additional columns to display as explained later. Once the column type is set, you can start typing into it or double-click it to see a dropdown list of all available values. For example, if you have a list of clients defined in one table and you\u2019re tracking projects for each client, it makes sense for the Client column in the referencing table Projects to be a reference to the underlying table Clients , and set it to display the client\u2019s Name : Then, in your Projects table you can select available clients using a dropdown: Spotting reference columns You can tell that the values in a column represent a reference by the link icon that appears next to the values. If you accidentally type in a value that is not present in the Clients table, its value will be highlighted as invalid: Adding values to a reference column # Sometimes it\u2019s useful to add a new value to the dropdown list without having to switch to the underlying table. Reference columns make it easy! Just type in the value you want add and select the + value in the dropdown list. Grist will automatically add a new record containing this value to the underlying table and insert the proper reference: Converting text column to reference # When working with existing data, it\u2019s common to have existing text values that should really be reference values. Don\u2019t worry, conversion is simple! Just change the column type to Reference and Grist will automatically find and substitute matching values for references. If some values are not found, they\u2019ll be shown as invalid. You can then either add them to the underlying table or select the proper values for them. In this example, the first three values match perfectly, but Forest Labs is invalid because it doesn\u2019t exist in the Clients table: Including multiple fields from a reference # A big benefit of reference columns is that they allow you to easily bring in multiple columns from the underlying table. In our example, if you wanted to bring in $Client.Contact to the Projects table, you can just select the Contact column from Additional Columns section and it will be automatically added to the Projects table: If you\u2019re comfortable using formulas, you can see that the added column is just the formula =$Client.Contact . If you were so inclined, you could achieve the same result by manually adding the formula column. You can also use any other fields from Clients table by referencing $Client in formulas in the Projects table. Using references in formulas You may have noticed that the underlying table is Clients (plural) but the formula is $Client.Contact (singular). That\u2019s because the formula refers to the referencing column, not the underlying table. In our example, the referencing column is Client .","title":"Reference columns"},{"location":"col-refs/#reference-columns","text":"","title":"Reference columns"},{"location":"col-refs/#overview","text":"Reference columns in Grist allow one table to create an explicit reference to another. In the database world this is similar to a foreign key. In the spreadsheet world this is similar to a VLOOKUP , but much more powerful and easier to use. In this guide we\u2019ll use the term underlying table for the table that lists all available values, and referencing table for the table that uses those values.","title":"Overview"},{"location":"col-refs/#creating-a-new-reference-column","text":"To create a reference column, simply select it as an option in Field options > Type and specify the table and column that the column references. Understanding the reference The column value always references the entire record in the underlying table. The displayed value can be any column from that record, as selected in Show column . You can also include additional columns to display as explained later. Once the column type is set, you can start typing into it or double-click it to see a dropdown list of all available values. For example, if you have a list of clients defined in one table and you\u2019re tracking projects for each client, it makes sense for the Client column in the referencing table Projects to be a reference to the underlying table Clients , and set it to display the client\u2019s Name : Then, in your Projects table you can select available clients using a dropdown: Spotting reference columns You can tell that the values in a column represent a reference by the link icon that appears next to the values. If you accidentally type in a value that is not present in the Clients table, its value will be highlighted as invalid:","title":"Creating a new reference column"},{"location":"col-refs/#adding-values-to-a-reference-column","text":"Sometimes it\u2019s useful to add a new value to the dropdown list without having to switch to the underlying table. Reference columns make it easy! Just type in the value you want add and select the + value in the dropdown list. Grist will automatically add a new record containing this value to the underlying table and insert the proper reference:","title":"Adding values to a reference column"},{"location":"col-refs/#converting-text-column-to-reference","text":"When working with existing data, it\u2019s common to have existing text values that should really be reference values. Don\u2019t worry, conversion is simple! Just change the column type to Reference and Grist will automatically find and substitute matching values for references. If some values are not found, they\u2019ll be shown as invalid. You can then either add them to the underlying table or select the proper values for them. In this example, the first three values match perfectly, but Forest Labs is invalid because it doesn\u2019t exist in the Clients table:","title":"Converting text column to reference"},{"location":"col-refs/#including-multiple-fields-from-a-reference","text":"A big benefit of reference columns is that they allow you to easily bring in multiple columns from the underlying table. In our example, if you wanted to bring in $Client.Contact to the Projects table, you can just select the Contact column from Additional Columns section and it will be automatically added to the Projects table: If you\u2019re comfortable using formulas, you can see that the added column is just the formula =$Client.Contact . If you were so inclined, you could achieve the same result by manually adding the formula column. You can also use any other fields from Clients table by referencing $Client in formulas in the Projects table. Using references in formulas You may have noticed that the underlying table is Clients (plural) but the formula is $Client.Contact (singular). That\u2019s because the formula refers to the referencing column, not the underlying table. In our example, the referencing column is Client .","title":"Including multiple fields from a reference"},{"location":"col-transforms/","text":"Documentation to be written.","title":"Column transformations"},{"location":"col-types/","text":"Columns and data types # Overview # Grist columns have types, similar to other spreadsheets or databases, but with a few differences: Columns allow you to enter any value , regardless of their type. If a value entered is incompatible with the defined type, the cell will be highlighted with an error and columns referencing the invalid value will also display an error: Specifying a type # The default type for value columns is Text . You can change the column type in Field Options in the Sidepane: In the column menu drop-down, select Field options : Then, in the sidebar menu, use the type drop-down to select the appropriate type: Supported types # Grist supports the following types: Type Description Text ( Default ) Any string of text. Numeric Floating point numbers. Integer Integers (whole numbers). Toggle Boolean (True / False) Date Valid date (without a time component). Datetime Valid date + time. Choice List of pre-defined valid values. Reference A reference column to another table. Image Exactly what it sounds like.","title":"Column types"},{"location":"col-types/#columns-and-data-types","text":"","title":"Columns and data types"},{"location":"col-types/#overview","text":"Grist columns have types, similar to other spreadsheets or databases, but with a few differences: Columns allow you to enter any value , regardless of their type. If a value entered is incompatible with the defined type, the cell will be highlighted with an error and columns referencing the invalid value will also display an error:","title":"Overview"},{"location":"col-types/#specifying-a-type","text":"The default type for value columns is Text . You can change the column type in Field Options in the Sidepane: In the column menu drop-down, select Field options : Then, in the sidebar menu, use the type drop-down to select the appropriate type:","title":"Specifying a type"},{"location":"col-types/#supported-types","text":"Grist supports the following types: Type Description Text ( Default ) Any string of text. Numeric Floating point numbers. Integer Integers (whole numbers). Toggle Boolean (True / False) Date Valid date (without a time component). Datetime Valid date + time. Choice List of pre-defined valid values. Reference A reference column to another table. Image Exactly what it sounds like.","title":"Supported types"},{"location":"concepts/","text":"Documentation to be written.","title":"Grist concepts"},{"location":"contact-us/","text":"We want to hear from you! # Email: help@getgrist.com Issue tracker: issues.getgrist.com Please email us at help@getgrist.com with questions, suggestions, problem reports, or other feedback. Grist is a new product in active development. If you encounter a problem, please report it. You may email us or use our issue tracker , where you can search, create, and subscribe to problem reports and feature requests.","title":"Contact us"},{"location":"contact-us/#we-want-to-hear-from-you","text":"Email: help@getgrist.com Issue tracker: issues.getgrist.com Please email us at help@getgrist.com with questions, suggestions, problem reports, or other feedback. Grist is a new product in active development. If you encounter a problem, please report it. You may email us or use our issue tracker , where you can search, create, and subscribe to problem reports and feature requests.","title":"We want to hear from you!"},{"location":"dates/","text":"Overview # Grist supports both Date and DateTime column types. Both support different formatting options, and DateTime can also specify the timezone. When a column is set to be a Date or a DateTime, a datepicker widget allows you to select the date with a UI. When working with dates in formulas, the dates are Python datetime objects . That allows you to do some powerful things, but can be unexpected if you\u2019re not familiar with them. Parsing dates from strings and back # The DATEVALUE function converts a string that represents a date into a datetime object. It\u2019s simple to use and it will auto-detect different date formats: You can also use Python\u2019s datetime library, which provides two helpful functions: strptime() and strftime() . For example, let\u2019s say you have a table of United States Presidents and their inauguration dates (as strings). You\u2019d like to parse out the actual date to be able to sort the table properly. Here\u2019s how you would do that: First line imports the datetime library The second line splits the string into two parts and returns the second part (Python arrays are zero-based). The third line uses Python\u2019s strptime function to parse the date (e.g. \u201cMarch 4, 1861\u201d) into a datetime object. The first parameter to the function is the string to parse, the second parameter is the date format that the string is in. Take a look at the format options to see if the example format string %B %d, %Y makes sense. (Note: You could\u2019ve also used DATEVALUE(d) to achieve the same result.) The result looks to have proper date formats and can now be properly sorted, with George Washington at the top: And, because the column type is selected as a date, you can use the \u201cDate Format\u201d in \u201cField Options\u201d to select the format in which to display the date. Date arithmetic # Once you have a proper date column, often you\u2019ll want to do date arithmetic such as calculating the difference between two dates. The simplest way to do this is to use the DATEDIF function which takes two dates and the unit of information to return (Days, Months, or Years). You could also use the minus sign to subtract two dates, but you might be surprised at the result: This happens because subtracting two dateime objects as we did in the example above, results in a datetime.timedelta object which represents, \u201cA duration expressing the difference between two date, time, or datetime instances to microsecond resolution.\u201d In Grist (and Python) you have to be more specific above how you want to display the date difference. For example, to get the number of days from the returned timedelta object, use its .days property: If you want weeks or years, just divide by 7 or by 365. If you want hours, multiply by 24. You can also use specific functions to get what you want. For example, DAYS is a common function in spreadsheet apps that returns the difference between two dates: Excel/Sheets formulas Grist supports many other common functions from other spreadsheet apps, including DATEADD , DATEDIF , DATEVALUE , MONTH , HOUR , and many more . Getting a part of the date # You\u2019ve seen how to parse the date, display it in different formats, and do date arithmetic. But what if you want to get more information about a specific date, such as getting its day of the week? Option A # The best option is to use the WEEKDAY function, which behaves as it does in Excel: Because WEEKDAY function returns 1\u20137 for Sunday\u2013Saturday, George Washington started his term on Thursday, John Adams on Saturday, and Thomas Jefferson on Wednesday. Option B # Another option is to simply reformat the date using Date Format in Field options. First, set the \u201cDay of week\u201d column to be equal to \u201cFirst day\u201d column: Then set a custom Date Format in Field options. Consulting the date formatting reference we can see dddd returns the long form of the weekday (i.e. Monday, Tuesday, \u2026): Value versus display These two options are not equivalent, even though they produce a seemingly similar result. In Option A, the column value is the weekday. In Option B, however, the column value is the actual date (e.g. April 30th, 1789) and the weekday displayed is only the formatting. If you wanted to summarize by the \u201cDay of week\u201d column to find the most popular day to begin a presidency, only Option A would work. Additional resources # Python cheatsheet for strftime Date formatting cheatsheet","title":"Working with dates"},{"location":"dates/#overview","text":"Grist supports both Date and DateTime column types. Both support different formatting options, and DateTime can also specify the timezone. When a column is set to be a Date or a DateTime, a datepicker widget allows you to select the date with a UI. When working with dates in formulas, the dates are Python datetime objects . That allows you to do some powerful things, but can be unexpected if you\u2019re not familiar with them.","title":"Overview"},{"location":"dates/#parsing-dates-from-strings-and-back","text":"The DATEVALUE function converts a string that represents a date into a datetime object. It\u2019s simple to use and it will auto-detect different date formats: You can also use Python\u2019s datetime library, which provides two helpful functions: strptime() and strftime() . For example, let\u2019s say you have a table of United States Presidents and their inauguration dates (as strings). You\u2019d like to parse out the actual date to be able to sort the table properly. Here\u2019s how you would do that: First line imports the datetime library The second line splits the string into two parts and returns the second part (Python arrays are zero-based). The third line uses Python\u2019s strptime function to parse the date (e.g. \u201cMarch 4, 1861\u201d) into a datetime object. The first parameter to the function is the string to parse, the second parameter is the date format that the string is in. Take a look at the format options to see if the example format string %B %d, %Y makes sense. (Note: You could\u2019ve also used DATEVALUE(d) to achieve the same result.) The result looks to have proper date formats and can now be properly sorted, with George Washington at the top: And, because the column type is selected as a date, you can use the \u201cDate Format\u201d in \u201cField Options\u201d to select the format in which to display the date.","title":"Parsing dates from strings and back"},{"location":"dates/#date-arithmetic","text":"Once you have a proper date column, often you\u2019ll want to do date arithmetic such as calculating the difference between two dates. The simplest way to do this is to use the DATEDIF function which takes two dates and the unit of information to return (Days, Months, or Years). You could also use the minus sign to subtract two dates, but you might be surprised at the result: This happens because subtracting two dateime objects as we did in the example above, results in a datetime.timedelta object which represents, \u201cA duration expressing the difference between two date, time, or datetime instances to microsecond resolution.\u201d In Grist (and Python) you have to be more specific above how you want to display the date difference. For example, to get the number of days from the returned timedelta object, use its .days property: If you want weeks or years, just divide by 7 or by 365. If you want hours, multiply by 24. You can also use specific functions to get what you want. For example, DAYS is a common function in spreadsheet apps that returns the difference between two dates: Excel/Sheets formulas Grist supports many other common functions from other spreadsheet apps, including DATEADD , DATEDIF , DATEVALUE , MONTH , HOUR , and many more .","title":"Date arithmetic"},{"location":"dates/#getting-a-part-of-the-date","text":"You\u2019ve seen how to parse the date, display it in different formats, and do date arithmetic. But what if you want to get more information about a specific date, such as getting its day of the week?","title":"Getting a part of the date"},{"location":"dates/#option-a","text":"The best option is to use the WEEKDAY function, which behaves as it does in Excel: Because WEEKDAY function returns 1\u20137 for Sunday\u2013Saturday, George Washington started his term on Thursday, John Adams on Saturday, and Thomas Jefferson on Wednesday.","title":"Option A"},{"location":"dates/#option-b","text":"Another option is to simply reformat the date using Date Format in Field options. First, set the \u201cDay of week\u201d column to be equal to \u201cFirst day\u201d column: Then set a custom Date Format in Field options. Consulting the date formatting reference we can see dddd returns the long form of the weekday (i.e. Monday, Tuesday, \u2026): Value versus display These two options are not equivalent, even though they produce a seemingly similar result. In Option A, the column value is the weekday. In Option B, however, the column value is the actual date (e.g. April 30th, 1789) and the weekday displayed is only the formatting. If you wanted to summarize by the \u201cDay of week\u201d column to find the most popular day to begin a presidency, only Option A would work.","title":"Option B"},{"location":"dates/#additional-resources","text":"Python cheatsheet for strftime Date formatting cheatsheet","title":"Additional resources"},{"location":"enter-detail/","text":"Documentation to be written.","title":"Working in record view"},{"location":"enter-grid/","text":"Entering data # Grist behaves much like other spreadsheet software. You can type into any selected cell. While in type mode you can take several actions: Escape key cancels the operation and restores the previous values of the cell. Tab key saves your entry and moves your cursor to the next cell in the current row. Enter key saves your entry and moves your cursor to the next cell in the current column. Cut and pasting # You can cut and paste data into and out of Grist similar to other spreadsheet programs. If the pasted range is longer than the available records, additional records will be created. Available in future release If more columns are pasted than available, a prompt will confirm whether you\u2019d like to create additional columns or to limit paste to the current ones. Importing data # There are several ways to import data into Grist. Upload as a new document # From the Document List, click Upload Doc and select a file. You can import tab-delimited or comma-delimited files, as well as xls(x) files. If you\u2019re importing a spreadsheet with multiple tabs, each tab will be imported as a separate table in Grist. Import into existing document # From the Tables dropdown menu, select Upload Table and select a file.","title":"Entering data in a grid"},{"location":"enter-grid/#entering-data","text":"Grist behaves much like other spreadsheet software. You can type into any selected cell. While in type mode you can take several actions: Escape key cancels the operation and restores the previous values of the cell. Tab key saves your entry and moves your cursor to the next cell in the current row. Enter key saves your entry and moves your cursor to the next cell in the current column.","title":"Entering data"},{"location":"enter-grid/#cut-and-pasting","text":"You can cut and paste data into and out of Grist similar to other spreadsheet programs. If the pasted range is longer than the available records, additional records will be created. Available in future release If more columns are pasted than available, a prompt will confirm whether you\u2019d like to create additional columns or to limit paste to the current ones.","title":"Cut and pasting"},{"location":"enter-grid/#importing-data","text":"There are several ways to import data into Grist.","title":"Importing data"},{"location":"enter-grid/#upload-as-a-new-document","text":"From the Document List, click Upload Doc and select a file. You can import tab-delimited or comma-delimited files, as well as xls(x) files. If you\u2019re importing a spreadsheet with multiple tabs, each tab will be imported as a separate table in Grist.","title":"Upload as a new document"},{"location":"enter-grid/#import-into-existing-document","text":"From the Tables dropdown menu, select Upload Table and select a file.","title":"Import into existing document"},{"location":"exports/","text":"Documentation to be written.","title":"Exporting views"},{"location":"file-format/","text":"Documentation to be written.","title":"Document file format"},{"location":"formulas/","text":"Formulas and scripting # Entering a formula # Unlike typical spreadsheets, Grist formulas are column-wide. This means that a single formulas applies to the whole column\u2014you don\u2019t have to worry about filling it in for all rows. To enter a formula into a cell, enter the equal sign = followed by a python expression. For example, here we entered an expression =2**$foo which raises 2 to the power specified in column foo : Multi-line formulas # Python is a wonderful and powerful language, and it\u2019s a shame to constrict it to a single line in a cell. So Grist doesn\u2019t! You can use multiline complex Python expressions for any formulas column. In a cell you can use Shift+Enter to move the cursor to the next line: You can also enter your formula in the sidebar , where Enter gives you a new line automatically: Paste as values # If you\u2019d like to save the output of your formula as plain values, you can simply turn off the formula by clicking on the formula icon in the sidebar: \u2794 : You\u2019ll also notice that the column is no longer a formula by the absense of the leading = sign next to each value. Use the values, keep your formula Note that you don\u2019t lose your formula by turning it off. The formula itself remains and you can turn it back on. If you modified the values in the column, however, they will be recalculated by the formula. You can always undo to revert back to the previous state.","title":"Getting started with formulas"},{"location":"formulas/#formulas-and-scripting","text":"","title":"Formulas and scripting"},{"location":"formulas/#entering-a-formula","text":"Unlike typical spreadsheets, Grist formulas are column-wide. This means that a single formulas applies to the whole column\u2014you don\u2019t have to worry about filling it in for all rows. To enter a formula into a cell, enter the equal sign = followed by a python expression. For example, here we entered an expression =2**$foo which raises 2 to the power specified in column foo :","title":"Entering a formula"},{"location":"formulas/#multi-line-formulas","text":"Python is a wonderful and powerful language, and it\u2019s a shame to constrict it to a single line in a cell. So Grist doesn\u2019t! You can use multiline complex Python expressions for any formulas column. In a cell you can use Shift+Enter to move the cursor to the next line: You can also enter your formula in the sidebar , where Enter gives you a new line automatically:","title":"Multi-line formulas"},{"location":"formulas/#paste-as-values","text":"If you\u2019d like to save the output of your formula as plain values, you can simply turn off the formula by clicking on the formula icon in the sidebar: \u2794 : You\u2019ll also notice that the column is no longer a formula by the absense of the leading = sign next to each value. Use the values, keep your formula Note that you don\u2019t lose your formula by turning it off. The formula itself remains and you can turn it back on. If you modified the values in the column, however, they will be recalculated by the formula. You can always undo to revert back to the previous state.","title":"Paste as values"},{"location":"functions/","text":"Function List # Full power of Python # Grist uses Python (version 2.7) for formulas. You can use nearly all features of Python and its standard library. See Python documentation . Grist code runs in a secure sandbox, so Python code cannot access anything on your computer other than your document. This protects you when using Grist documents authored by someone else. Note that Python is case-sensitive, which applies to all functions, as well as Grist table and column names. The table below lists Grist-specific functions for accessing your document data, as well as a suite of Excel-like functions provided by Grist. Don\u2019t forget also that the entire Python\u2019s standard library is available. Category Functions Grist Record or rec , $Field or rec.Field , $group or rec.group , RecordSet , UserTable , all , lookupOne , lookupRecords Date DATE , DATEADD , DATEDIF , DATEVALUE , DATE_TO_XL , DAY , DAYS , DTIME , EDATE , EOMONTH , HOUR , ISOWEEKNUM , MINUTE , MONTH , NOW , SECOND , TODAY , WEEKDAY , WEEKNUM , XL_TO_DATE , YEAR , YEARFRAC Info CELL , ISBLANK , ISEMAIL , ISERR , ISERROR , ISLOGICAL , ISNA , ISNONTEXT , ISNUMBER , ISREF , ISTEXT , ISURL , N , NA , TYPE Logical AND , FALSE , IF , IFERROR , NOT , OR , TRUE Lookup ADDRESS , CHOOSE , COLUMN , COLUMNS , GETPIVOTDATA , HLOOKUP , HYPERLINK , INDEX , INDIRECT , LOOKUP , MATCH , OFFSET , ROW , ROWS , VLOOKUP Math ABS , ACOS , ACOSH , ARABIC , ASIN , ASINH , ATAN , ATAN2 , ATANH , CEILING , COMBIN , COS , COSH , DEGREES , EVEN , EXP , FACT , FACTDOUBLE , FLOOR , GCD , INT , LCM , LN , LOG , LOG10 , MOD , MROUND , MULTINOMIAL , ODD , PI , POWER , PRODUCT , QUOTIENT , RADIANS , RAND , RANDBETWEEN , ROMAN , ROUND , ROUNDDOWN , ROUNDUP , SERIESSUM , SIGN , SIN , SINH , SQRT , SQRTPI , SUBTOTAL , SUM , SUMIF , SUMIFS , SUMPRODUCT , SUMSQ , TAN , TANH , TRUNC Schedule SCHEDULE Stats AVEDEV , AVERAGE , AVERAGEA , AVERAGEIF , AVERAGEIFS , AVERAGE_WEIGHTED , BINOMDIST , CONFIDENCE , CORREL , COUNT , COUNTA , COVAR , CRITBINOM , DEVSQ , EXPONDIST , FDIST , FISHER , FISHERINV , FORECAST , F_DIST , F_DIST_RT , GEOMEAN , HARMEAN , HYPGEOMDIST , INTERCEPT , KURT , LARGE , LOGINV , LOGNORMDIST , MAX , MAXA , MEDIAN , MIN , MINA , MODE , NEGBINOMDIST , NORMDIST , NORMINV , NORMSDIST , NORMSINV , PEARSON , PERCENTILE , PERCENTRANK , PERCENTRANK_EXC , PERCENTRANK_INC , PERMUT , POISSON , PROB , QUARTILE , RANK , RANK_AVG , RANK_EQ , RSQ , SKEW , SLOPE , SMALL , STANDARDIZE , STDEV , STDEVA , STDEVP , STDEVPA , STEYX , TDIST , TINV , TRIMMEAN , TTEST , T_INV , T_INV_2T , VAR , VARA , VARP , VARPA , WEIBULL , ZTEST Text CHAR , CLEAN , CODE , CONCATENATE , CONCATENATE , DOLLAR , EXACT , FIND , FIXED , LEFT , LEN , LOWER , MID , PROPER , REGEXEXTRACT , REGEXMATCH , REGEXREPLACE , REPLACE , REPT , RIGHT , SEARCH , SUBSTITUTE , T , TEXT , TRIM , UPPER , VALUE Grist # class Record # Record # A Record represents a record of data. It is the primary means of accessing values in formulas. A Record for a particular table has a property for each data and formula column in the table. In a formula, $field is translated to rec.field , where rec is the Record for which the formula is being evaluated. For example: def Full_Name(rec, table): return rec.First_Name + ' ' + rec.LastName def Name_Length(rec, table): return len(rec.Full_Name) $ Field or rec .Field # $Field # Access the field named \u201cField\u201d of the current record. E.g. $First_Name or rec.First_Name . $group # $group # In a summary view, $group is a special field containing the list of Records that are summarized by the current summary line. E.g. len($group) is the count of those records. See RecordSet for useful properties offered by the returned object. Examples: sum($group.Amount) # Sum of the Amount field in the matching records sum(r.Amount for r in $group) # Same as sum($group.Amount) sum(r.Amount for r in $group if r > 0) # Sum of only the positive amounts sum(r.Shares * r.Price for r in $group) # Sum of shares * price products class RecordSet # RecordSet # A RecordSet represents a collection of records, as returned by Table.lookupRecords() or $group property in summary views. A RecordSet allows iterating through the records: sum(r.Amount for r in Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\")) min(r.DueDate for r in Tasks.lookupRecords(Owner=\"Bob\")) RecordSets also provide a convenient way to access the list of values for a particular field for all the records, as record_set.Field . For example, the examples above are equivalent to: sum(Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\").Amount) min(Tasks.lookupRecords(Owner=\"Bob\").DueDate) You can get the number of records in a RecordSet using len , e.g. len($group) . class UserTable # UserTable # Each data table in the document is represented in the code by an instance of UserTable class. These names are always capitalized. A UserTable provides access to all the records in the table, as well as methods to look up particular records. Every table in the document is available to all formulas. UserTable. all # all # The list of all the records in this table. For example, this evaluates to the number of records in the table Students . len(Students.all) This evaluates to the sum of the Population field for every record in the table Countries . sum(r.Population for r in Countries.all) UserTable. lookupOne (self, **field_value_pairs) # lookupOne # Returns a Record matching the given field=value arguments. If multiple records match, returns one of them. If none match, returns the special empty record. For example: People.lookupOne(First_Name=\"Lewis\", Last_Name=\"Carroll\") UserTable. lookupRecords (self, **field_value_pairs) # lookupRecords # Returns the Records from this table that match the given field=value arguments. If sort_by=field is given, sort the results by that field. For example: People.lookupRecords(Last_Name=\"Johnson\", sort_by=\"First_Name\") People.lookupRecords(First_Name=\"George\", Last_Name=\"Washington\") See RecordSet for useful properties offered by the returned object. Date # DATE (year, month, day) # DATE # Returns the datetime.datetime object that represents a particular date. The DATE function is most useful in formulas where year, month, and day are formulas, not constants. If year is between 0 and 1899 (inclusive), adds 1900 to calculate the year. >>> DATE(108, 1, 2) datetime.date(2008, 1, 2) >>> DATE(2008, 1, 2) datetime.date(2008, 1, 2) If month is greater than 12, rolls into the following year. >>> DATE(2008, 14, 2) datetime.date(2009, 2, 2) If month is less than 1, subtracts that many months plus 1, from the first month in the year. >>> DATE(2008, -3, 2) datetime.date(2007, 9, 2) If day is greater than the number of days in the given month, rolls into the following months. >>> DATE(2008, 1, 35) datetime.date(2008, 2, 4) If day is less than 1, subtracts that many days plus 1, from the first day of the given month. >>> DATE(2008, 1, -15) datetime.date(2007, 12, 16) DATEADD (start_date, days=0, months=0, years=0, weeks=0) # DATEADD # Returns the date a given number of days, months, years, or weeks away from start_date . You may specify arguments in any order if you specify argument names. Use negative values to subtract. For example, DATEADD(date, 1) is the same as DATEADD(date, days=1) , ands adds one day to date . DATEADD(date, years=1, days=-1) adds one year minus one day. >>> DATEADD(DATE(2011, 1, 15), 1) datetime.date(2011, 1, 16) >>> DATEADD(DATE(2011, 1, 15), months=1, days=-1) datetime.date(2011, 2, 14) >>> DATEADD(DATE(2011, 1, 15), years=-2, months=1, days=3, weeks=2) datetime.date(2009, 3, 4) >>> DATEADD(DATE(1975, 4, 30), years=50, weeks=-5) datetime.date(2025, 3, 26) DATEDIF (start_date, end_date, unit) # DATEDIF # Calculates the number of days, months, or years between two dates. Unit indicates the type of information that you want returned: \u201cY\u201d: The number of complete years in the period. \u201cM\u201d: The number of complete months in the period. \u201cD\u201d: The number of days in the period. \u201cMD\u201d: The difference between the days in start_date and end_date. The months and years of the dates are ignored. \u201cYM\u201d: The difference between the months in start_date and end_date. The days and years of the dates are ignored. \u201cYD\u201d: The difference between the days of start_date and end_date. The years of the dates are ignored. Two complete years in the period (2) >>> DATEDIF(DATE(2001, 1, 1), DATE(2003, 1, 1), \"Y\") 2 440 days between June 1, 2001, and August 15, 2002 (440) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"D\") 440 75 days between June 1 and August 15, ignoring the years of the dates (75) >>> DATEDIF(DATE(2001, 6, 1), DATE(2012, 8, 15), \"YD\") 75 The difference between 1 and 15, ignoring the months and the years of the dates (14) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"MD\") 14 DATEVALUE (date_string, tz=None) # DATEVALUE # Converts a date that is stored as text to a datetime object. >>> DATEVALUE(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"30-Jan-2008\") datetime.datetime(2008, 1, 30, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"2008-12-11\") datetime.datetime(2008, 12, 11, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"5-JUL\").replace(year=2000) datetime.datetime(2000, 7, 5, 0, 0, tzinfo=moment.tzinfo('America/New_York')) In case of ambiguity, prefer M/D/Y format. >>> DATEVALUE(\"1/2/3\") datetime.datetime(2003, 1, 2, 0, 0, tzinfo=moment.tzinfo('America/New_York')) DATE_TO_XL (date_value) # DATE_TO_XL # Converts a Python date or datetime object to the serial number as used by Excel, with December 30, 1899 as serial number 1. See XL_TO_DATE for more explanation. >>> DATE_TO_XL(datetime.date(2008, 1, 1)) 39448.0 >>> DATE_TO_XL(datetime.date(2012, 3, 14)) 40982.0 >>> DATE_TO_XL(datetime.datetime(2012, 3, 14, 1, 30)) 40982.0625 DAY (date) # DAY # Returns the day of a date, as an integer ranging from 1 to 31. Same as date.day . >>> DAY(DATE(2011, 4, 15)) 15 >>> DAY(\"5/31/2012\") 31 >>> DAY(datetime.datetime(1900, 1, 1)) 1 DAYS (end_date, start_date) # DAYS # Returns the number of days between two dates. Same as (end_date - start_date).days . >>> DAYS(\"3/15/11\",\"2/1/11\") 42 >>> DAYS(DATE(2011, 12, 31), DATE(2011, 1, 1)) 364 >>> DAYS(\"2/1/11\", \"3/15/11\") -42 DTIME (value, tz=None) # DTIME # Returns the value converted to a python datetime object. The value may be a string , date (interpreted as midnight on that day), time (interpreted as a time-of-day today), or an existing datetime . The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. If the input is itself a datetime with the timezone set, it is returned unchanged (no changes to its timezone). >>> DTIME(datetime.date(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.date(2017, 1, 1), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('Europe/Paris')) >>> DTIME(datetime.datetime(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC'))) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC')), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) EDATE (start_date, months) # EDATE # Returns the date that is the given number of months before or after start_date . Use EDATE to calculate maturity dates or due dates that fall on the same day of the month as the date of issue. >>> EDATE(DATE(2011, 1, 15), 1) datetime.date(2011, 2, 15) >>> EDATE(DATE(2011, 1, 15), -1) datetime.date(2010, 12, 15) >>> EDATE(DATE(2011, 1, 15), 2) datetime.date(2011, 3, 15) >>> EDATE(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 1) >>> EDATE(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 1) EOMONTH (start_date, months) # EOMONTH # Returns the date for the last day of the month that is the indicated number of months before or after start_date. Use EOMONTH to calculate maturity dates or due dates that fall on the last day of the month. >>> EOMONTH(DATE(2011, 1, 1), 1) datetime.date(2011, 2, 28) >>> EOMONTH(DATE(2011, 1, 15), -3) datetime.date(2010, 10, 31) >>> EOMONTH(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 31) >>> EOMONTH(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 31) HOUR (time) # HOUR # Same as time.hour . >>> HOUR(XL_TO_DATE(0.75)) 18 >>> HOUR(\"7/18/2011 7:45\") 7 >>> HOUR(\"4/21/2012\") 0 ISOWEEKNUM (date) # ISOWEEKNUM # Returns the ISO week number of the year for a given date. >>> ISOWEEKNUM(\"3/9/2012\") 10 >>> [ISOWEEKNUM(DATE(2000 + y, 1, 1)) for y in [0,1,2,3,4,5,6,7,8]] [52, 1, 1, 1, 1, 53, 52, 1, 1] MINUTE (time) # MINUTE # Returns the minutes of datetime , as an integer from 0 to 59. Same as time.minute . >>> MINUTE(XL_TO_DATE(0.75)) 0 >>> MINUTE(\"7/18/2011 7:45\") 45 >>> MINUTE(\"12:59:00 PM\") 59 >>> MINUTE(datetime.time(12, 58, 59)) 58 MONTH (date) # MONTH # Returns the month of a date represented, as an integer from from 1 (January) to 12 (December). Same as date.month . >>> MONTH(DATE(2011, 4, 15)) 4 >>> MONTH(\"5/31/2012\") 5 >>> MONTH(datetime.datetime(1900, 1, 1)) 1 NOW (tz=None) # NOW # Returns the datetime object for the current time. SECOND (time) # SECOND # Returns the seconds of datetime , as an integer from 0 to 59. Same as time.second . >>> SECOND(XL_TO_DATE(0.75)) 0 >>> SECOND(\"7/18/2011 7:45:13\") 13 >>> SECOND(datetime.time(12, 58, 59)) 59 TODAY () # TODAY # Returns the date object for the current date. WEEKDAY (date, return_type=1) # WEEKDAY # Returns the day of the week corresponding to a date. The day is given as an integer, ranging from 1 (Sunday) to 7 (Saturday), by default. Return_type determines the type of the returned value. 1 (default) - Returns 1 (Sunday) through 7 (Saturday). 2 - Returns 1 (Monday) through 7 (Sunday). 3 - Returns 0 (Monday) through 6 (Sunday). 11 - Returns 1 (Monday) through 7 (Sunday). 12 - Returns 1 (Tuesday) through 7 (Monday). 13 - Returns 1 (Wednesday) through 7 (Tuesday). 14 - Returns 1 (Thursday) through 7 (Wednesday). 15 - Returns 1 (Friday) through 7 (Thursday). 16 - Returns 1 (Saturday) through 7 (Friday). 17 - Returns 1 (Sunday) through 7 (Saturday). >>> WEEKDAY(DATE(2008, 2, 14)) 5 >>> WEEKDAY(DATE(2012, 3, 1)) 5 >>> WEEKDAY(DATE(2012, 3, 1), 1) 5 >>> WEEKDAY(DATE(2012, 3, 1), 2) 4 >>> WEEKDAY(\"3/1/2012\", 3) 3 WEEKNUM (date, return_type=1) # WEEKNUM # Returns the week number of a specific date. For example, the week containing January 1 is the first week of the year, and is numbered week 1. Return_type determines which week is considered the first week of the year. 1 (default) - Week 1 is the first week starting Sunday that contains January 1. 2 - Week 1 is the first week starting Monday that contains January 1. 11 - Week 1 is the first week starting Monday that contains January 1. 12 - Week 1 is the first week starting Tuesday that contains January 1. 13 - Week 1 is the first week starting Wednesday that contains January 1. 14 - Week 1 is the first week starting Thursday that contains January 1. 15 - Week 1 is the first week starting Friday that contains January 1. 16 - Week 1 is the first week starting Saturday that contains January 1. 17 - Week 1 is the first week starting Sunday that contains January 1. 21 - ISO 8601 Approach: Week 1 is the first week starting Monday that contains January 4. Equivalently, it is the week that contains the first Thursday of the year. >>> WEEKNUM(DATE(2012, 3, 9)) 10 >>> WEEKNUM(DATE(2012, 3, 9), 2) 11 >>> WEEKNUM('1/1/1900') 1 >>> WEEKNUM('2/1/1900') 5 XL_TO_DATE (value, tz=None) # XL_TO_DATE # Converts a provided Excel serial number representing a date into a datetime object. Value is interpreted as the number of days since December 30, 1899. (This corresponds to Google Sheets interpretation. Excel starts with Dec. 31, 1899 but wrongly considers 1900 to be a leap year. Excel for Mac should be configured to use 1900 date system, i.e. uncheck \u201cUse the 1904 date system\u201d option.) The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. >>> XL_TO_DATE(41100.1875) datetime.datetime(2012, 7, 10, 4, 30, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(39448) datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(40982.0625) datetime.datetime(2012, 3, 14, 1, 30, tzinfo=moment.tzinfo('America/New_York')) YEAR (date) # YEAR # Returns the year corresponding to a date as an integer. Same as date.year . >>> YEAR(DATE(2011, 4, 15)) 2011 >>> YEAR(\"5/31/2030\") 2030 >>> YEAR(datetime.datetime(1900, 1, 1)) 1900 YEARFRAC (start_date, end_date, basis=0) # YEARFRAC # Calculates the fraction of the year represented by the number of whole days between two dates. Basis is the type of day count basis to use. 0 (default) - US (NASD) 30/360 1 - Actual/actual 2 - Actual/360 3 - Actual/365 4 - European 30/360 This function is useful for financial calculations. For compatibility with Excel, it defaults to using the NASD standard calendar. For use in non-financial settings, option 1 (actual/actual) is likely the correct choice. See https://en.wikipedia.org/wiki/360-day_calendar for explanation of the US 30/360 and European 30/360 methods. See http://www.dwheeler.com/yearfrac/ for analysis of Excel\u2019s particular implementation. Fraction of the year between 1/1/2012 and 7/30/12, omitting the Basis argument. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30)) '0.58055556' Fraction between same dates, using the Actual/Actual basis argument. Because 2012 is a Leap year, it has a 366 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 1) '0.57650273' Fraction between same dates, using the Actual/365 basis argument. Uses a 365 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 3) '0.57808219' Info # CELL (info_type, reference) # CELL # Returns the requested information about the specified cell. This is not implemented in Grist Note This function is not currently implemented in Grist. ISBLANK (value) # ISBLANK # Returns whether a value refers to an empty cell. It isn\u2019t implemented in Grist. To check for an empty string, use value == \"\" . Note This function is not currently implemented in Grist. ISEMAIL (value) # ISEMAIL # Returns whether a value is a valid email address. Note that checking email validity is not an exact science. The technical standard considers many email addresses valid that are not used in practice, and would not be considered valid by most users. Instead, we follow Google Sheets implementation, with some differences, noted below. >>> ISEMAIL(\"Abc.123@example.com\") True >>> ISEMAIL(\"Bob_O-Reilly+tag@example.com\") True >>> ISEMAIL(\"John Doe\") False >>> ISEMAIL(\"john@aol...com\") False ISERR (value) # ISERR # Checks whether a value is an error other than an invalid value. It isn\u2019t implemented in Grist. To check if a cell had an error, use try: ... value ... except Exception, err: ... do something about the error ... Note This function is not currently implemented in Grist. ISERROR (value) # ISERROR # Checks whether a value is an error or an invalid value. It currently only returns True for invalid values, False for valid ones. Errors that cause an exception have to be dealt with using try...except (see also ISERR ). >>> ISERROR(AltText(\"\")) True >>> ISERROR(AltText(\"fail\")) True >>> ISERROR(float('nan')) True >>> [ISERROR(v) for v in [0, None, \"\", \"Test\", 17.0]] [False, False, False, False, False] ISLOGICAL (value) # ISLOGICAL # Checks whether a value is True or False . >>> ISLOGICAL(True) True >>> ISLOGICAL(False) True >>> ISLOGICAL(0) False >>> ISLOGICAL(None) False >>> ISLOGICAL(\"Test\") False ISNA (value) # ISNA # Checks whether a value is the error #N/A . >>> ISNA(float('nan')) True >>> ISNA(0.0) False >>> ISNA('text') False >>> ISNA(float('-inf')) False ISNONTEXT (value) # ISNONTEXT # Checks whether a value is non-textual. >>> ISNONTEXT(\"asdf\") False >>> ISNONTEXT(\"\") False >>> ISNONTEXT(AltText(\"text\")) False >>> ISNONTEXT(17.0) True >>> ISNONTEXT(None) True >>> ISNONTEXT(datetime.date(2011, 1, 1)) True ISNUMBER (value) # ISNUMBER # Checks whether a value is a number. >>> ISNUMBER(17) True >>> ISNUMBER(-123.123423) True >>> ISNUMBER(False) True >>> ISNUMBER(float('nan')) True >>> ISNUMBER(float('inf')) True >>> ISNUMBER('17') False >>> ISNUMBER(None) False >>> ISNUMBER(datetime.date(2011, 1, 1)) False ISREF (value) # ISREF # Checks whether a value is a table record. For example, if a column person is of type Reference to the People table, then ISREF($person) is True. Similarly, ISREF(People.lookupOne(name=$name)) is True. For any other type of value, ISREF() would evaluate to False. >>> ISREF(17) False >>> ISREF(\"Roger\") False ISTEXT (value) # ISTEXT # Checks whether a value is text. >>> ISTEXT(\"asdf\") True >>> ISTEXT(\"\") True >>> ISTEXT(AltText(\"text\")) True >>> ISTEXT(17.0) False >>> ISTEXT(None) False >>> ISTEXT(datetime.date(2011, 1, 1)) False ISURL (value) # ISURL # Checks whether a value is a valid URL. It does not need to be fully qualified, or to include \u201chttp://\u201d and \u201cwww\u201d. It does not follow a standard, but attempts to work similarly to ISURL in Google Sheets, and to return True for text that is likely a URL. Valid protocols include ftp, http, https, gopher, mailto, news, telnet, and aim. >>> ISURL(\"http://www.getgrist.com\") True >>> ISURL(\"https://foo.com/test_(wikipedia)#cite-1\") True >>> ISURL(\"mailto://user@example.com\") True >>> ISURL(\"http:///a\") False N (value) # N # Returns the value converted to a number. True/False are converted to 1/0. A date is converted to Excel-style serial number of the date. Anything else is converted to 0. >>> N(7) 7 >>> N(7.1) 7.1 >>> N(\"Even\") 0 >>> N(\"7\") 0 >>> N(True) 1 >>> N(datetime.datetime(2011, 4, 17)) 40650.0 NA () # NA # Returns the \u201cvalue not available\u201d error, #N/A . >>> math.isnan(NA()) True TYPE (value) # TYPE # Returns a number associated with the type of data passed into the function. This is not implemented in Grist. Use isinstance(value, type) or type(value) . Note This function is not currently implemented in Grist. Logical # AND (logical_expression, *logical_expressions) # AND # Returns True if all of the arguments are logically true, and False if any are false. Same as all([value1, value2, ...]) . >>> AND(1) True >>> AND(0) False >>> AND(1, 1) True >>> AND(1,2,3,4) True >>> AND(1,2,3,4,0) False FALSE () # FALSE # Returns the logical value False . You may also use the value False directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> FALSE() False IF (logical_expression, value_if_true, value_if_false) # IF # Returns one value if a logical expression is True and another if it is False . The equivalent Python expression is value_if_true if logical_expression else value_if_false . Since Grist supports multi-line formulas, you may also use Python blocks such as: if logical_expression: return value_if_true else: return value_if_false >>> IF(12, \"Yes\", \"No\") 'Yes' >>> IF(None, \"Yes\", \"No\") 'No' >>> IF(True, 0.85, 0.0) 0.85 >>> IF(False, 0.85, 0.0) 0.0 IFERROR (value, value_if_error=\"\") # IFERROR # Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent. >>> IFERROR(float('nan'), \"**NAN**\") '**NAN**' >>> IFERROR(17.17, \"**NAN**\") 17.17 >>> IFERROR(\"Text\") 'Text' >>> IFERROR(AltText(\"hello\")) '' NOT (logical_expression) # NOT # True . Same as not logical_expression . >>> NOT(123) False >>> NOT(0) True OR (logical_expression, *logical_expressions) # OR # Returns True if any of the arguments is logically true, and false if all of the arguments are false. Same as any([value1, value2, ...]) . >>> OR(1) True >>> OR(0) False >>> OR(1, 1) True >>> OR(0, 1) True >>> OR(0, 0) False >>> OR(0,False,0.0,\"\",None) False >>> OR(0,None,3,0) True TRUE () # TRUE # Returns the logical value True . You may also use the value True directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> TRUE() True Lookup # ADDRESS (row, column, absolute_relative_mode, use_a1_notation, sheet) # ADDRESS # Returns a cell reference as a string. Note This function is not currently implemented in Grist. CHOOSE (index, choice1, choice2) # CHOOSE # Returns an element from a list of choices based on index. Note This function is not currently implemented in Grist. COLUMN (cell_reference=None) # COLUMN # Returns the column number of a specified cell, with A=1 . Note This function is not currently implemented in Grist. COLUMNS (range) # COLUMNS # Returns the number of columns in a specified array or range. Note This function is not currently implemented in Grist. GETPIVOTDATA (value_name, any_pivot_table_cell, original_column_1, pivot_item_1=None, *args) # GETPIVOTDATA # Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings. Note This function is not currently implemented in Grist. HLOOKUP (search_key, range, index, is_sorted) # HLOOKUP # Horizontal lookup. Searches across the first row of a range for a key and returns the value of a specified cell in the column found. Note This function is not currently implemented in Grist. HYPERLINK (url, link_label) # HYPERLINK # Creates a hyperlink inside a cell. Note This function is not currently implemented in Grist. INDEX (reference, row, column) # INDEX # Returns the content of a cell, specified by row and column offset. Note This function is not currently implemented in Grist. INDIRECT (cell_reference_as_string) # INDIRECT # Returns a cell reference specified by a string. Note This function is not currently implemented in Grist. LOOKUP (search_key, search_range_or_search_result_array, result_range=None) # LOOKUP # Looks through a row or column for a key and returns the value of the cell in a result range located in the same position as the search row or column. Note This function is not currently implemented in Grist. MATCH (search_key, range, search_type) # MATCH # Returns the relative position of an item in a range that matches a specified value. Note This function is not currently implemented in Grist. OFFSET (cell_reference, offset_rows, offset_columns, height, width) # OFFSET # Returns a range reference shifted a specified number of rows and columns from a starting cell reference. Note This function is not currently implemented in Grist. ROW (cell_reference) # ROW # Returns the row number of a specified cell. Note This function is not currently implemented in Grist. ROWS (range) # ROWS # Returns the number of rows in a specified array or range. Note This function is not currently implemented in Grist. VLOOKUP (search_key, range, index, is_sorted) # VLOOKUP # Vertical lookup. Searches down the first column of a range for a key and returns the value of a specified cell in the row found. Note This function is not currently implemented in Grist. Math # ABS (value) # ABS # Returns the absolute value of a number. >>> ABS(2) 2 >>> ABS(-2) 2 >>> ABS(-4) 4 ACOS (value) # ACOS # Returns the inverse cosine of a value, in radians. >>> round(ACOS(-0.5), 9) 2.094395102 >>> round(ACOS(-0.5)*180/PI(), 10) 120.0 ACOSH (value) # ACOSH # Returns the inverse hyperbolic cosine of a number. >>> ACOSH(1) 0.0 >>> round(ACOSH(10), 7) 2.9932228 ARABIC (roman_numeral) # ARABIC # Computes the value of a Roman numeral. >>> ARABIC(\"LVII\") 57 >>> ARABIC('mcmxii') 1912 ASIN (value) # ASIN # Returns the inverse sine of a value, in radians. >>> round(ASIN(-0.5), 9) -0.523598776 >>> round(ASIN(-0.5)*180/PI(), 10) -30.0 >>> round(DEGREES(ASIN(-0.5)), 10) -30.0 ASINH (value) # ASINH # Returns the inverse hyperbolic sine of a number. >>> round(ASINH(-2.5), 9) -1.647231146 >>> round(ASINH(10), 9) 2.99822295 ATAN (value) # ATAN # Returns the inverse tangent of a value, in radians. >>> round(ATAN(1), 9) 0.785398163 >>> ATAN(1)*180/PI() 45.0 >>> DEGREES(ATAN(1)) 45.0 ATAN2 (x, y) # ATAN2 # Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair ( x , y ), in radians. >>> round(ATAN2(1, 1), 9) 0.785398163 >>> round(ATAN2(-1, -1), 9) -2.35619449 >>> ATAN2(-1, -1)*180/PI() -135.0 >>> DEGREES(ATAN2(-1, -1)) -135.0 >>> round(ATAN2(1,2), 9) 1.107148718 ATANH (value) # ATANH # Returns the inverse hyperbolic tangent of a number. >>> round(ATANH(0.76159416), 9) 1.00000001 >>> round(ATANH(-0.1), 9) -0.100335348 CEILING (value, factor=1) # CEILING # Rounds a number up to the nearest multiple of factor, or the nearest integer if the factor is omitted or 1. >>> CEILING(2.5, 1) 3 >>> CEILING(-2.5, -2) -4 >>> CEILING(-2.5, 2) -2 >>> CEILING(1.5, 0.1) 1.5 >>> CEILING(0.234, 0.01) 0.24 COMBIN (n, k) # COMBIN # Returns the number of ways to choose some number of objects from a pool of a given size of objects. >>> COMBIN(8,2) 28 >>> COMBIN(4,2) 6 >>> COMBIN(10,7) 120 COS (angle) # COS # Returns the cosine of an angle provided in radians. >>> round(COS(1.047), 7) 0.5001711 >>> round(COS(60*PI()/180), 10) 0.5 >>> round(COS(RADIANS(60)), 10) 0.5 COSH (value) # COSH # Returns the hyperbolic cosine of any real number. >>> round(COSH(4), 6) 27.308233 >>> round(COSH(EXP(1)), 7) 7.6101251 DEGREES (angle) # DEGREES # Converts an angle value in radians to degrees. >>> round(DEGREES(ACOS(-0.5)), 10) 120.0 >>> DEGREES(PI()) 180.0 EVEN (value) # EVEN # Rounds a number up to the nearest even integer, rounding away from zero. >>> EVEN(1.5) 2 >>> EVEN(3) 4 >>> EVEN(2) 2 >>> EVEN(-1) -2 EXP (exponent) # EXP # Returns Euler\u2019s number, e (~2.718) raised to a power. >>> round(EXP(1), 8) 2.71828183 >>> round(EXP(2), 7) 7.3890561 FACT (value) # FACT # Returns the factorial of a number. >>> FACT(5) 120 >>> FACT(1.9) 1 >>> FACT(0) 1 >>> FACT(1) 1 >>> FACT(-1) Traceback (most recent call last): ... ValueError: factorial() not defined for negative values FACTDOUBLE (value) # FACTDOUBLE # Returns the \u201cdouble factorial\u201d of a number. >>> FACTDOUBLE(6) 48 >>> FACTDOUBLE(7) 105 >>> FACTDOUBLE(3) 3 >>> FACTDOUBLE(4) 8 FLOOR (value, factor=1) # FLOOR # Rounds a number down to the nearest integer multiple of specified significance. >>> FLOOR(3.7,2) 2 >>> FLOOR(-2.5,-2) -2 >>> FLOOR(2.5,-2) Traceback (most recent call last): ... ValueError: factor argument invalid >>> FLOOR(1.58,0.1) 1.5 >>> FLOOR(0.234,0.01) 0.23 GCD (value1, *more_values) # GCD # Returns the greatest common divisor of one or more integers. >>> GCD(5, 2) 1 >>> GCD(24, 36) 12 >>> GCD(7, 1) 1 >>> GCD(5, 0) 5 >>> GCD(0, 5) 5 >>> GCD(5) 5 >>> GCD(14, 42, 21) 7 INT (value) # INT # Rounds a number down to the nearest integer that is less than or equal to it. >>> INT(8.9) 8 >>> INT(-8.9) -9 >>> 19.5-INT(19.5) 0.5 LCM (value1, *more_values) # LCM # Returns the least common multiple of one or more integers. >>> LCM(5, 2) 10 >>> LCM(24, 36) 72 >>> LCM(0, 5) 0 >>> LCM(5) 5 >>> LCM(10, 100) 100 >>> LCM(12, 18) 36 >>> LCM(12, 18, 24) 72 LN (value) # LN # Returns the the logarithm of a number, base e (Euler\u2019s number). >>> round(LN(86), 7) 4.4543473 >>> round(LN(2.7182818), 7) 1.0 >>> round(LN(EXP(3)), 10) 3.0 LOG (value, base=10) # LOG # Returns the the logarithm of a number given a base. >>> LOG(10) 1.0 >>> LOG(8, 2) 3.0 >>> round(LOG(86, 2.7182818), 7) 4.4543473 LOG10 (value) # LOG10 # Returns the the logarithm of a number, base 10. >>> round(LOG10(86), 9) 1.934498451 >>> LOG10(10) 1.0 >>> LOG10(100000) 5.0 >>> LOG10(10**5) 5.0 MOD (dividend, divisor) # MOD # Returns the result of the modulo operator, the remainder after a division operation. >>> MOD(3, 2) 1 >>> MOD(-3, 2) 1 >>> MOD(3, -2) -1 >>> MOD(-3, -2) -1 MROUND (value, factor) # MROUND # Rounds one number to the nearest integer multiple of another. >>> MROUND(10, 3) 9 >>> MROUND(-10, -3) -9 >>> round(MROUND(1.3, 0.2), 10) 1.4 >>> MROUND(5, -2) Traceback (most recent call last): ... ValueError: factor argument invalid MULTINOMIAL (value1, *more_values) # MULTINOMIAL # Returns the factorial of the sum of values divided by the product of the values\u2019 factorials. >>> MULTINOMIAL(2, 3, 4) 1260 >>> MULTINOMIAL(3) 1 >>> MULTINOMIAL(1,2,3) 60 >>> MULTINOMIAL(0,2,4,6) 13860 ODD (value) # ODD # Rounds a number up to the nearest odd integer. >>> ODD(1.5) 3 >>> ODD(3) 3 >>> ODD(2) 3 >>> ODD(-1) -1 >>> ODD(-2) -3 PI () # PI # Returns the value of Pi to 14 decimal places. >>> round(PI(), 9) 3.141592654 >>> round(PI()/2, 9) 1.570796327 >>> round(PI()*9, 8) 28.27433388 POWER (base, exponent) # POWER # Returns a number raised to a power. >>> POWER(5,2) 25.0 >>> round(POWER(98.6,3.2), 3) 2401077.222 >>> round(POWER(4,5.0/4), 9) 5.656854249 PRODUCT (factor1, *more_factors) # PRODUCT # Returns the result of multiplying a series of numbers together. Each argument may be a number or an array. >>> PRODUCT([5,15,30]) 2250 >>> PRODUCT([5,15,30], 2) 4500 >>> PRODUCT(5,15,[30],[2]) 4500 QUOTIENT (dividend, divisor) # QUOTIENT # Returns one number divided by another. >>> QUOTIENT(5, 2) 2 >>> QUOTIENT(4.5, 3.1) 1 >>> QUOTIENT(-10, 3) -3 RADIANS (angle) # RADIANS # Converts an angle value in degrees to radians. >>> round(RADIANS(270), 6) 4.712389 RAND () # RAND # Returns a random number between 0 inclusive and 1 exclusive. RANDBETWEEN (low, high) # RANDBETWEEN # Returns a uniformly random integer between two values, inclusive. ROMAN (number, form_unused=None) # ROMAN # Formats a number in Roman numerals. The second argument is ignored in this implementation. >>> ROMAN(499,0) 'CDXCIX' >>> ROMAN(499.2,0) 'CDXCIX' >>> ROMAN(57) 'LVII' >>> ROMAN(1912) 'MCMXII' ROUND (value, places=0) # ROUND # Rounds a number to a certain number of decimal places according to standard rules. >>> ROUND(2.15, 1) # Excel actually gives the more correct 2.2 2.1 >>> ROUND(2.149, 1) 2.1 >>> ROUND(-1.475, 2) -1.48 >>> ROUND(21.5, -1) 20.0 >>> ROUND(626.3,-3) 1000.0 >>> ROUND(1.98,-1) 0.0 >>> ROUND(-50.55,-2) -100.0 ROUNDDOWN (value, places=0) # ROUNDDOWN # Rounds a number to a certain number of decimal places, always rounding down towards zero. >>> ROUNDDOWN(3.2, 0) 3 >>> ROUNDDOWN(76.9,0) 76 >>> ROUNDDOWN(3.14159, 3) 3.141 >>> ROUNDDOWN(-3.14159, 1) -3.1 >>> ROUNDDOWN(31415.92654, -2) 31400 ROUNDUP (value, places=0) # ROUNDUP # Rounds a number to a certain number of decimal places, always rounding up away from zero. >>> ROUNDUP(3.2,0) 4 >>> ROUNDUP(76.9,0) 77 >>> ROUNDUP(3.14159, 3) 3.142 >>> ROUNDUP(-3.14159, 1) -3.2 >>> ROUNDUP(31415.92654, -2) 31500 SERIESSUM (x, n, m, a) # SERIESSUM # Given parameters x, n, m, and a, returns the power series sum a_1 x^n + a_2 x^(n+m) + \u2026 + a_i*x^(n+(i-1)m), where i is the number of entries in range a . >>> SERIESSUM(1,0,1,1) 1 >>> SERIESSUM(2,1,0,[1,2,3]) 12 >>> SERIESSUM(-3,1,1,[2,4,6]) -132 >>> round(SERIESSUM(PI()/4,0,2,[1,-1./FACT(2),1./FACT(4),-1./FACT(6)]), 6) 0.707103 SIGN (value) # SIGN # Given an input number, returns -1 if it is negative, 1 if positive, and 0 if it is zero. >>> SIGN(10) 1 >>> SIGN(4.0-4.0) 0 >>> SIGN(-0.00001) -1 SIN (angle) # SIN # Returns the sine of an angle provided in radians. >>> round(SIN(PI()), 10) 0.0 >>> SIN(PI()/2) 1.0 >>> round(SIN(30*PI()/180), 10) 0.5 >>> round(SIN(RADIANS(30)), 10) 0.5 SINH (value) # SINH # Returns the hyperbolic sine of any real number. >>> round(2.868*SINH(0.0342*1.03), 7) 0.1010491 SQRT (value) # SQRT # Returns the positive square root of a positive number. >>> SQRT(16) 4.0 >>> SQRT(-16) Traceback (most recent call last): ... ValueError: math domain error >>> SQRT(ABS(-16)) 4.0 SQRTPI (value) # SQRTPI # Returns the positive square root of the product of Pi and the given positive number. >>> round(SQRTPI(1), 6) 1.772454 >>> round(SQRTPI(2), 6) 2.506628 SUBTOTAL (function_code, range1, range2) # SUBTOTAL # Returns a subtotal for a vertical range of cells using a specified aggregation function. Note This function is not currently implemented in Grist. SUM (value1, *more_values) # SUM # Returns the sum of a series of numbers. Each argument may be a number or an array. Non-numeric values are ignored. >>> SUM([5,15,30]) 50 >>> SUM([5.,15,30], 2) 52.0 >>> SUM(5,15,[30],[2]) 52 SUMIF (records, criterion, sum_range) # SUMIF # Returns a conditional sum across a range. Note This function is not currently implemented in Grist. SUMIFS (sum_range, criteria_range1, criterion1, *args) # SUMIFS # Returns the sum of a range depending on multiple criteria. Note This function is not currently implemented in Grist. SUMPRODUCT (array1, *more_arrays) # SUMPRODUCT # Multiplies corresponding components in the given arrays, and returns the sum of those products. >>> SUMPRODUCT([3,8,1,4,6,9], [2,6,5,7,7,3]) 156 >>> SUMPRODUCT([], [], []) 0 >>> SUMPRODUCT([-0.25], [-2], [-3]) -1.5 >>> SUMPRODUCT([-0.25, -0.25], [-2, -2], [-3, -3]) -3.0 SUMSQ (value1, value2) # SUMSQ # Returns the sum of the squares of a series of numbers and/or cells. Note This function is not currently implemented in Grist. TAN (angle) # TAN # Returns the tangent of an angle provided in radians. >>> round(TAN(0.785), 8) 0.99920399 >>> round(TAN(45*PI()/180), 10) 1.0 >>> round(TAN(RADIANS(45)), 10) 1.0 TANH (value) # TANH # Returns the hyperbolic tangent of any real number. >>> round(TANH(-2), 6) -0.964028 >>> TANH(0) 0.0 >>> round(TANH(0.5), 6) 0.462117 TRUNC (value, places=0) # TRUNC # Truncates a number to a certain number of significant digits by omitting less significant digits. >>> TRUNC(8.9) 8 >>> TRUNC(-8.9) -8 >>> TRUNC(0.45) 0 Schedule # SCHEDULE (schedule, start=None, count=10, end=None) # SCHEDULE # Returns the list of datetime objects generated according to the schedule string. Starts at start , which defaults to NOW(). Generates at most count results (10 by default). If end is given, stops there. The schedule has the format \u201cINTERVAL: SLOTS, \u2026\u201d. For example: annual: Jan-15, Apr-15, Jul-15 -- Three times a year on given dates at midnight. annual: 1/15, 4/15, 7/15 -- Same as above. monthly: /1 2pm, /15 2pm -- The 1st and the 15th of each month, at 2pm. 3-months: /10, +1m /20 -- Every 3 months on the 10th of month 1, 20th of month 2. weekly: Mo 9am, Tu 9am, Fr 2pm -- Three times a week at specified times. 2-weeks: Mo, +1w Tu -- Every 2 weeks on Monday of week 1, Tuesday of week 2. daily: 07:30, 21:00 -- Twice a day at specified times. 2-day: 12am, 4pm, +1d 8am -- Three times every two days, evenly spaced. hourly: :15, :45 -- 15 minutes before and after each hour. 4-hour: :00, 1:20, 2:40 -- Three times every 4 hours, evenly spaced. 10-minute: +0s -- Every 10 minutes on the minute. INTERVAL must be either of the form N-unit where N is a number and unit is one of year , month , week , day , hour ; or one of the aliases: annual , monthly , weekly , daily , hourly , which mean 1-year , 1-month , etc. SLOTS support the following units: `Jan-15` or `1/15` -- Month and day of the month; available when INTERVAL is year-based. `/15` -- Day of the month, available when INTERVAL is month-based. `Mon`, `Mo`, `Friday` -- Day of the week (or abbreviation), when INTERVAL is week-based. 10am, 1:30pm, 15:45 -- Time of day, available for day-based or longer intervals. :45, :00 -- Minutes of the hour, available when INTERVAL is hour-based. +1d, +15d -- How many days to add to start of INTERVAL. +1w -- How many weeks to add to start of INTERVAL. +1m -- How many months to add to start of INTERVAL. The SLOTS are always relative to the INTERVAL rather than to start . Week-based intervals start on Sunday. E.g. weekly: +1d, +4d is the same as weekly: Mon, Thu , and generates times on Mondays and Thursdays regardless of start . The first generated time is determined by the unit of the INTERVAL without regard to the multiple. E.g. both \u201c2-week: Mon\u201d and \u201c3-week: Mon\u201d start on the first Monday after start , and then generate either every second or every third Monday after that. Similarly, 24-hour: :00 starts with the first top-of-the-hour after start (not with midnight), and then repeats every 24 hours. To start with the midnight after start , use daily: 0:00 . For interval units of a day or longer, if time-of-day is not specified, it defaults to midnight. The time zone of start determines the time zone of the generated times. >>> def show(dates): return [d.strftime(\"%Y-%m-%d %H:%M\") for d in dates] >>> start = datetime(2018, 9, 4, 14, 0); # 2pm on Tue, Sep 4 2018. >>> show(SCHEDULE('annual: Jan-15, Apr-15, Jul-15, Oct-15', start=start, count=4)) ['2018-10-15 00:00', '2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00'] >>> show(SCHEDULE('annual: 1/15, 4/15, 7/15', start=start, count=4)) ['2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00', '2020-01-15 00:00'] >>> show(SCHEDULE('monthly: /1 2pm, /15 5pm', start=start, count=4)) ['2018-09-15 17:00', '2018-10-01 14:00', '2018-10-15 17:00', '2018-11-01 14:00'] >>> show(SCHEDULE('3-months: /10, +1m /20', start=start, count=4)) ['2018-09-10 00:00', '2018-10-20 00:00', '2018-12-10 00:00', '2019-01-20 00:00'] >>> show(SCHEDULE('weekly: Mo 9am, Tu 9am, Fr 2pm', start=start, count=4)) ['2018-09-07 14:00', '2018-09-10 09:00', '2018-09-11 09:00', '2018-09-14 14:00'] >>> show(SCHEDULE('2-weeks: Mo, +1w Tu', start=start, count=4)) ['2018-09-11 00:00', '2018-09-17 00:00', '2018-09-25 00:00', '2018-10-01 00:00'] >>> show(SCHEDULE('daily: 07:30, 21:00', start=start, count=4)) ['2018-09-04 21:00', '2018-09-05 07:30', '2018-09-05 21:00', '2018-09-06 07:30'] >>> show(SCHEDULE('2-day: 12am, 4pm, +1d 8am', start=start, count=4)) ['2018-09-04 16:00', '2018-09-05 08:00', '2018-09-06 00:00', '2018-09-06 16:00'] >>> show(SCHEDULE('hourly: :15, :45', start=start, count=4)) ['2018-09-04 14:15', '2018-09-04 14:45', '2018-09-04 15:15', '2018-09-04 15:45'] >>> show(SCHEDULE('4-hour: :00, +1H :20, +2H :40', start=start, count=4)) ['2018-09-04 14:00', '2018-09-04 15:20', '2018-09-04 16:40', '2018-09-04 18:00'] Stats # AVEDEV (value1, value2) # AVEDEV # Calculates the average of the magnitudes of deviations of data from a dataset\u2019s mean. Note This function is not currently implemented in Grist. AVERAGE (value, *more_values) # AVERAGE # Returns the numerical average value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> AVERAGE([2, -1.0, 11]) 4.0 >>> AVERAGE([2, -1, 11, \"Hello\"]) 4.0 >>> AVERAGE([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11]) 4.0 >>> AVERAGE(False, True) Traceback (most recent call last): ... ZeroDivisionError: float division by zero AVERAGEA (value, *more_values) # AVERAGEA # Returns the numerical average value in a dataset, counting non-numerical values as 0. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. >>> AVERAGEA([2, -1.0, 11]) 4.0 >>> AVERAGEA([2, -1, 11, \"Hello\"]) 3.0 >>> AVERAGEA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 1.5 >>> AVERAGEA(False, True) 0.5 AVERAGEIF (criteria_range, criterion, average_range=None) # AVERAGEIF # Returns the average of a range depending on criteria. Note This function is not currently implemented in Grist. AVERAGEIFS (average_range, criteria_range1, criterion1, *args) # AVERAGEIFS # Returns the average of a range depending on multiple criteria. Note This function is not currently implemented in Grist. AVERAGE_WEIGHTED (pairs) # AVERAGE_WEIGHTED # Given a list of (value, weight) pairs, finds the average of the values weighted by the corresponding weights. Ignores any pairs with a non-numerical value or weight. If you have two lists, of values and weights, use the Python built-in zip() function to create a list of pairs. >>> AVERAGE_WEIGHTED(((95, .25), (90, .1), (\"X\", .5), (85, .15), (88, .2), (82, .3), (70, None))) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, \"X\", 85, 88, 82, 70], [25, 10, 50, 15, 20, 30, None])) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, False, 85, 88, 82, 70], [.25, .1, .5, .15, .2, .3, True])) 87.7 BINOMDIST (num_successes, num_trials, prob_success, cumulative) # BINOMDIST # Calculates the probability of drawing a certain number of successes (or a maximum number of successes) in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws. Note This function is not currently implemented in Grist. CONFIDENCE (alpha, standard_deviation, pop_size) # CONFIDENCE # Calculates the width of half the confidence interval for a normal distribution. Note This function is not currently implemented in Grist. CORREL (data_y, data_x) # CORREL # Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. COUNT (value, *more_values) # COUNT # Returns the count of numerical values in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> COUNT([2, -1.0, 11]) 3 >>> COUNT([2, -1, 11, \"Hello\"]) 3 >>> COUNT([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 3 >>> COUNT(False, True) 0 COUNTA (value, *more_values) # COUNTA # Returns the count of all values in a dataset, including non-numerical values. Each argument may be a value or an array. >>> COUNTA([2, -1.0, 11]) 3 >>> COUNTA([2, -1, 11, \"Hello\"]) 4 >>> COUNTA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 9 >>> COUNTA(False, True) 2 COVAR (data_y, data_x) # COVAR # Calculates the covariance of a dataset. Note This function is not currently implemented in Grist. CRITBINOM (num_trials, prob_success, target_prob) # CRITBINOM # Calculates the smallest value for which the cumulative binomial distribution is greater than or equal to a specified criteria. Note This function is not currently implemented in Grist. DEVSQ (value1, value2) # DEVSQ # Calculates the sum of squares of deviations based on a sample. Note This function is not currently implemented in Grist. EXPONDIST (x, lambda_, cumulative) # EXPONDIST # Returns the value of the exponential distribution function with a specified lambda at a specified value. Note This function is not currently implemented in Grist. FDIST (x, degrees_freedom1, degrees_freedom2) # FDIST # Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. FISHER (value) # FISHER # Returns the Fisher transformation of a specified value. Note This function is not currently implemented in Grist. FISHERINV (value) # FISHERINV # Returns the inverse Fisher transformation of a specified value. Note This function is not currently implemented in Grist. FORECAST (x, data_y, data_x) # FORECAST # Calculates the expected y-value for a specified x based on a linear regression of a dataset. Note This function is not currently implemented in Grist. F_DIST (x, degrees_freedom1, degrees_freedom2, cumulative) # F_DIST # Calculates the left-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. F_DIST_RT (x, degrees_freedom1, degrees_freedom2) # F_DIST_RT # Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. GEOMEAN (value1, value2) # GEOMEAN # Calculates the geometric mean of a dataset. Note This function is not currently implemented in Grist. HARMEAN (value1, value2) # HARMEAN # Calculates the harmonic mean of a dataset. Note This function is not currently implemented in Grist. HYPGEOMDIST (num_successes, num_draws, successes_in_pop, pop_size) # HYPGEOMDIST # Calculates the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws. Note This function is not currently implemented in Grist. INTERCEPT (data_y, data_x) # INTERCEPT # Calculates the y-value at which the line resulting from linear regression of a dataset will intersect the y-axis (x=0). Note This function is not currently implemented in Grist. KURT (value1, value2) # KURT # Calculates the kurtosis of a dataset, which describes the shape, and in particular the \u201cpeakedness\u201d of that dataset. Note This function is not currently implemented in Grist. LARGE (data, n) # LARGE # Returns the nth largest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist. LOGINV (x, mean, standard_deviation) # LOGINV # Returns the value of the inverse log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist. LOGNORMDIST (x, mean, standard_deviation) # LOGNORMDIST # Returns the value of the log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist. MAX (value, *more_values) # MAX # Returns the maximum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MAX([2, -1.5, 11.5]) 11.5 >>> MAX([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAX(True, -123) -123 >>> MAX(\"123\", -123) -123 >>> MAX(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MAXA (value, *more_values) # MAXA # Returns the maximum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MAXA([2, -1.5, 11.5]) 11.5 >>> MAXA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAXA(True, -123) 1 >>> MAXA(\"123\", -123) 0 >>> MAXA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MEDIAN (value, *more_values) # MEDIAN # Returns the median value in a numeric dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Produces an error if the arguments contain no numbers. The median is the middle number when all values are sorted. So half of the values in the dataset are less than the median, and half of the values are greater. If there is an even number of values in the dataset, returns the average of the two numbers in the middle. >>> MEDIAN(1, 2, 3, 4, 5) 3 >>> MEDIAN(3, 5, 1, 4, 2) 3 >>> MEDIAN(xrange(10)) 4.5 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1), 12.3) 12.3 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1)) Traceback (most recent call last): ... ValueError: MEDIAN requires at least one number MIN (value, *more_values) # MIN # Returns the minimum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MIN([2, -1.5, 11.5]) -1.5 >>> MIN([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MIN(True, 123) 123 >>> MIN(\"-123\", 123) 123 >>> MIN(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MINA (value, *more_values) # MINA # Returns the minimum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MINA([2, -1.5, 11.5]) -1.5 >>> MINA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MINA(True, 123) 1 >>> MINA(\"-123\", 123) 0 >>> MINA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MODE (value1, value2) # MODE # Returns the most commonly occurring value in a dataset. Note This function is not currently implemented in Grist. NEGBINOMDIST (num_failures, num_successes, prob_success) # NEGBINOMDIST # Calculates the probability of drawing a certain number of failures before a certain number of successes given a probability of success in independent trials. Note This function is not currently implemented in Grist. NORMDIST (x, mean, standard_deviation, cumulative) # NORMDIST # Returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist. NORMINV (x, mean, standard_deviation) # NORMINV # Returns the value of the inverse normal distribution function for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist. NORMSDIST (x) # NORMSDIST # Returns the value of the standard normal cumulative distribution function for a specified value. Note This function is not currently implemented in Grist. NORMSINV (x) # NORMSINV # Returns the value of the inverse standard normal distribution function for a specified value. Note This function is not currently implemented in Grist. PEARSON (data_y, data_x) # PEARSON # Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. PERCENTILE (data, percentile) # PERCENTILE # Returns the value at a given percentile of a dataset. Note This function is not currently implemented in Grist. PERCENTRANK (data, value, significant_digits=None) # PERCENTRANK # Returns the percentage rank (percentile) of a specified value in a dataset. Note This function is not currently implemented in Grist. PERCENTRANK_EXC (data, value, significant_digits=None) # PERCENTRANK_EXC # Returns the percentage rank (percentile) from 0 to 1 exclusive of a specified value in a dataset. Note This function is not currently implemented in Grist. PERCENTRANK_INC (data, value, significant_digits=None) # PERCENTRANK_INC # Returns the percentage rank (percentile) from 0 to 1 inclusive of a specified value in a dataset. Note This function is not currently implemented in Grist. PERMUT (n, k) # PERMUT # Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order. Note This function is not currently implemented in Grist. POISSON (x, mean, cumulative) # POISSON # Returns the value of the Poisson distribution function (or Poisson cumulative distribution function) for a specified value and mean. Note This function is not currently implemented in Grist. PROB (data, probabilities, low_limit, high_limit=None) # PROB # Given a set of values and corresponding probabilities, calculates the probability that a value chosen at random falls between two limits. Note This function is not currently implemented in Grist. QUARTILE (data, quartile_number) # QUARTILE # Returns a value nearest to a specified quartile of a dataset. Note This function is not currently implemented in Grist. RANK (value, data, is_ascending=None) # RANK # Returns the rank of a specified value in a dataset. Note This function is not currently implemented in Grist. RANK_AVG (value, data, is_ascending=None) # RANK_AVG # Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the average rank of the entries will be returned. Note This function is not currently implemented in Grist. RANK_EQ (value, data, is_ascending=None) # RANK_EQ # Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the top rank of the entries will be returned. Note This function is not currently implemented in Grist. RSQ (data_y, data_x) # RSQ # Calculates the square of r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. SKEW (value1, value2) # SKEW # Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean. Note This function is not currently implemented in Grist. SLOPE (data_y, data_x) # SLOPE # Calculates the slope of the line resulting from linear regression of a dataset. Note This function is not currently implemented in Grist. SMALL (data, n) # SMALL # Returns the nth smallest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist. STANDARDIZE (value, mean, standard_deviation) # STANDARDIZE # Calculates the normalized equivalent of a random variable given mean and standard deviation of the distribution. Note This function is not currently implemented in Grist. STDEV (value, *more_values) # STDEV # Calculates the standard deviation based on a sample, ignoring non-numerical values. >>> STDEV([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10], 3, 12, 15) 4.810702354423639 >>> STDEV([2, 5, 8, 13, 10], [3, 12, 15]) 4.810702354423639 >>> STDEV([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero STDEVA (value, *more_values) # STDEVA # Calculates the standard deviation based on a sample, setting text to the value 0 . >>> STDEVA([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEVA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], 1, 0, 0) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], [1, 0, 0]) 4.969550137731641 >>> STDEVA([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero STDEVP (value, *more_values) # STDEVP # Calculates the standard deviation based on an entire population, ignoring non-numerical values. >>> STDEVP([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10, True, False, \"Test\"]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10], 3, 12, 15) 4.5 >>> STDEVP([2, 5, 8, 13, 10], [3, 12, 15]) 4.5 >>> STDEVP([5]) 0.0 STDEVPA (value, *more_values) # STDEVPA # Calculates the standard deviation based on an entire population, setting text to the value 0 . >>> STDEVPA([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVPA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], 1, 0, 0) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], [1, 0, 0]) 4.648588495446763 >>> STDEVPA([5]) 0.0 STEYX (data_y, data_x) # STEYX # Calculates the standard error of the predicted y-value for each x in the regression of a dataset. Note This function is not currently implemented in Grist. TDIST (x, degrees_freedom, tails) # TDIST # Calculates the probability for Student\u2019s t-distribution with a given input (x). Note This function is not currently implemented in Grist. TINV (probability, degrees_freedom) # TINV # Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist. TRIMMEAN (data, exclude_proportion) # TRIMMEAN # Calculates the mean of a dataset excluding some proportion of data from the high and low ends of the dataset. Note This function is not currently implemented in Grist. TTEST (range1, range2, tails, type) # TTEST # Returns the probability associated with t-test. Determines whether two samples are likely to have come from the same two underlying populations that have the same mean. Note This function is not currently implemented in Grist. T_INV (probability, degrees_freedom) # T_INV # Calculates the negative inverse of the one-tailed TDIST function. Note This function is not currently implemented in Grist. T_INV_2T (probability, degrees_freedom) # T_INV_2T # Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist. VAR (value1, value2) # VAR # Calculates the variance based on a sample. Note This function is not currently implemented in Grist. VARA (value1, value2) # VARA # Calculates an estimate of variance based on a sample, setting text to the value 0 . Note This function is not currently implemented in Grist. VARP (value1, value2) # VARP # Calculates the variance based on an entire population. Note This function is not currently implemented in Grist. VARPA (value1, value2) # VARPA # Calculates the variance based on an entire population, setting text to the value 0 . Note This function is not currently implemented in Grist. WEIBULL (x, shape, scale, cumulative) # WEIBULL # Returns the value of the Weibull distribution function (or Weibull cumulative distribution function) for a specified shape and scale. Note This function is not currently implemented in Grist. ZTEST (data, value, standard_deviation) # ZTEST # Returns the two-tailed P-value of a Z-test with standard distribution. Note This function is not currently implemented in Grist. Text # CHAR (table_number) # CHAR # Convert a number into a character according to the current Unicode table. Same as unichr(number) . >>> CHAR(65) u'A' >>> CHAR(33) u'!' CLEAN (text) # CLEAN # Returns the text with the non-printable characters removed. This removes both characters with values 0 through 31, and other Unicode characters in the \u201ccontrol characters\u201d category. >>> CLEAN(CHAR(9) + \"Monthly report\" + CHAR(10)) u'Monthly report' CODE (string) # CODE # Returns the numeric Unicode map value of the first character in the string provided. Same as ord(string[0]) . >>> CODE(\"A\") 65 >>> CODE(\"!\") 33 >>> CODE(\"!A\") 33 CONCATENATE (string, *more_strings) # CONCATENATE # Joins together any number of text strings into one string. Also available under the name CONCAT . Same as the Python expression \"\".join(array_of_strings) . >>> CONCATENATE(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCATENATE(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCATENATE(\"abc\") u'abc' >>> CONCAT(0, \"abc\") u'0abc' CONCATENATE (string, *more_strings) # CONCATENATE # Joins together any number of text strings into one string. Also available under the name CONCAT . Same as the Python expression \"\".join(array_of_strings) . >>> CONCATENATE(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCATENATE(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCATENATE(\"abc\") u'abc' >>> CONCAT(0, \"abc\") u'0abc' DOLLAR (number, decimals=2) # DOLLAR # Formats a number into a formatted dollar amount, with decimals rounded to the specified place (. If decimals value is omitted, it defaults to 2. >>> DOLLAR(1234.567) '$1,234.57' >>> DOLLAR(1234.567, -2) '$1,200' >>> DOLLAR(-1234.567, -2) '($1,200)' >>> DOLLAR(-0.123, 4) '($0.1230)' >>> DOLLAR(99.888) '$99.89' >>> DOLLAR(0) '$0.00' >>> DOLLAR(10, 0) '$10' EXACT (string1, string2) # EXACT # Tests whether two strings are identical. Same as string2 == string2 . >>> EXACT(\"word\", \"word\") True >>> EXACT(\"Word\", \"word\") False >>> EXACT(\"w ord\", \"word\") False FIND (find_text, within_text, start_num=1) # FIND # Returns the position at which a string is first found within text. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> FIND(\"M\", \"Miriam McGovern\") 1 >>> FIND(\"m\", \"Miriam McGovern\") 6 >>> FIND(\"M\", \"Miriam McGovern\", 3) 8 >>> FIND(\" #\", \"Hello world # Test\") 12 >>> FIND(\"gle\", \"Google\", 1) 4 >>> FIND(\"GLE\", \"Google\", 1) Traceback (most recent call last): ... ValueError: substring not found >>> FIND(\"page\", \"homepage\") 5 >>> FIND(\"page\", \"homepage\", 6) Traceback (most recent call last): ... ValueError: substring not found FIXED (number, decimals=2, no_commas=False) # FIXED # Formats a number with a fixed number of decimal places (2 by default), and commas. If no_commas is True, then omits the commas. >>> FIXED(1234.567, 1) '1,234.6' >>> FIXED(1234.567, -1) '1,230' >>> FIXED(-1234.567, -1, True) '-1230' >>> FIXED(44.332) '44.33' >>> FIXED(3521.478, 2, False) '3,521.48' >>> FIXED(-3521.478, 1, True) '-3521.5' >>> FIXED(3521.478, 0, True) '3521' >>> FIXED(3521.478, -2, True) '3500' LEFT (string, num_chars=1) # LEFT # Returns a substring of length num_chars from the beginning of the given string. If num_chars is omitted, it is assumed to be 1. Same as string[:num_chars] . >>> LEFT(\"Sale Price\", 4) 'Sale' >>> LEFT('Swededn') 'S' >>> LEFT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid LEN (text) # LEN # Returns the number of characters in a text string. Same as len(text) . >>> LEN(\"Phoenix, AZ\") 11 >>> LEN(\"\") 0 >>> LEN(\" One \") 11 LOWER (text) # LOWER # Converts a specified string to lowercase. Same as text.lower() . >>> LOWER(\"E. E. Cummings\") 'e. e. cummings' >>> LOWER(\"Apt. 2B\") 'apt. 2b' MID (text, start_num, num_chars) # MID # Returns a segment of a string, starting at start_num. The first character in text has start_num 1. >>> MID(\"Fluid Flow\", 1, 5) 'Fluid' >>> MID(\"Fluid Flow\", 7, 20) 'Flow' >>> MID(\"Fluid Flow\", 20, 5) '' >>> MID(\"Fluid Flow\", 0, 5) Traceback (most recent call last): ... ValueError: start_num invalid PROPER (text) # PROPER # Capitalizes each word in a specified string. It converts the first letter of each word to uppercase, and all other letters to lowercase. Same as text.title() . >>> PROPER('this is a TITLE') 'This Is A Title' >>> PROPER('2-way street') '2-Way Street' >>> PROPER('76BudGet') '76Budget' REGEXEXTRACT (text, regular_expression) # REGEXEXTRACT # Extracts the first part of text that matches regular_expression. >>> REGEXEXTRACT(\"Google Doc 101\", \"[0-9]+\") '101' >>> REGEXEXTRACT(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") '826.25' If there is a parenthesized expression, it is returned instead of the whole match. >>> REGEXEXTRACT(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") 'Content' >>> REGEXEXTRACT(\"Foo\", \"Bar\") Traceback (most recent call last): ... ValueError: REGEXEXTRACT text does not match REGEXMATCH (text, regular_expression) # REGEXMATCH # Returns whether a piece of text matches a regular expression. >>> REGEXMATCH(\"Google Doc 101\", \"[0-9]+\") True >>> REGEXMATCH(\"Google Doc\", \"[0-9]+\") False >>> REGEXMATCH(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") True >>> REGEXMATCH(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") True >>> REGEXMATCH(\"Foo\", \"Bar\") False REGEXREPLACE (text, regular_expression, replacement) # REGEXREPLACE # Replaces all parts of text matching the given regular expression with replacement text. >>> REGEXREPLACE(\"Google Doc 101\", \"[0-9]+\", \"777\") 'Google Doc 777' >>> REGEXREPLACE(\"Google Doc\", \"[0-9]+\", \"777\") 'Google Doc' >>> REGEXREPLACE(\"The price is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\", \"315.75\") 'The price is $315.75' >>> REGEXREPLACE(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\", \"Word\") 'Word between brackets' >>> REGEXREPLACE(\"Foo\", \"Bar\", \"Baz\") 'Foo' REPLACE (old_text, start_num, num_chars, new_text) # REPLACE # Replaces part of a text string with a different text string. Start_num is counted from 1. >>> REPLACE(\"abcdefghijk\", 6, 5, \"*\") 'abcde*k' >>> REPLACE(\"2009\", 3, 2, \"10\") '2010' >>> REPLACE('123456', 1, 3, '@') '@456' >>> REPLACE('foo', 1, 0, 'bar') 'barfoo' >>> REPLACE('foo', 0, 1, 'bar') Traceback (most recent call last): ... ValueError: start_num invalid REPT (text, number_times) # REPT # Returns specified text repeated a number of times. Same as text * number_times . The result of the REPT function cannot be longer than 32767 characters, or it raises a ValueError. >>> REPT(\"*-\", 3) '*-*-*-' >>> REPT('-', 10) '----------' >>> REPT('-', 0) '' >>> len(REPT('---', 10000)) 30000 >>> REPT('---', 11000) Traceback (most recent call last): ... ValueError: number_times invalid >>> REPT('-', -1) Traceback (most recent call last): ... ValueError: number_times invalid RIGHT (string, num_chars=1) # RIGHT # Returns a substring of length num_chars from the end of a specified string. If num_chars is omitted, it is assumed to be 1. Same as string[-num_chars:] . >>> RIGHT(\"Sale Price\", 5) 'Price' >>> RIGHT('Stock Number') 'r' >>> RIGHT('Text', 100) 'Text' >>> RIGHT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid SEARCH (find_text, within_text, start_num=1) # SEARCH # Returns the position at which a string is first found within text, ignoring case. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> SEARCH(\"e\", \"Statements\", 6) 7 >>> SEARCH(\"margin\", \"Profit Margin\") 8 >>> SEARCH(\" \", \"Profit Margin\") 7 >>> SEARCH('\"', 'The \"boss\" is here.') 5 >>> SEARCH(\"gle\", \"Google\") 4 >>> SEARCH(\"GLE\", \"Google\") 4 SUBSTITUTE (text, old_text, new_text, instance_num=None) # SUBSTITUTE # Replaces existing text with new text in a string. It is useful when you know the substring of text to replace. Use REPLACE when you know the position of text to replace. If instance_num is given, it specifies which occurrence of old_text to replace. If omitted, all occurrences are replaced. Same as text.replace(old_text, new_text) when instance_num is omitted. >>> SUBSTITUTE(\"Sales Data\", \"Sales\", \"Cost\") 'Cost Data' >>> SUBSTITUTE(\"Quarter 1, 2008\", \"1\", \"2\", 1) 'Quarter 2, 2008' >>> SUBSTITUTE(\"Quarter 1, 2011\", \"1\", \"2\", 3) 'Quarter 1, 2012' T (value) # T # Returns value if value is text, or the empty string when value is not text. >>> T('Text') 'Text' >>> T(826) '' >>> T('826') '826' >>> T(False) '' >>> T('100 points') '100 points' >>> T(AltText('Text')) 'Text' >>> T(float('nan')) '' TEXT (number, format_type) # TEXT # Converts a number into text according to a specified format. It is not yet implemented in Grist. Note This function is not currently implemented in Grist. TRIM (text) # TRIM # Removes all spaces from text except for single spaces between words. Note that TRIM does not remove other whitespace such as tab or newline characters. >>> TRIM(\" First Quarter\\n Earnings \") 'First Quarter\\n Earnings' >>> TRIM(\"\") '' UPPER (text) # UPPER # Converts a specified string to uppercase. Same as text.lower() . >>> UPPER(\"e. e. cummings\") 'E. E. CUMMINGS' >>> UPPER(\"Apt. 2B\") 'APT. 2B' VALUE (text) # VALUE # Converts a string in accepted date, time or number formats into a number or date. >>> VALUE(\"$1,000\") 1000 >>> VALUE(\"16:48:00\") - VALUE(\"12:00:00\") datetime.timedelta(0, 17280) >>> VALUE(\"01/01/2012\") datetime.datetime(2012, 1, 1, 0, 0) >>> VALUE(\"\") 0 >>> VALUE(0) 0 >>> VALUE(\"826\") 826 >>> VALUE(\"-826.123123123\") -826.123123123 >>> VALUE(float('nan')) nan >>> VALUE(\"Invalid\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number >>> VALUE(\"13/13/13\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number","title":"Function reference"},{"location":"functions/#function-list","text":"","title":"Function List"},{"location":"functions/#full-power-of-python","text":"Grist uses Python (version 2.7) for formulas. You can use nearly all features of Python and its standard library. See Python documentation . Grist code runs in a secure sandbox, so Python code cannot access anything on your computer other than your document. This protects you when using Grist documents authored by someone else. Note that Python is case-sensitive, which applies to all functions, as well as Grist table and column names. The table below lists Grist-specific functions for accessing your document data, as well as a suite of Excel-like functions provided by Grist. Don\u2019t forget also that the entire Python\u2019s standard library is available. Category Functions Grist Record or rec , $Field or rec.Field , $group or rec.group , RecordSet , UserTable , all , lookupOne , lookupRecords Date DATE , DATEADD , DATEDIF , DATEVALUE , DATE_TO_XL , DAY , DAYS , DTIME , EDATE , EOMONTH , HOUR , ISOWEEKNUM , MINUTE , MONTH , NOW , SECOND , TODAY , WEEKDAY , WEEKNUM , XL_TO_DATE , YEAR , YEARFRAC Info CELL , ISBLANK , ISEMAIL , ISERR , ISERROR , ISLOGICAL , ISNA , ISNONTEXT , ISNUMBER , ISREF , ISTEXT , ISURL , N , NA , TYPE Logical AND , FALSE , IF , IFERROR , NOT , OR , TRUE Lookup ADDRESS , CHOOSE , COLUMN , COLUMNS , GETPIVOTDATA , HLOOKUP , HYPERLINK , INDEX , INDIRECT , LOOKUP , MATCH , OFFSET , ROW , ROWS , VLOOKUP Math ABS , ACOS , ACOSH , ARABIC , ASIN , ASINH , ATAN , ATAN2 , ATANH , CEILING , COMBIN , COS , COSH , DEGREES , EVEN , EXP , FACT , FACTDOUBLE , FLOOR , GCD , INT , LCM , LN , LOG , LOG10 , MOD , MROUND , MULTINOMIAL , ODD , PI , POWER , PRODUCT , QUOTIENT , RADIANS , RAND , RANDBETWEEN , ROMAN , ROUND , ROUNDDOWN , ROUNDUP , SERIESSUM , SIGN , SIN , SINH , SQRT , SQRTPI , SUBTOTAL , SUM , SUMIF , SUMIFS , SUMPRODUCT , SUMSQ , TAN , TANH , TRUNC Schedule SCHEDULE Stats AVEDEV , AVERAGE , AVERAGEA , AVERAGEIF , AVERAGEIFS , AVERAGE_WEIGHTED , BINOMDIST , CONFIDENCE , CORREL , COUNT , COUNTA , COVAR , CRITBINOM , DEVSQ , EXPONDIST , FDIST , FISHER , FISHERINV , FORECAST , F_DIST , F_DIST_RT , GEOMEAN , HARMEAN , HYPGEOMDIST , INTERCEPT , KURT , LARGE , LOGINV , LOGNORMDIST , MAX , MAXA , MEDIAN , MIN , MINA , MODE , NEGBINOMDIST , NORMDIST , NORMINV , NORMSDIST , NORMSINV , PEARSON , PERCENTILE , PERCENTRANK , PERCENTRANK_EXC , PERCENTRANK_INC , PERMUT , POISSON , PROB , QUARTILE , RANK , RANK_AVG , RANK_EQ , RSQ , SKEW , SLOPE , SMALL , STANDARDIZE , STDEV , STDEVA , STDEVP , STDEVPA , STEYX , TDIST , TINV , TRIMMEAN , TTEST , T_INV , T_INV_2T , VAR , VARA , VARP , VARPA , WEIBULL , ZTEST Text CHAR , CLEAN , CODE , CONCATENATE , CONCATENATE , DOLLAR , EXACT , FIND , FIXED , LEFT , LEN , LOWER , MID , PROPER , REGEXEXTRACT , REGEXMATCH , REGEXREPLACE , REPLACE , REPT , RIGHT , SEARCH , SUBSTITUTE , T , TEXT , TRIM , UPPER , VALUE","title":"Full power of Python"},{"location":"functions/#grist","text":"class Record #","title":"Grist"},{"location":"functions/#record","text":"A Record represents a record of data. It is the primary means of accessing values in formulas. A Record for a particular table has a property for each data and formula column in the table. In a formula, $field is translated to rec.field , where rec is the Record for which the formula is being evaluated. For example: def Full_Name(rec, table): return rec.First_Name + ' ' + rec.LastName def Name_Length(rec, table): return len(rec.Full_Name) $ Field or rec .Field #","title":"Record"},{"location":"functions/#field","text":"Access the field named \u201cField\u201d of the current record. E.g. $First_Name or rec.First_Name . $group #","title":"$Field"},{"location":"functions/#group","text":"In a summary view, $group is a special field containing the list of Records that are summarized by the current summary line. E.g. len($group) is the count of those records. See RecordSet for useful properties offered by the returned object. Examples: sum($group.Amount) # Sum of the Amount field in the matching records sum(r.Amount for r in $group) # Same as sum($group.Amount) sum(r.Amount for r in $group if r > 0) # Sum of only the positive amounts sum(r.Shares * r.Price for r in $group) # Sum of shares * price products class RecordSet #","title":"$group"},{"location":"functions/#recordset","text":"A RecordSet represents a collection of records, as returned by Table.lookupRecords() or $group property in summary views. A RecordSet allows iterating through the records: sum(r.Amount for r in Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\")) min(r.DueDate for r in Tasks.lookupRecords(Owner=\"Bob\")) RecordSets also provide a convenient way to access the list of values for a particular field for all the records, as record_set.Field . For example, the examples above are equivalent to: sum(Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\").Amount) min(Tasks.lookupRecords(Owner=\"Bob\").DueDate) You can get the number of records in a RecordSet using len , e.g. len($group) . class UserTable #","title":"RecordSet"},{"location":"functions/#usertable","text":"Each data table in the document is represented in the code by an instance of UserTable class. These names are always capitalized. A UserTable provides access to all the records in the table, as well as methods to look up particular records. Every table in the document is available to all formulas. UserTable. all #","title":"UserTable"},{"location":"functions/#all","text":"The list of all the records in this table. For example, this evaluates to the number of records in the table Students . len(Students.all) This evaluates to the sum of the Population field for every record in the table Countries . sum(r.Population for r in Countries.all) UserTable. lookupOne (self, **field_value_pairs) #","title":"all"},{"location":"functions/#lookupone","text":"Returns a Record matching the given field=value arguments. If multiple records match, returns one of them. If none match, returns the special empty record. For example: People.lookupOne(First_Name=\"Lewis\", Last_Name=\"Carroll\") UserTable. lookupRecords (self, **field_value_pairs) #","title":"lookupOne"},{"location":"functions/#lookuprecords","text":"Returns the Records from this table that match the given field=value arguments. If sort_by=field is given, sort the results by that field. For example: People.lookupRecords(Last_Name=\"Johnson\", sort_by=\"First_Name\") People.lookupRecords(First_Name=\"George\", Last_Name=\"Washington\") See RecordSet for useful properties offered by the returned object.","title":"lookupRecords"},{"location":"functions/#date","text":"DATE (year, month, day) #","title":"Date"},{"location":"functions/#date_1","text":"Returns the datetime.datetime object that represents a particular date. The DATE function is most useful in formulas where year, month, and day are formulas, not constants. If year is between 0 and 1899 (inclusive), adds 1900 to calculate the year. >>> DATE(108, 1, 2) datetime.date(2008, 1, 2) >>> DATE(2008, 1, 2) datetime.date(2008, 1, 2) If month is greater than 12, rolls into the following year. >>> DATE(2008, 14, 2) datetime.date(2009, 2, 2) If month is less than 1, subtracts that many months plus 1, from the first month in the year. >>> DATE(2008, -3, 2) datetime.date(2007, 9, 2) If day is greater than the number of days in the given month, rolls into the following months. >>> DATE(2008, 1, 35) datetime.date(2008, 2, 4) If day is less than 1, subtracts that many days plus 1, from the first day of the given month. >>> DATE(2008, 1, -15) datetime.date(2007, 12, 16) DATEADD (start_date, days=0, months=0, years=0, weeks=0) #","title":"DATE"},{"location":"functions/#dateadd","text":"Returns the date a given number of days, months, years, or weeks away from start_date . You may specify arguments in any order if you specify argument names. Use negative values to subtract. For example, DATEADD(date, 1) is the same as DATEADD(date, days=1) , ands adds one day to date . DATEADD(date, years=1, days=-1) adds one year minus one day. >>> DATEADD(DATE(2011, 1, 15), 1) datetime.date(2011, 1, 16) >>> DATEADD(DATE(2011, 1, 15), months=1, days=-1) datetime.date(2011, 2, 14) >>> DATEADD(DATE(2011, 1, 15), years=-2, months=1, days=3, weeks=2) datetime.date(2009, 3, 4) >>> DATEADD(DATE(1975, 4, 30), years=50, weeks=-5) datetime.date(2025, 3, 26) DATEDIF (start_date, end_date, unit) #","title":"DATEADD"},{"location":"functions/#datedif","text":"Calculates the number of days, months, or years between two dates. Unit indicates the type of information that you want returned: \u201cY\u201d: The number of complete years in the period. \u201cM\u201d: The number of complete months in the period. \u201cD\u201d: The number of days in the period. \u201cMD\u201d: The difference between the days in start_date and end_date. The months and years of the dates are ignored. \u201cYM\u201d: The difference between the months in start_date and end_date. The days and years of the dates are ignored. \u201cYD\u201d: The difference between the days of start_date and end_date. The years of the dates are ignored. Two complete years in the period (2) >>> DATEDIF(DATE(2001, 1, 1), DATE(2003, 1, 1), \"Y\") 2 440 days between June 1, 2001, and August 15, 2002 (440) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"D\") 440 75 days between June 1 and August 15, ignoring the years of the dates (75) >>> DATEDIF(DATE(2001, 6, 1), DATE(2012, 8, 15), \"YD\") 75 The difference between 1 and 15, ignoring the months and the years of the dates (14) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"MD\") 14 DATEVALUE (date_string, tz=None) #","title":"DATEDIF"},{"location":"functions/#datevalue","text":"Converts a date that is stored as text to a datetime object. >>> DATEVALUE(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"30-Jan-2008\") datetime.datetime(2008, 1, 30, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"2008-12-11\") datetime.datetime(2008, 12, 11, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"5-JUL\").replace(year=2000) datetime.datetime(2000, 7, 5, 0, 0, tzinfo=moment.tzinfo('America/New_York')) In case of ambiguity, prefer M/D/Y format. >>> DATEVALUE(\"1/2/3\") datetime.datetime(2003, 1, 2, 0, 0, tzinfo=moment.tzinfo('America/New_York')) DATE_TO_XL (date_value) #","title":"DATEVALUE"},{"location":"functions/#date_to_xl","text":"Converts a Python date or datetime object to the serial number as used by Excel, with December 30, 1899 as serial number 1. See XL_TO_DATE for more explanation. >>> DATE_TO_XL(datetime.date(2008, 1, 1)) 39448.0 >>> DATE_TO_XL(datetime.date(2012, 3, 14)) 40982.0 >>> DATE_TO_XL(datetime.datetime(2012, 3, 14, 1, 30)) 40982.0625 DAY (date) #","title":"DATE_TO_XL"},{"location":"functions/#day","text":"Returns the day of a date, as an integer ranging from 1 to 31. Same as date.day . >>> DAY(DATE(2011, 4, 15)) 15 >>> DAY(\"5/31/2012\") 31 >>> DAY(datetime.datetime(1900, 1, 1)) 1 DAYS (end_date, start_date) #","title":"DAY"},{"location":"functions/#days","text":"Returns the number of days between two dates. Same as (end_date - start_date).days . >>> DAYS(\"3/15/11\",\"2/1/11\") 42 >>> DAYS(DATE(2011, 12, 31), DATE(2011, 1, 1)) 364 >>> DAYS(\"2/1/11\", \"3/15/11\") -42 DTIME (value, tz=None) #","title":"DAYS"},{"location":"functions/#dtime","text":"Returns the value converted to a python datetime object. The value may be a string , date (interpreted as midnight on that day), time (interpreted as a time-of-day today), or an existing datetime . The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. If the input is itself a datetime with the timezone set, it is returned unchanged (no changes to its timezone). >>> DTIME(datetime.date(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.date(2017, 1, 1), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('Europe/Paris')) >>> DTIME(datetime.datetime(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC'))) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC')), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) EDATE (start_date, months) #","title":"DTIME"},{"location":"functions/#edate","text":"Returns the date that is the given number of months before or after start_date . Use EDATE to calculate maturity dates or due dates that fall on the same day of the month as the date of issue. >>> EDATE(DATE(2011, 1, 15), 1) datetime.date(2011, 2, 15) >>> EDATE(DATE(2011, 1, 15), -1) datetime.date(2010, 12, 15) >>> EDATE(DATE(2011, 1, 15), 2) datetime.date(2011, 3, 15) >>> EDATE(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 1) >>> EDATE(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 1) EOMONTH (start_date, months) #","title":"EDATE"},{"location":"functions/#eomonth","text":"Returns the date for the last day of the month that is the indicated number of months before or after start_date. Use EOMONTH to calculate maturity dates or due dates that fall on the last day of the month. >>> EOMONTH(DATE(2011, 1, 1), 1) datetime.date(2011, 2, 28) >>> EOMONTH(DATE(2011, 1, 15), -3) datetime.date(2010, 10, 31) >>> EOMONTH(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 31) >>> EOMONTH(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 31) HOUR (time) #","title":"EOMONTH"},{"location":"functions/#hour","text":"Same as time.hour . >>> HOUR(XL_TO_DATE(0.75)) 18 >>> HOUR(\"7/18/2011 7:45\") 7 >>> HOUR(\"4/21/2012\") 0 ISOWEEKNUM (date) #","title":"HOUR"},{"location":"functions/#isoweeknum","text":"Returns the ISO week number of the year for a given date. >>> ISOWEEKNUM(\"3/9/2012\") 10 >>> [ISOWEEKNUM(DATE(2000 + y, 1, 1)) for y in [0,1,2,3,4,5,6,7,8]] [52, 1, 1, 1, 1, 53, 52, 1, 1] MINUTE (time) #","title":"ISOWEEKNUM"},{"location":"functions/#minute","text":"Returns the minutes of datetime , as an integer from 0 to 59. Same as time.minute . >>> MINUTE(XL_TO_DATE(0.75)) 0 >>> MINUTE(\"7/18/2011 7:45\") 45 >>> MINUTE(\"12:59:00 PM\") 59 >>> MINUTE(datetime.time(12, 58, 59)) 58 MONTH (date) #","title":"MINUTE"},{"location":"functions/#month","text":"Returns the month of a date represented, as an integer from from 1 (January) to 12 (December). Same as date.month . >>> MONTH(DATE(2011, 4, 15)) 4 >>> MONTH(\"5/31/2012\") 5 >>> MONTH(datetime.datetime(1900, 1, 1)) 1 NOW (tz=None) #","title":"MONTH"},{"location":"functions/#now","text":"Returns the datetime object for the current time. SECOND (time) #","title":"NOW"},{"location":"functions/#second","text":"Returns the seconds of datetime , as an integer from 0 to 59. Same as time.second . >>> SECOND(XL_TO_DATE(0.75)) 0 >>> SECOND(\"7/18/2011 7:45:13\") 13 >>> SECOND(datetime.time(12, 58, 59)) 59 TODAY () #","title":"SECOND"},{"location":"functions/#today","text":"Returns the date object for the current date. WEEKDAY (date, return_type=1) #","title":"TODAY"},{"location":"functions/#weekday","text":"Returns the day of the week corresponding to a date. The day is given as an integer, ranging from 1 (Sunday) to 7 (Saturday), by default. Return_type determines the type of the returned value. 1 (default) - Returns 1 (Sunday) through 7 (Saturday). 2 - Returns 1 (Monday) through 7 (Sunday). 3 - Returns 0 (Monday) through 6 (Sunday). 11 - Returns 1 (Monday) through 7 (Sunday). 12 - Returns 1 (Tuesday) through 7 (Monday). 13 - Returns 1 (Wednesday) through 7 (Tuesday). 14 - Returns 1 (Thursday) through 7 (Wednesday). 15 - Returns 1 (Friday) through 7 (Thursday). 16 - Returns 1 (Saturday) through 7 (Friday). 17 - Returns 1 (Sunday) through 7 (Saturday). >>> WEEKDAY(DATE(2008, 2, 14)) 5 >>> WEEKDAY(DATE(2012, 3, 1)) 5 >>> WEEKDAY(DATE(2012, 3, 1), 1) 5 >>> WEEKDAY(DATE(2012, 3, 1), 2) 4 >>> WEEKDAY(\"3/1/2012\", 3) 3 WEEKNUM (date, return_type=1) #","title":"WEEKDAY"},{"location":"functions/#weeknum","text":"Returns the week number of a specific date. For example, the week containing January 1 is the first week of the year, and is numbered week 1. Return_type determines which week is considered the first week of the year. 1 (default) - Week 1 is the first week starting Sunday that contains January 1. 2 - Week 1 is the first week starting Monday that contains January 1. 11 - Week 1 is the first week starting Monday that contains January 1. 12 - Week 1 is the first week starting Tuesday that contains January 1. 13 - Week 1 is the first week starting Wednesday that contains January 1. 14 - Week 1 is the first week starting Thursday that contains January 1. 15 - Week 1 is the first week starting Friday that contains January 1. 16 - Week 1 is the first week starting Saturday that contains January 1. 17 - Week 1 is the first week starting Sunday that contains January 1. 21 - ISO 8601 Approach: Week 1 is the first week starting Monday that contains January 4. Equivalently, it is the week that contains the first Thursday of the year. >>> WEEKNUM(DATE(2012, 3, 9)) 10 >>> WEEKNUM(DATE(2012, 3, 9), 2) 11 >>> WEEKNUM('1/1/1900') 1 >>> WEEKNUM('2/1/1900') 5 XL_TO_DATE (value, tz=None) #","title":"WEEKNUM"},{"location":"functions/#xl_to_date","text":"Converts a provided Excel serial number representing a date into a datetime object. Value is interpreted as the number of days since December 30, 1899. (This corresponds to Google Sheets interpretation. Excel starts with Dec. 31, 1899 but wrongly considers 1900 to be a leap year. Excel for Mac should be configured to use 1900 date system, i.e. uncheck \u201cUse the 1904 date system\u201d option.) The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. >>> XL_TO_DATE(41100.1875) datetime.datetime(2012, 7, 10, 4, 30, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(39448) datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(40982.0625) datetime.datetime(2012, 3, 14, 1, 30, tzinfo=moment.tzinfo('America/New_York')) YEAR (date) #","title":"XL_TO_DATE"},{"location":"functions/#year","text":"Returns the year corresponding to a date as an integer. Same as date.year . >>> YEAR(DATE(2011, 4, 15)) 2011 >>> YEAR(\"5/31/2030\") 2030 >>> YEAR(datetime.datetime(1900, 1, 1)) 1900 YEARFRAC (start_date, end_date, basis=0) #","title":"YEAR"},{"location":"functions/#yearfrac","text":"Calculates the fraction of the year represented by the number of whole days between two dates. Basis is the type of day count basis to use. 0 (default) - US (NASD) 30/360 1 - Actual/actual 2 - Actual/360 3 - Actual/365 4 - European 30/360 This function is useful for financial calculations. For compatibility with Excel, it defaults to using the NASD standard calendar. For use in non-financial settings, option 1 (actual/actual) is likely the correct choice. See https://en.wikipedia.org/wiki/360-day_calendar for explanation of the US 30/360 and European 30/360 methods. See http://www.dwheeler.com/yearfrac/ for analysis of Excel\u2019s particular implementation. Fraction of the year between 1/1/2012 and 7/30/12, omitting the Basis argument. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30)) '0.58055556' Fraction between same dates, using the Actual/Actual basis argument. Because 2012 is a Leap year, it has a 366 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 1) '0.57650273' Fraction between same dates, using the Actual/365 basis argument. Uses a 365 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 3) '0.57808219'","title":"YEARFRAC"},{"location":"functions/#info","text":"CELL (info_type, reference) #","title":"Info"},{"location":"functions/#cell","text":"Returns the requested information about the specified cell. This is not implemented in Grist Note This function is not currently implemented in Grist. ISBLANK (value) #","title":"CELL"},{"location":"functions/#isblank","text":"Returns whether a value refers to an empty cell. It isn\u2019t implemented in Grist. To check for an empty string, use value == \"\" . Note This function is not currently implemented in Grist. ISEMAIL (value) #","title":"ISBLANK"},{"location":"functions/#isemail","text":"Returns whether a value is a valid email address. Note that checking email validity is not an exact science. The technical standard considers many email addresses valid that are not used in practice, and would not be considered valid by most users. Instead, we follow Google Sheets implementation, with some differences, noted below. >>> ISEMAIL(\"Abc.123@example.com\") True >>> ISEMAIL(\"Bob_O-Reilly+tag@example.com\") True >>> ISEMAIL(\"John Doe\") False >>> ISEMAIL(\"john@aol...com\") False ISERR (value) #","title":"ISEMAIL"},{"location":"functions/#iserr","text":"Checks whether a value is an error other than an invalid value. It isn\u2019t implemented in Grist. To check if a cell had an error, use try: ... value ... except Exception, err: ... do something about the error ... Note This function is not currently implemented in Grist. ISERROR (value) #","title":"ISERR"},{"location":"functions/#iserror","text":"Checks whether a value is an error or an invalid value. It currently only returns True for invalid values, False for valid ones. Errors that cause an exception have to be dealt with using try...except (see also ISERR ). >>> ISERROR(AltText(\"\")) True >>> ISERROR(AltText(\"fail\")) True >>> ISERROR(float('nan')) True >>> [ISERROR(v) for v in [0, None, \"\", \"Test\", 17.0]] [False, False, False, False, False] ISLOGICAL (value) #","title":"ISERROR"},{"location":"functions/#islogical","text":"Checks whether a value is True or False . >>> ISLOGICAL(True) True >>> ISLOGICAL(False) True >>> ISLOGICAL(0) False >>> ISLOGICAL(None) False >>> ISLOGICAL(\"Test\") False ISNA (value) #","title":"ISLOGICAL"},{"location":"functions/#isna","text":"Checks whether a value is the error #N/A . >>> ISNA(float('nan')) True >>> ISNA(0.0) False >>> ISNA('text') False >>> ISNA(float('-inf')) False ISNONTEXT (value) #","title":"ISNA"},{"location":"functions/#isnontext","text":"Checks whether a value is non-textual. >>> ISNONTEXT(\"asdf\") False >>> ISNONTEXT(\"\") False >>> ISNONTEXT(AltText(\"text\")) False >>> ISNONTEXT(17.0) True >>> ISNONTEXT(None) True >>> ISNONTEXT(datetime.date(2011, 1, 1)) True ISNUMBER (value) #","title":"ISNONTEXT"},{"location":"functions/#isnumber","text":"Checks whether a value is a number. >>> ISNUMBER(17) True >>> ISNUMBER(-123.123423) True >>> ISNUMBER(False) True >>> ISNUMBER(float('nan')) True >>> ISNUMBER(float('inf')) True >>> ISNUMBER('17') False >>> ISNUMBER(None) False >>> ISNUMBER(datetime.date(2011, 1, 1)) False ISREF (value) #","title":"ISNUMBER"},{"location":"functions/#isref","text":"Checks whether a value is a table record. For example, if a column person is of type Reference to the People table, then ISREF($person) is True. Similarly, ISREF(People.lookupOne(name=$name)) is True. For any other type of value, ISREF() would evaluate to False. >>> ISREF(17) False >>> ISREF(\"Roger\") False ISTEXT (value) #","title":"ISREF"},{"location":"functions/#istext","text":"Checks whether a value is text. >>> ISTEXT(\"asdf\") True >>> ISTEXT(\"\") True >>> ISTEXT(AltText(\"text\")) True >>> ISTEXT(17.0) False >>> ISTEXT(None) False >>> ISTEXT(datetime.date(2011, 1, 1)) False ISURL (value) #","title":"ISTEXT"},{"location":"functions/#isurl","text":"Checks whether a value is a valid URL. It does not need to be fully qualified, or to include \u201chttp://\u201d and \u201cwww\u201d. It does not follow a standard, but attempts to work similarly to ISURL in Google Sheets, and to return True for text that is likely a URL. Valid protocols include ftp, http, https, gopher, mailto, news, telnet, and aim. >>> ISURL(\"http://www.getgrist.com\") True >>> ISURL(\"https://foo.com/test_(wikipedia)#cite-1\") True >>> ISURL(\"mailto://user@example.com\") True >>> ISURL(\"http:///a\") False N (value) #","title":"ISURL"},{"location":"functions/#n","text":"Returns the value converted to a number. True/False are converted to 1/0. A date is converted to Excel-style serial number of the date. Anything else is converted to 0. >>> N(7) 7 >>> N(7.1) 7.1 >>> N(\"Even\") 0 >>> N(\"7\") 0 >>> N(True) 1 >>> N(datetime.datetime(2011, 4, 17)) 40650.0 NA () #","title":"N"},{"location":"functions/#na","text":"Returns the \u201cvalue not available\u201d error, #N/A . >>> math.isnan(NA()) True TYPE (value) #","title":"NA"},{"location":"functions/#type","text":"Returns a number associated with the type of data passed into the function. This is not implemented in Grist. Use isinstance(value, type) or type(value) . Note This function is not currently implemented in Grist.","title":"TYPE"},{"location":"functions/#logical","text":"AND (logical_expression, *logical_expressions) #","title":"Logical"},{"location":"functions/#and","text":"Returns True if all of the arguments are logically true, and False if any are false. Same as all([value1, value2, ...]) . >>> AND(1) True >>> AND(0) False >>> AND(1, 1) True >>> AND(1,2,3,4) True >>> AND(1,2,3,4,0) False FALSE () #","title":"AND"},{"location":"functions/#false","text":"Returns the logical value False . You may also use the value False directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> FALSE() False IF (logical_expression, value_if_true, value_if_false) #","title":"FALSE"},{"location":"functions/#if","text":"Returns one value if a logical expression is True and another if it is False . The equivalent Python expression is value_if_true if logical_expression else value_if_false . Since Grist supports multi-line formulas, you may also use Python blocks such as: if logical_expression: return value_if_true else: return value_if_false >>> IF(12, \"Yes\", \"No\") 'Yes' >>> IF(None, \"Yes\", \"No\") 'No' >>> IF(True, 0.85, 0.0) 0.85 >>> IF(False, 0.85, 0.0) 0.0 IFERROR (value, value_if_error=\"\") #","title":"IF"},{"location":"functions/#iferror","text":"Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent. >>> IFERROR(float('nan'), \"**NAN**\") '**NAN**' >>> IFERROR(17.17, \"**NAN**\") 17.17 >>> IFERROR(\"Text\") 'Text' >>> IFERROR(AltText(\"hello\")) '' NOT (logical_expression) #","title":"IFERROR"},{"location":"functions/#not","text":"True . Same as not logical_expression . >>> NOT(123) False >>> NOT(0) True OR (logical_expression, *logical_expressions) #","title":"NOT"},{"location":"functions/#or","text":"Returns True if any of the arguments is logically true, and false if all of the arguments are false. Same as any([value1, value2, ...]) . >>> OR(1) True >>> OR(0) False >>> OR(1, 1) True >>> OR(0, 1) True >>> OR(0, 0) False >>> OR(0,False,0.0,\"\",None) False >>> OR(0,None,3,0) True TRUE () #","title":"OR"},{"location":"functions/#true","text":"Returns the logical value True . You may also use the value True directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> TRUE() True","title":"TRUE"},{"location":"functions/#lookup","text":"ADDRESS (row, column, absolute_relative_mode, use_a1_notation, sheet) #","title":"Lookup"},{"location":"functions/#address","text":"Returns a cell reference as a string. Note This function is not currently implemented in Grist. CHOOSE (index, choice1, choice2) #","title":"ADDRESS"},{"location":"functions/#choose","text":"Returns an element from a list of choices based on index. Note This function is not currently implemented in Grist. COLUMN (cell_reference=None) #","title":"CHOOSE"},{"location":"functions/#column","text":"Returns the column number of a specified cell, with A=1 . Note This function is not currently implemented in Grist. COLUMNS (range) #","title":"COLUMN"},{"location":"functions/#columns","text":"Returns the number of columns in a specified array or range. Note This function is not currently implemented in Grist. GETPIVOTDATA (value_name, any_pivot_table_cell, original_column_1, pivot_item_1=None, *args) #","title":"COLUMNS"},{"location":"functions/#getpivotdata","text":"Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings. Note This function is not currently implemented in Grist. HLOOKUP (search_key, range, index, is_sorted) #","title":"GETPIVOTDATA"},{"location":"functions/#hlookup","text":"Horizontal lookup. Searches across the first row of a range for a key and returns the value of a specified cell in the column found. Note This function is not currently implemented in Grist. HYPERLINK (url, link_label) #","title":"HLOOKUP"},{"location":"functions/#hyperlink","text":"Creates a hyperlink inside a cell. Note This function is not currently implemented in Grist. INDEX (reference, row, column) #","title":"HYPERLINK"},{"location":"functions/#index","text":"Returns the content of a cell, specified by row and column offset. Note This function is not currently implemented in Grist. INDIRECT (cell_reference_as_string) #","title":"INDEX"},{"location":"functions/#indirect","text":"Returns a cell reference specified by a string. Note This function is not currently implemented in Grist. LOOKUP (search_key, search_range_or_search_result_array, result_range=None) #","title":"INDIRECT"},{"location":"functions/#lookup_1","text":"Looks through a row or column for a key and returns the value of the cell in a result range located in the same position as the search row or column. Note This function is not currently implemented in Grist. MATCH (search_key, range, search_type) #","title":"LOOKUP"},{"location":"functions/#match","text":"Returns the relative position of an item in a range that matches a specified value. Note This function is not currently implemented in Grist. OFFSET (cell_reference, offset_rows, offset_columns, height, width) #","title":"MATCH"},{"location":"functions/#offset","text":"Returns a range reference shifted a specified number of rows and columns from a starting cell reference. Note This function is not currently implemented in Grist. ROW (cell_reference) #","title":"OFFSET"},{"location":"functions/#row","text":"Returns the row number of a specified cell. Note This function is not currently implemented in Grist. ROWS (range) #","title":"ROW"},{"location":"functions/#rows","text":"Returns the number of rows in a specified array or range. Note This function is not currently implemented in Grist. VLOOKUP (search_key, range, index, is_sorted) #","title":"ROWS"},{"location":"functions/#vlookup","text":"Vertical lookup. Searches down the first column of a range for a key and returns the value of a specified cell in the row found. Note This function is not currently implemented in Grist.","title":"VLOOKUP"},{"location":"functions/#math","text":"ABS (value) #","title":"Math"},{"location":"functions/#abs","text":"Returns the absolute value of a number. >>> ABS(2) 2 >>> ABS(-2) 2 >>> ABS(-4) 4 ACOS (value) #","title":"ABS"},{"location":"functions/#acos","text":"Returns the inverse cosine of a value, in radians. >>> round(ACOS(-0.5), 9) 2.094395102 >>> round(ACOS(-0.5)*180/PI(), 10) 120.0 ACOSH (value) #","title":"ACOS"},{"location":"functions/#acosh","text":"Returns the inverse hyperbolic cosine of a number. >>> ACOSH(1) 0.0 >>> round(ACOSH(10), 7) 2.9932228 ARABIC (roman_numeral) #","title":"ACOSH"},{"location":"functions/#arabic","text":"Computes the value of a Roman numeral. >>> ARABIC(\"LVII\") 57 >>> ARABIC('mcmxii') 1912 ASIN (value) #","title":"ARABIC"},{"location":"functions/#asin","text":"Returns the inverse sine of a value, in radians. >>> round(ASIN(-0.5), 9) -0.523598776 >>> round(ASIN(-0.5)*180/PI(), 10) -30.0 >>> round(DEGREES(ASIN(-0.5)), 10) -30.0 ASINH (value) #","title":"ASIN"},{"location":"functions/#asinh","text":"Returns the inverse hyperbolic sine of a number. >>> round(ASINH(-2.5), 9) -1.647231146 >>> round(ASINH(10), 9) 2.99822295 ATAN (value) #","title":"ASINH"},{"location":"functions/#atan","text":"Returns the inverse tangent of a value, in radians. >>> round(ATAN(1), 9) 0.785398163 >>> ATAN(1)*180/PI() 45.0 >>> DEGREES(ATAN(1)) 45.0 ATAN2 (x, y) #","title":"ATAN"},{"location":"functions/#atan2","text":"Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair ( x , y ), in radians. >>> round(ATAN2(1, 1), 9) 0.785398163 >>> round(ATAN2(-1, -1), 9) -2.35619449 >>> ATAN2(-1, -1)*180/PI() -135.0 >>> DEGREES(ATAN2(-1, -1)) -135.0 >>> round(ATAN2(1,2), 9) 1.107148718 ATANH (value) #","title":"ATAN2"},{"location":"functions/#atanh","text":"Returns the inverse hyperbolic tangent of a number. >>> round(ATANH(0.76159416), 9) 1.00000001 >>> round(ATANH(-0.1), 9) -0.100335348 CEILING (value, factor=1) #","title":"ATANH"},{"location":"functions/#ceiling","text":"Rounds a number up to the nearest multiple of factor, or the nearest integer if the factor is omitted or 1. >>> CEILING(2.5, 1) 3 >>> CEILING(-2.5, -2) -4 >>> CEILING(-2.5, 2) -2 >>> CEILING(1.5, 0.1) 1.5 >>> CEILING(0.234, 0.01) 0.24 COMBIN (n, k) #","title":"CEILING"},{"location":"functions/#combin","text":"Returns the number of ways to choose some number of objects from a pool of a given size of objects. >>> COMBIN(8,2) 28 >>> COMBIN(4,2) 6 >>> COMBIN(10,7) 120 COS (angle) #","title":"COMBIN"},{"location":"functions/#cos","text":"Returns the cosine of an angle provided in radians. >>> round(COS(1.047), 7) 0.5001711 >>> round(COS(60*PI()/180), 10) 0.5 >>> round(COS(RADIANS(60)), 10) 0.5 COSH (value) #","title":"COS"},{"location":"functions/#cosh","text":"Returns the hyperbolic cosine of any real number. >>> round(COSH(4), 6) 27.308233 >>> round(COSH(EXP(1)), 7) 7.6101251 DEGREES (angle) #","title":"COSH"},{"location":"functions/#degrees","text":"Converts an angle value in radians to degrees. >>> round(DEGREES(ACOS(-0.5)), 10) 120.0 >>> DEGREES(PI()) 180.0 EVEN (value) #","title":"DEGREES"},{"location":"functions/#even","text":"Rounds a number up to the nearest even integer, rounding away from zero. >>> EVEN(1.5) 2 >>> EVEN(3) 4 >>> EVEN(2) 2 >>> EVEN(-1) -2 EXP (exponent) #","title":"EVEN"},{"location":"functions/#exp","text":"Returns Euler\u2019s number, e (~2.718) raised to a power. >>> round(EXP(1), 8) 2.71828183 >>> round(EXP(2), 7) 7.3890561 FACT (value) #","title":"EXP"},{"location":"functions/#fact","text":"Returns the factorial of a number. >>> FACT(5) 120 >>> FACT(1.9) 1 >>> FACT(0) 1 >>> FACT(1) 1 >>> FACT(-1) Traceback (most recent call last): ... ValueError: factorial() not defined for negative values FACTDOUBLE (value) #","title":"FACT"},{"location":"functions/#factdouble","text":"Returns the \u201cdouble factorial\u201d of a number. >>> FACTDOUBLE(6) 48 >>> FACTDOUBLE(7) 105 >>> FACTDOUBLE(3) 3 >>> FACTDOUBLE(4) 8 FLOOR (value, factor=1) #","title":"FACTDOUBLE"},{"location":"functions/#floor","text":"Rounds a number down to the nearest integer multiple of specified significance. >>> FLOOR(3.7,2) 2 >>> FLOOR(-2.5,-2) -2 >>> FLOOR(2.5,-2) Traceback (most recent call last): ... ValueError: factor argument invalid >>> FLOOR(1.58,0.1) 1.5 >>> FLOOR(0.234,0.01) 0.23 GCD (value1, *more_values) #","title":"FLOOR"},{"location":"functions/#gcd","text":"Returns the greatest common divisor of one or more integers. >>> GCD(5, 2) 1 >>> GCD(24, 36) 12 >>> GCD(7, 1) 1 >>> GCD(5, 0) 5 >>> GCD(0, 5) 5 >>> GCD(5) 5 >>> GCD(14, 42, 21) 7 INT (value) #","title":"GCD"},{"location":"functions/#int","text":"Rounds a number down to the nearest integer that is less than or equal to it. >>> INT(8.9) 8 >>> INT(-8.9) -9 >>> 19.5-INT(19.5) 0.5 LCM (value1, *more_values) #","title":"INT"},{"location":"functions/#lcm","text":"Returns the least common multiple of one or more integers. >>> LCM(5, 2) 10 >>> LCM(24, 36) 72 >>> LCM(0, 5) 0 >>> LCM(5) 5 >>> LCM(10, 100) 100 >>> LCM(12, 18) 36 >>> LCM(12, 18, 24) 72 LN (value) #","title":"LCM"},{"location":"functions/#ln","text":"Returns the the logarithm of a number, base e (Euler\u2019s number). >>> round(LN(86), 7) 4.4543473 >>> round(LN(2.7182818), 7) 1.0 >>> round(LN(EXP(3)), 10) 3.0 LOG (value, base=10) #","title":"LN"},{"location":"functions/#log","text":"Returns the the logarithm of a number given a base. >>> LOG(10) 1.0 >>> LOG(8, 2) 3.0 >>> round(LOG(86, 2.7182818), 7) 4.4543473 LOG10 (value) #","title":"LOG"},{"location":"functions/#log10","text":"Returns the the logarithm of a number, base 10. >>> round(LOG10(86), 9) 1.934498451 >>> LOG10(10) 1.0 >>> LOG10(100000) 5.0 >>> LOG10(10**5) 5.0 MOD (dividend, divisor) #","title":"LOG10"},{"location":"functions/#mod","text":"Returns the result of the modulo operator, the remainder after a division operation. >>> MOD(3, 2) 1 >>> MOD(-3, 2) 1 >>> MOD(3, -2) -1 >>> MOD(-3, -2) -1 MROUND (value, factor) #","title":"MOD"},{"location":"functions/#mround","text":"Rounds one number to the nearest integer multiple of another. >>> MROUND(10, 3) 9 >>> MROUND(-10, -3) -9 >>> round(MROUND(1.3, 0.2), 10) 1.4 >>> MROUND(5, -2) Traceback (most recent call last): ... ValueError: factor argument invalid MULTINOMIAL (value1, *more_values) #","title":"MROUND"},{"location":"functions/#multinomial","text":"Returns the factorial of the sum of values divided by the product of the values\u2019 factorials. >>> MULTINOMIAL(2, 3, 4) 1260 >>> MULTINOMIAL(3) 1 >>> MULTINOMIAL(1,2,3) 60 >>> MULTINOMIAL(0,2,4,6) 13860 ODD (value) #","title":"MULTINOMIAL"},{"location":"functions/#odd","text":"Rounds a number up to the nearest odd integer. >>> ODD(1.5) 3 >>> ODD(3) 3 >>> ODD(2) 3 >>> ODD(-1) -1 >>> ODD(-2) -3 PI () #","title":"ODD"},{"location":"functions/#pi","text":"Returns the value of Pi to 14 decimal places. >>> round(PI(), 9) 3.141592654 >>> round(PI()/2, 9) 1.570796327 >>> round(PI()*9, 8) 28.27433388 POWER (base, exponent) #","title":"PI"},{"location":"functions/#power","text":"Returns a number raised to a power. >>> POWER(5,2) 25.0 >>> round(POWER(98.6,3.2), 3) 2401077.222 >>> round(POWER(4,5.0/4), 9) 5.656854249 PRODUCT (factor1, *more_factors) #","title":"POWER"},{"location":"functions/#product","text":"Returns the result of multiplying a series of numbers together. Each argument may be a number or an array. >>> PRODUCT([5,15,30]) 2250 >>> PRODUCT([5,15,30], 2) 4500 >>> PRODUCT(5,15,[30],[2]) 4500 QUOTIENT (dividend, divisor) #","title":"PRODUCT"},{"location":"functions/#quotient","text":"Returns one number divided by another. >>> QUOTIENT(5, 2) 2 >>> QUOTIENT(4.5, 3.1) 1 >>> QUOTIENT(-10, 3) -3 RADIANS (angle) #","title":"QUOTIENT"},{"location":"functions/#radians","text":"Converts an angle value in degrees to radians. >>> round(RADIANS(270), 6) 4.712389 RAND () #","title":"RADIANS"},{"location":"functions/#rand","text":"Returns a random number between 0 inclusive and 1 exclusive. RANDBETWEEN (low, high) #","title":"RAND"},{"location":"functions/#randbetween","text":"Returns a uniformly random integer between two values, inclusive. ROMAN (number, form_unused=None) #","title":"RANDBETWEEN"},{"location":"functions/#roman","text":"Formats a number in Roman numerals. The second argument is ignored in this implementation. >>> ROMAN(499,0) 'CDXCIX' >>> ROMAN(499.2,0) 'CDXCIX' >>> ROMAN(57) 'LVII' >>> ROMAN(1912) 'MCMXII' ROUND (value, places=0) #","title":"ROMAN"},{"location":"functions/#round","text":"Rounds a number to a certain number of decimal places according to standard rules. >>> ROUND(2.15, 1) # Excel actually gives the more correct 2.2 2.1 >>> ROUND(2.149, 1) 2.1 >>> ROUND(-1.475, 2) -1.48 >>> ROUND(21.5, -1) 20.0 >>> ROUND(626.3,-3) 1000.0 >>> ROUND(1.98,-1) 0.0 >>> ROUND(-50.55,-2) -100.0 ROUNDDOWN (value, places=0) #","title":"ROUND"},{"location":"functions/#rounddown","text":"Rounds a number to a certain number of decimal places, always rounding down towards zero. >>> ROUNDDOWN(3.2, 0) 3 >>> ROUNDDOWN(76.9,0) 76 >>> ROUNDDOWN(3.14159, 3) 3.141 >>> ROUNDDOWN(-3.14159, 1) -3.1 >>> ROUNDDOWN(31415.92654, -2) 31400 ROUNDUP (value, places=0) #","title":"ROUNDDOWN"},{"location":"functions/#roundup","text":"Rounds a number to a certain number of decimal places, always rounding up away from zero. >>> ROUNDUP(3.2,0) 4 >>> ROUNDUP(76.9,0) 77 >>> ROUNDUP(3.14159, 3) 3.142 >>> ROUNDUP(-3.14159, 1) -3.2 >>> ROUNDUP(31415.92654, -2) 31500 SERIESSUM (x, n, m, a) #","title":"ROUNDUP"},{"location":"functions/#seriessum","text":"Given parameters x, n, m, and a, returns the power series sum a_1 x^n + a_2 x^(n+m) + \u2026 + a_i*x^(n+(i-1)m), where i is the number of entries in range a . >>> SERIESSUM(1,0,1,1) 1 >>> SERIESSUM(2,1,0,[1,2,3]) 12 >>> SERIESSUM(-3,1,1,[2,4,6]) -132 >>> round(SERIESSUM(PI()/4,0,2,[1,-1./FACT(2),1./FACT(4),-1./FACT(6)]), 6) 0.707103 SIGN (value) #","title":"SERIESSUM"},{"location":"functions/#sign","text":"Given an input number, returns -1 if it is negative, 1 if positive, and 0 if it is zero. >>> SIGN(10) 1 >>> SIGN(4.0-4.0) 0 >>> SIGN(-0.00001) -1 SIN (angle) #","title":"SIGN"},{"location":"functions/#sin","text":"Returns the sine of an angle provided in radians. >>> round(SIN(PI()), 10) 0.0 >>> SIN(PI()/2) 1.0 >>> round(SIN(30*PI()/180), 10) 0.5 >>> round(SIN(RADIANS(30)), 10) 0.5 SINH (value) #","title":"SIN"},{"location":"functions/#sinh","text":"Returns the hyperbolic sine of any real number. >>> round(2.868*SINH(0.0342*1.03), 7) 0.1010491 SQRT (value) #","title":"SINH"},{"location":"functions/#sqrt","text":"Returns the positive square root of a positive number. >>> SQRT(16) 4.0 >>> SQRT(-16) Traceback (most recent call last): ... ValueError: math domain error >>> SQRT(ABS(-16)) 4.0 SQRTPI (value) #","title":"SQRT"},{"location":"functions/#sqrtpi","text":"Returns the positive square root of the product of Pi and the given positive number. >>> round(SQRTPI(1), 6) 1.772454 >>> round(SQRTPI(2), 6) 2.506628 SUBTOTAL (function_code, range1, range2) #","title":"SQRTPI"},{"location":"functions/#subtotal","text":"Returns a subtotal for a vertical range of cells using a specified aggregation function. Note This function is not currently implemented in Grist. SUM (value1, *more_values) #","title":"SUBTOTAL"},{"location":"functions/#sum","text":"Returns the sum of a series of numbers. Each argument may be a number or an array. Non-numeric values are ignored. >>> SUM([5,15,30]) 50 >>> SUM([5.,15,30], 2) 52.0 >>> SUM(5,15,[30],[2]) 52 SUMIF (records, criterion, sum_range) #","title":"SUM"},{"location":"functions/#sumif","text":"Returns a conditional sum across a range. Note This function is not currently implemented in Grist. SUMIFS (sum_range, criteria_range1, criterion1, *args) #","title":"SUMIF"},{"location":"functions/#sumifs","text":"Returns the sum of a range depending on multiple criteria. Note This function is not currently implemented in Grist. SUMPRODUCT (array1, *more_arrays) #","title":"SUMIFS"},{"location":"functions/#sumproduct","text":"Multiplies corresponding components in the given arrays, and returns the sum of those products. >>> SUMPRODUCT([3,8,1,4,6,9], [2,6,5,7,7,3]) 156 >>> SUMPRODUCT([], [], []) 0 >>> SUMPRODUCT([-0.25], [-2], [-3]) -1.5 >>> SUMPRODUCT([-0.25, -0.25], [-2, -2], [-3, -3]) -3.0 SUMSQ (value1, value2) #","title":"SUMPRODUCT"},{"location":"functions/#sumsq","text":"Returns the sum of the squares of a series of numbers and/or cells. Note This function is not currently implemented in Grist. TAN (angle) #","title":"SUMSQ"},{"location":"functions/#tan","text":"Returns the tangent of an angle provided in radians. >>> round(TAN(0.785), 8) 0.99920399 >>> round(TAN(45*PI()/180), 10) 1.0 >>> round(TAN(RADIANS(45)), 10) 1.0 TANH (value) #","title":"TAN"},{"location":"functions/#tanh","text":"Returns the hyperbolic tangent of any real number. >>> round(TANH(-2), 6) -0.964028 >>> TANH(0) 0.0 >>> round(TANH(0.5), 6) 0.462117 TRUNC (value, places=0) #","title":"TANH"},{"location":"functions/#trunc","text":"Truncates a number to a certain number of significant digits by omitting less significant digits. >>> TRUNC(8.9) 8 >>> TRUNC(-8.9) -8 >>> TRUNC(0.45) 0","title":"TRUNC"},{"location":"functions/#schedule","text":"SCHEDULE (schedule, start=None, count=10, end=None) #","title":"Schedule"},{"location":"functions/#schedule_1","text":"Returns the list of datetime objects generated according to the schedule string. Starts at start , which defaults to NOW(). Generates at most count results (10 by default). If end is given, stops there. The schedule has the format \u201cINTERVAL: SLOTS, \u2026\u201d. For example: annual: Jan-15, Apr-15, Jul-15 -- Three times a year on given dates at midnight. annual: 1/15, 4/15, 7/15 -- Same as above. monthly: /1 2pm, /15 2pm -- The 1st and the 15th of each month, at 2pm. 3-months: /10, +1m /20 -- Every 3 months on the 10th of month 1, 20th of month 2. weekly: Mo 9am, Tu 9am, Fr 2pm -- Three times a week at specified times. 2-weeks: Mo, +1w Tu -- Every 2 weeks on Monday of week 1, Tuesday of week 2. daily: 07:30, 21:00 -- Twice a day at specified times. 2-day: 12am, 4pm, +1d 8am -- Three times every two days, evenly spaced. hourly: :15, :45 -- 15 minutes before and after each hour. 4-hour: :00, 1:20, 2:40 -- Three times every 4 hours, evenly spaced. 10-minute: +0s -- Every 10 minutes on the minute. INTERVAL must be either of the form N-unit where N is a number and unit is one of year , month , week , day , hour ; or one of the aliases: annual , monthly , weekly , daily , hourly , which mean 1-year , 1-month , etc. SLOTS support the following units: `Jan-15` or `1/15` -- Month and day of the month; available when INTERVAL is year-based. `/15` -- Day of the month, available when INTERVAL is month-based. `Mon`, `Mo`, `Friday` -- Day of the week (or abbreviation), when INTERVAL is week-based. 10am, 1:30pm, 15:45 -- Time of day, available for day-based or longer intervals. :45, :00 -- Minutes of the hour, available when INTERVAL is hour-based. +1d, +15d -- How many days to add to start of INTERVAL. +1w -- How many weeks to add to start of INTERVAL. +1m -- How many months to add to start of INTERVAL. The SLOTS are always relative to the INTERVAL rather than to start . Week-based intervals start on Sunday. E.g. weekly: +1d, +4d is the same as weekly: Mon, Thu , and generates times on Mondays and Thursdays regardless of start . The first generated time is determined by the unit of the INTERVAL without regard to the multiple. E.g. both \u201c2-week: Mon\u201d and \u201c3-week: Mon\u201d start on the first Monday after start , and then generate either every second or every third Monday after that. Similarly, 24-hour: :00 starts with the first top-of-the-hour after start (not with midnight), and then repeats every 24 hours. To start with the midnight after start , use daily: 0:00 . For interval units of a day or longer, if time-of-day is not specified, it defaults to midnight. The time zone of start determines the time zone of the generated times. >>> def show(dates): return [d.strftime(\"%Y-%m-%d %H:%M\") for d in dates] >>> start = datetime(2018, 9, 4, 14, 0); # 2pm on Tue, Sep 4 2018. >>> show(SCHEDULE('annual: Jan-15, Apr-15, Jul-15, Oct-15', start=start, count=4)) ['2018-10-15 00:00', '2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00'] >>> show(SCHEDULE('annual: 1/15, 4/15, 7/15', start=start, count=4)) ['2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00', '2020-01-15 00:00'] >>> show(SCHEDULE('monthly: /1 2pm, /15 5pm', start=start, count=4)) ['2018-09-15 17:00', '2018-10-01 14:00', '2018-10-15 17:00', '2018-11-01 14:00'] >>> show(SCHEDULE('3-months: /10, +1m /20', start=start, count=4)) ['2018-09-10 00:00', '2018-10-20 00:00', '2018-12-10 00:00', '2019-01-20 00:00'] >>> show(SCHEDULE('weekly: Mo 9am, Tu 9am, Fr 2pm', start=start, count=4)) ['2018-09-07 14:00', '2018-09-10 09:00', '2018-09-11 09:00', '2018-09-14 14:00'] >>> show(SCHEDULE('2-weeks: Mo, +1w Tu', start=start, count=4)) ['2018-09-11 00:00', '2018-09-17 00:00', '2018-09-25 00:00', '2018-10-01 00:00'] >>> show(SCHEDULE('daily: 07:30, 21:00', start=start, count=4)) ['2018-09-04 21:00', '2018-09-05 07:30', '2018-09-05 21:00', '2018-09-06 07:30'] >>> show(SCHEDULE('2-day: 12am, 4pm, +1d 8am', start=start, count=4)) ['2018-09-04 16:00', '2018-09-05 08:00', '2018-09-06 00:00', '2018-09-06 16:00'] >>> show(SCHEDULE('hourly: :15, :45', start=start, count=4)) ['2018-09-04 14:15', '2018-09-04 14:45', '2018-09-04 15:15', '2018-09-04 15:45'] >>> show(SCHEDULE('4-hour: :00, +1H :20, +2H :40', start=start, count=4)) ['2018-09-04 14:00', '2018-09-04 15:20', '2018-09-04 16:40', '2018-09-04 18:00']","title":"SCHEDULE"},{"location":"functions/#stats","text":"AVEDEV (value1, value2) #","title":"Stats"},{"location":"functions/#avedev","text":"Calculates the average of the magnitudes of deviations of data from a dataset\u2019s mean. Note This function is not currently implemented in Grist. AVERAGE (value, *more_values) #","title":"AVEDEV"},{"location":"functions/#average","text":"Returns the numerical average value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> AVERAGE([2, -1.0, 11]) 4.0 >>> AVERAGE([2, -1, 11, \"Hello\"]) 4.0 >>> AVERAGE([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11]) 4.0 >>> AVERAGE(False, True) Traceback (most recent call last): ... ZeroDivisionError: float division by zero AVERAGEA (value, *more_values) #","title":"AVERAGE"},{"location":"functions/#averagea","text":"Returns the numerical average value in a dataset, counting non-numerical values as 0. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. >>> AVERAGEA([2, -1.0, 11]) 4.0 >>> AVERAGEA([2, -1, 11, \"Hello\"]) 3.0 >>> AVERAGEA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 1.5 >>> AVERAGEA(False, True) 0.5 AVERAGEIF (criteria_range, criterion, average_range=None) #","title":"AVERAGEA"},{"location":"functions/#averageif","text":"Returns the average of a range depending on criteria. Note This function is not currently implemented in Grist. AVERAGEIFS (average_range, criteria_range1, criterion1, *args) #","title":"AVERAGEIF"},{"location":"functions/#averageifs","text":"Returns the average of a range depending on multiple criteria. Note This function is not currently implemented in Grist. AVERAGE_WEIGHTED (pairs) #","title":"AVERAGEIFS"},{"location":"functions/#average_weighted","text":"Given a list of (value, weight) pairs, finds the average of the values weighted by the corresponding weights. Ignores any pairs with a non-numerical value or weight. If you have two lists, of values and weights, use the Python built-in zip() function to create a list of pairs. >>> AVERAGE_WEIGHTED(((95, .25), (90, .1), (\"X\", .5), (85, .15), (88, .2), (82, .3), (70, None))) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, \"X\", 85, 88, 82, 70], [25, 10, 50, 15, 20, 30, None])) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, False, 85, 88, 82, 70], [.25, .1, .5, .15, .2, .3, True])) 87.7 BINOMDIST (num_successes, num_trials, prob_success, cumulative) #","title":"AVERAGE_WEIGHTED"},{"location":"functions/#binomdist","text":"Calculates the probability of drawing a certain number of successes (or a maximum number of successes) in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws. Note This function is not currently implemented in Grist. CONFIDENCE (alpha, standard_deviation, pop_size) #","title":"BINOMDIST"},{"location":"functions/#confidence","text":"Calculates the width of half the confidence interval for a normal distribution. Note This function is not currently implemented in Grist. CORREL (data_y, data_x) #","title":"CONFIDENCE"},{"location":"functions/#correl","text":"Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. COUNT (value, *more_values) #","title":"CORREL"},{"location":"functions/#count","text":"Returns the count of numerical values in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> COUNT([2, -1.0, 11]) 3 >>> COUNT([2, -1, 11, \"Hello\"]) 3 >>> COUNT([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 3 >>> COUNT(False, True) 0 COUNTA (value, *more_values) #","title":"COUNT"},{"location":"functions/#counta","text":"Returns the count of all values in a dataset, including non-numerical values. Each argument may be a value or an array. >>> COUNTA([2, -1.0, 11]) 3 >>> COUNTA([2, -1, 11, \"Hello\"]) 4 >>> COUNTA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 9 >>> COUNTA(False, True) 2 COVAR (data_y, data_x) #","title":"COUNTA"},{"location":"functions/#covar","text":"Calculates the covariance of a dataset. Note This function is not currently implemented in Grist. CRITBINOM (num_trials, prob_success, target_prob) #","title":"COVAR"},{"location":"functions/#critbinom","text":"Calculates the smallest value for which the cumulative binomial distribution is greater than or equal to a specified criteria. Note This function is not currently implemented in Grist. DEVSQ (value1, value2) #","title":"CRITBINOM"},{"location":"functions/#devsq","text":"Calculates the sum of squares of deviations based on a sample. Note This function is not currently implemented in Grist. EXPONDIST (x, lambda_, cumulative) #","title":"DEVSQ"},{"location":"functions/#expondist","text":"Returns the value of the exponential distribution function with a specified lambda at a specified value. Note This function is not currently implemented in Grist. FDIST (x, degrees_freedom1, degrees_freedom2) #","title":"EXPONDIST"},{"location":"functions/#fdist","text":"Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. FISHER (value) #","title":"FDIST"},{"location":"functions/#fisher","text":"Returns the Fisher transformation of a specified value. Note This function is not currently implemented in Grist. FISHERINV (value) #","title":"FISHER"},{"location":"functions/#fisherinv","text":"Returns the inverse Fisher transformation of a specified value. Note This function is not currently implemented in Grist. FORECAST (x, data_y, data_x) #","title":"FISHERINV"},{"location":"functions/#forecast","text":"Calculates the expected y-value for a specified x based on a linear regression of a dataset. Note This function is not currently implemented in Grist. F_DIST (x, degrees_freedom1, degrees_freedom2, cumulative) #","title":"FORECAST"},{"location":"functions/#f_dist","text":"Calculates the left-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. F_DIST_RT (x, degrees_freedom1, degrees_freedom2) #","title":"F_DIST"},{"location":"functions/#f_dist_rt","text":"Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. GEOMEAN (value1, value2) #","title":"F_DIST_RT"},{"location":"functions/#geomean","text":"Calculates the geometric mean of a dataset. Note This function is not currently implemented in Grist. HARMEAN (value1, value2) #","title":"GEOMEAN"},{"location":"functions/#harmean","text":"Calculates the harmonic mean of a dataset. Note This function is not currently implemented in Grist. HYPGEOMDIST (num_successes, num_draws, successes_in_pop, pop_size) #","title":"HARMEAN"},{"location":"functions/#hypgeomdist","text":"Calculates the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws. Note This function is not currently implemented in Grist. INTERCEPT (data_y, data_x) #","title":"HYPGEOMDIST"},{"location":"functions/#intercept","text":"Calculates the y-value at which the line resulting from linear regression of a dataset will intersect the y-axis (x=0). Note This function is not currently implemented in Grist. KURT (value1, value2) #","title":"INTERCEPT"},{"location":"functions/#kurt","text":"Calculates the kurtosis of a dataset, which describes the shape, and in particular the \u201cpeakedness\u201d of that dataset. Note This function is not currently implemented in Grist. LARGE (data, n) #","title":"KURT"},{"location":"functions/#large","text":"Returns the nth largest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist. LOGINV (x, mean, standard_deviation) #","title":"LARGE"},{"location":"functions/#loginv","text":"Returns the value of the inverse log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist. LOGNORMDIST (x, mean, standard_deviation) #","title":"LOGINV"},{"location":"functions/#lognormdist","text":"Returns the value of the log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist. MAX (value, *more_values) #","title":"LOGNORMDIST"},{"location":"functions/#max","text":"Returns the maximum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MAX([2, -1.5, 11.5]) 11.5 >>> MAX([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAX(True, -123) -123 >>> MAX(\"123\", -123) -123 >>> MAX(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MAXA (value, *more_values) #","title":"MAX"},{"location":"functions/#maxa","text":"Returns the maximum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MAXA([2, -1.5, 11.5]) 11.5 >>> MAXA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAXA(True, -123) 1 >>> MAXA(\"123\", -123) 0 >>> MAXA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MEDIAN (value, *more_values) #","title":"MAXA"},{"location":"functions/#median","text":"Returns the median value in a numeric dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Produces an error if the arguments contain no numbers. The median is the middle number when all values are sorted. So half of the values in the dataset are less than the median, and half of the values are greater. If there is an even number of values in the dataset, returns the average of the two numbers in the middle. >>> MEDIAN(1, 2, 3, 4, 5) 3 >>> MEDIAN(3, 5, 1, 4, 2) 3 >>> MEDIAN(xrange(10)) 4.5 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1), 12.3) 12.3 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1)) Traceback (most recent call last): ... ValueError: MEDIAN requires at least one number MIN (value, *more_values) #","title":"MEDIAN"},{"location":"functions/#min","text":"Returns the minimum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MIN([2, -1.5, 11.5]) -1.5 >>> MIN([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MIN(True, 123) 123 >>> MIN(\"-123\", 123) 123 >>> MIN(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MINA (value, *more_values) #","title":"MIN"},{"location":"functions/#mina","text":"Returns the minimum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MINA([2, -1.5, 11.5]) -1.5 >>> MINA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MINA(True, 123) 1 >>> MINA(\"-123\", 123) 0 >>> MINA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MODE (value1, value2) #","title":"MINA"},{"location":"functions/#mode","text":"Returns the most commonly occurring value in a dataset. Note This function is not currently implemented in Grist. NEGBINOMDIST (num_failures, num_successes, prob_success) #","title":"MODE"},{"location":"functions/#negbinomdist","text":"Calculates the probability of drawing a certain number of failures before a certain number of successes given a probability of success in independent trials. Note This function is not currently implemented in Grist. NORMDIST (x, mean, standard_deviation, cumulative) #","title":"NEGBINOMDIST"},{"location":"functions/#normdist","text":"Returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist. NORMINV (x, mean, standard_deviation) #","title":"NORMDIST"},{"location":"functions/#norminv","text":"Returns the value of the inverse normal distribution function for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist. NORMSDIST (x) #","title":"NORMINV"},{"location":"functions/#normsdist","text":"Returns the value of the standard normal cumulative distribution function for a specified value. Note This function is not currently implemented in Grist. NORMSINV (x) #","title":"NORMSDIST"},{"location":"functions/#normsinv","text":"Returns the value of the inverse standard normal distribution function for a specified value. Note This function is not currently implemented in Grist. PEARSON (data_y, data_x) #","title":"NORMSINV"},{"location":"functions/#pearson","text":"Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. PERCENTILE (data, percentile) #","title":"PEARSON"},{"location":"functions/#percentile","text":"Returns the value at a given percentile of a dataset. Note This function is not currently implemented in Grist. PERCENTRANK (data, value, significant_digits=None) #","title":"PERCENTILE"},{"location":"functions/#percentrank","text":"Returns the percentage rank (percentile) of a specified value in a dataset. Note This function is not currently implemented in Grist. PERCENTRANK_EXC (data, value, significant_digits=None) #","title":"PERCENTRANK"},{"location":"functions/#percentrank_exc","text":"Returns the percentage rank (percentile) from 0 to 1 exclusive of a specified value in a dataset. Note This function is not currently implemented in Grist. PERCENTRANK_INC (data, value, significant_digits=None) #","title":"PERCENTRANK_EXC"},{"location":"functions/#percentrank_inc","text":"Returns the percentage rank (percentile) from 0 to 1 inclusive of a specified value in a dataset. Note This function is not currently implemented in Grist. PERMUT (n, k) #","title":"PERCENTRANK_INC"},{"location":"functions/#permut","text":"Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order. Note This function is not currently implemented in Grist. POISSON (x, mean, cumulative) #","title":"PERMUT"},{"location":"functions/#poisson","text":"Returns the value of the Poisson distribution function (or Poisson cumulative distribution function) for a specified value and mean. Note This function is not currently implemented in Grist. PROB (data, probabilities, low_limit, high_limit=None) #","title":"POISSON"},{"location":"functions/#prob","text":"Given a set of values and corresponding probabilities, calculates the probability that a value chosen at random falls between two limits. Note This function is not currently implemented in Grist. QUARTILE (data, quartile_number) #","title":"PROB"},{"location":"functions/#quartile","text":"Returns a value nearest to a specified quartile of a dataset. Note This function is not currently implemented in Grist. RANK (value, data, is_ascending=None) #","title":"QUARTILE"},{"location":"functions/#rank","text":"Returns the rank of a specified value in a dataset. Note This function is not currently implemented in Grist. RANK_AVG (value, data, is_ascending=None) #","title":"RANK"},{"location":"functions/#rank_avg","text":"Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the average rank of the entries will be returned. Note This function is not currently implemented in Grist. RANK_EQ (value, data, is_ascending=None) #","title":"RANK_AVG"},{"location":"functions/#rank_eq","text":"Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the top rank of the entries will be returned. Note This function is not currently implemented in Grist. RSQ (data_y, data_x) #","title":"RANK_EQ"},{"location":"functions/#rsq","text":"Calculates the square of r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. SKEW (value1, value2) #","title":"RSQ"},{"location":"functions/#skew","text":"Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean. Note This function is not currently implemented in Grist. SLOPE (data_y, data_x) #","title":"SKEW"},{"location":"functions/#slope","text":"Calculates the slope of the line resulting from linear regression of a dataset. Note This function is not currently implemented in Grist. SMALL (data, n) #","title":"SLOPE"},{"location":"functions/#small","text":"Returns the nth smallest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist. STANDARDIZE (value, mean, standard_deviation) #","title":"SMALL"},{"location":"functions/#standardize","text":"Calculates the normalized equivalent of a random variable given mean and standard deviation of the distribution. Note This function is not currently implemented in Grist. STDEV (value, *more_values) #","title":"STANDARDIZE"},{"location":"functions/#stdev","text":"Calculates the standard deviation based on a sample, ignoring non-numerical values. >>> STDEV([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10], 3, 12, 15) 4.810702354423639 >>> STDEV([2, 5, 8, 13, 10], [3, 12, 15]) 4.810702354423639 >>> STDEV([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero STDEVA (value, *more_values) #","title":"STDEV"},{"location":"functions/#stdeva","text":"Calculates the standard deviation based on a sample, setting text to the value 0 . >>> STDEVA([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEVA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], 1, 0, 0) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], [1, 0, 0]) 4.969550137731641 >>> STDEVA([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero STDEVP (value, *more_values) #","title":"STDEVA"},{"location":"functions/#stdevp","text":"Calculates the standard deviation based on an entire population, ignoring non-numerical values. >>> STDEVP([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10, True, False, \"Test\"]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10], 3, 12, 15) 4.5 >>> STDEVP([2, 5, 8, 13, 10], [3, 12, 15]) 4.5 >>> STDEVP([5]) 0.0 STDEVPA (value, *more_values) #","title":"STDEVP"},{"location":"functions/#stdevpa","text":"Calculates the standard deviation based on an entire population, setting text to the value 0 . >>> STDEVPA([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVPA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], 1, 0, 0) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], [1, 0, 0]) 4.648588495446763 >>> STDEVPA([5]) 0.0 STEYX (data_y, data_x) #","title":"STDEVPA"},{"location":"functions/#steyx","text":"Calculates the standard error of the predicted y-value for each x in the regression of a dataset. Note This function is not currently implemented in Grist. TDIST (x, degrees_freedom, tails) #","title":"STEYX"},{"location":"functions/#tdist","text":"Calculates the probability for Student\u2019s t-distribution with a given input (x). Note This function is not currently implemented in Grist. TINV (probability, degrees_freedom) #","title":"TDIST"},{"location":"functions/#tinv","text":"Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist. TRIMMEAN (data, exclude_proportion) #","title":"TINV"},{"location":"functions/#trimmean","text":"Calculates the mean of a dataset excluding some proportion of data from the high and low ends of the dataset. Note This function is not currently implemented in Grist. TTEST (range1, range2, tails, type) #","title":"TRIMMEAN"},{"location":"functions/#ttest","text":"Returns the probability associated with t-test. Determines whether two samples are likely to have come from the same two underlying populations that have the same mean. Note This function is not currently implemented in Grist. T_INV (probability, degrees_freedom) #","title":"TTEST"},{"location":"functions/#t_inv","text":"Calculates the negative inverse of the one-tailed TDIST function. Note This function is not currently implemented in Grist. T_INV_2T (probability, degrees_freedom) #","title":"T_INV"},{"location":"functions/#t_inv_2t","text":"Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist. VAR (value1, value2) #","title":"T_INV_2T"},{"location":"functions/#var","text":"Calculates the variance based on a sample. Note This function is not currently implemented in Grist. VARA (value1, value2) #","title":"VAR"},{"location":"functions/#vara","text":"Calculates an estimate of variance based on a sample, setting text to the value 0 . Note This function is not currently implemented in Grist. VARP (value1, value2) #","title":"VARA"},{"location":"functions/#varp","text":"Calculates the variance based on an entire population. Note This function is not currently implemented in Grist. VARPA (value1, value2) #","title":"VARP"},{"location":"functions/#varpa","text":"Calculates the variance based on an entire population, setting text to the value 0 . Note This function is not currently implemented in Grist. WEIBULL (x, shape, scale, cumulative) #","title":"VARPA"},{"location":"functions/#weibull","text":"Returns the value of the Weibull distribution function (or Weibull cumulative distribution function) for a specified shape and scale. Note This function is not currently implemented in Grist. ZTEST (data, value, standard_deviation) #","title":"WEIBULL"},{"location":"functions/#ztest","text":"Returns the two-tailed P-value of a Z-test with standard distribution. Note This function is not currently implemented in Grist.","title":"ZTEST"},{"location":"functions/#text","text":"CHAR (table_number) #","title":"Text"},{"location":"functions/#char","text":"Convert a number into a character according to the current Unicode table. Same as unichr(number) . >>> CHAR(65) u'A' >>> CHAR(33) u'!' CLEAN (text) #","title":"CHAR"},{"location":"functions/#clean","text":"Returns the text with the non-printable characters removed. This removes both characters with values 0 through 31, and other Unicode characters in the \u201ccontrol characters\u201d category. >>> CLEAN(CHAR(9) + \"Monthly report\" + CHAR(10)) u'Monthly report' CODE (string) #","title":"CLEAN"},{"location":"functions/#code","text":"Returns the numeric Unicode map value of the first character in the string provided. Same as ord(string[0]) . >>> CODE(\"A\") 65 >>> CODE(\"!\") 33 >>> CODE(\"!A\") 33 CONCATENATE (string, *more_strings) #","title":"CODE"},{"location":"functions/#concatenate","text":"Joins together any number of text strings into one string. Also available under the name CONCAT . Same as the Python expression \"\".join(array_of_strings) . >>> CONCATENATE(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCATENATE(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCATENATE(\"abc\") u'abc' >>> CONCAT(0, \"abc\") u'0abc' CONCATENATE (string, *more_strings) #","title":"CONCATENATE"},{"location":"functions/#concatenate_1","text":"Joins together any number of text strings into one string. Also available under the name CONCAT . Same as the Python expression \"\".join(array_of_strings) . >>> CONCATENATE(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCATENATE(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCATENATE(\"abc\") u'abc' >>> CONCAT(0, \"abc\") u'0abc' DOLLAR (number, decimals=2) #","title":"CONCATENATE"},{"location":"functions/#dollar","text":"Formats a number into a formatted dollar amount, with decimals rounded to the specified place (. If decimals value is omitted, it defaults to 2. >>> DOLLAR(1234.567) '$1,234.57' >>> DOLLAR(1234.567, -2) '$1,200' >>> DOLLAR(-1234.567, -2) '($1,200)' >>> DOLLAR(-0.123, 4) '($0.1230)' >>> DOLLAR(99.888) '$99.89' >>> DOLLAR(0) '$0.00' >>> DOLLAR(10, 0) '$10' EXACT (string1, string2) #","title":"DOLLAR"},{"location":"functions/#exact","text":"Tests whether two strings are identical. Same as string2 == string2 . >>> EXACT(\"word\", \"word\") True >>> EXACT(\"Word\", \"word\") False >>> EXACT(\"w ord\", \"word\") False FIND (find_text, within_text, start_num=1) #","title":"EXACT"},{"location":"functions/#find","text":"Returns the position at which a string is first found within text. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> FIND(\"M\", \"Miriam McGovern\") 1 >>> FIND(\"m\", \"Miriam McGovern\") 6 >>> FIND(\"M\", \"Miriam McGovern\", 3) 8 >>> FIND(\" #\", \"Hello world # Test\") 12 >>> FIND(\"gle\", \"Google\", 1) 4 >>> FIND(\"GLE\", \"Google\", 1) Traceback (most recent call last): ... ValueError: substring not found >>> FIND(\"page\", \"homepage\") 5 >>> FIND(\"page\", \"homepage\", 6) Traceback (most recent call last): ... ValueError: substring not found FIXED (number, decimals=2, no_commas=False) #","title":"FIND"},{"location":"functions/#fixed","text":"Formats a number with a fixed number of decimal places (2 by default), and commas. If no_commas is True, then omits the commas. >>> FIXED(1234.567, 1) '1,234.6' >>> FIXED(1234.567, -1) '1,230' >>> FIXED(-1234.567, -1, True) '-1230' >>> FIXED(44.332) '44.33' >>> FIXED(3521.478, 2, False) '3,521.48' >>> FIXED(-3521.478, 1, True) '-3521.5' >>> FIXED(3521.478, 0, True) '3521' >>> FIXED(3521.478, -2, True) '3500' LEFT (string, num_chars=1) #","title":"FIXED"},{"location":"functions/#left","text":"Returns a substring of length num_chars from the beginning of the given string. If num_chars is omitted, it is assumed to be 1. Same as string[:num_chars] . >>> LEFT(\"Sale Price\", 4) 'Sale' >>> LEFT('Swededn') 'S' >>> LEFT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid LEN (text) #","title":"LEFT"},{"location":"functions/#len","text":"Returns the number of characters in a text string. Same as len(text) . >>> LEN(\"Phoenix, AZ\") 11 >>> LEN(\"\") 0 >>> LEN(\" One \") 11 LOWER (text) #","title":"LEN"},{"location":"functions/#lower","text":"Converts a specified string to lowercase. Same as text.lower() . >>> LOWER(\"E. E. Cummings\") 'e. e. cummings' >>> LOWER(\"Apt. 2B\") 'apt. 2b' MID (text, start_num, num_chars) #","title":"LOWER"},{"location":"functions/#mid","text":"Returns a segment of a string, starting at start_num. The first character in text has start_num 1. >>> MID(\"Fluid Flow\", 1, 5) 'Fluid' >>> MID(\"Fluid Flow\", 7, 20) 'Flow' >>> MID(\"Fluid Flow\", 20, 5) '' >>> MID(\"Fluid Flow\", 0, 5) Traceback (most recent call last): ... ValueError: start_num invalid PROPER (text) #","title":"MID"},{"location":"functions/#proper","text":"Capitalizes each word in a specified string. It converts the first letter of each word to uppercase, and all other letters to lowercase. Same as text.title() . >>> PROPER('this is a TITLE') 'This Is A Title' >>> PROPER('2-way street') '2-Way Street' >>> PROPER('76BudGet') '76Budget' REGEXEXTRACT (text, regular_expression) #","title":"PROPER"},{"location":"functions/#regexextract","text":"Extracts the first part of text that matches regular_expression. >>> REGEXEXTRACT(\"Google Doc 101\", \"[0-9]+\") '101' >>> REGEXEXTRACT(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") '826.25' If there is a parenthesized expression, it is returned instead of the whole match. >>> REGEXEXTRACT(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") 'Content' >>> REGEXEXTRACT(\"Foo\", \"Bar\") Traceback (most recent call last): ... ValueError: REGEXEXTRACT text does not match REGEXMATCH (text, regular_expression) #","title":"REGEXEXTRACT"},{"location":"functions/#regexmatch","text":"Returns whether a piece of text matches a regular expression. >>> REGEXMATCH(\"Google Doc 101\", \"[0-9]+\") True >>> REGEXMATCH(\"Google Doc\", \"[0-9]+\") False >>> REGEXMATCH(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") True >>> REGEXMATCH(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") True >>> REGEXMATCH(\"Foo\", \"Bar\") False REGEXREPLACE (text, regular_expression, replacement) #","title":"REGEXMATCH"},{"location":"functions/#regexreplace","text":"Replaces all parts of text matching the given regular expression with replacement text. >>> REGEXREPLACE(\"Google Doc 101\", \"[0-9]+\", \"777\") 'Google Doc 777' >>> REGEXREPLACE(\"Google Doc\", \"[0-9]+\", \"777\") 'Google Doc' >>> REGEXREPLACE(\"The price is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\", \"315.75\") 'The price is $315.75' >>> REGEXREPLACE(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\", \"Word\") 'Word between brackets' >>> REGEXREPLACE(\"Foo\", \"Bar\", \"Baz\") 'Foo' REPLACE (old_text, start_num, num_chars, new_text) #","title":"REGEXREPLACE"},{"location":"functions/#replace","text":"Replaces part of a text string with a different text string. Start_num is counted from 1. >>> REPLACE(\"abcdefghijk\", 6, 5, \"*\") 'abcde*k' >>> REPLACE(\"2009\", 3, 2, \"10\") '2010' >>> REPLACE('123456', 1, 3, '@') '@456' >>> REPLACE('foo', 1, 0, 'bar') 'barfoo' >>> REPLACE('foo', 0, 1, 'bar') Traceback (most recent call last): ... ValueError: start_num invalid REPT (text, number_times) #","title":"REPLACE"},{"location":"functions/#rept","text":"Returns specified text repeated a number of times. Same as text * number_times . The result of the REPT function cannot be longer than 32767 characters, or it raises a ValueError. >>> REPT(\"*-\", 3) '*-*-*-' >>> REPT('-', 10) '----------' >>> REPT('-', 0) '' >>> len(REPT('---', 10000)) 30000 >>> REPT('---', 11000) Traceback (most recent call last): ... ValueError: number_times invalid >>> REPT('-', -1) Traceback (most recent call last): ... ValueError: number_times invalid RIGHT (string, num_chars=1) #","title":"REPT"},{"location":"functions/#right","text":"Returns a substring of length num_chars from the end of a specified string. If num_chars is omitted, it is assumed to be 1. Same as string[-num_chars:] . >>> RIGHT(\"Sale Price\", 5) 'Price' >>> RIGHT('Stock Number') 'r' >>> RIGHT('Text', 100) 'Text' >>> RIGHT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid SEARCH (find_text, within_text, start_num=1) #","title":"RIGHT"},{"location":"functions/#search","text":"Returns the position at which a string is first found within text, ignoring case. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> SEARCH(\"e\", \"Statements\", 6) 7 >>> SEARCH(\"margin\", \"Profit Margin\") 8 >>> SEARCH(\" \", \"Profit Margin\") 7 >>> SEARCH('\"', 'The \"boss\" is here.') 5 >>> SEARCH(\"gle\", \"Google\") 4 >>> SEARCH(\"GLE\", \"Google\") 4 SUBSTITUTE (text, old_text, new_text, instance_num=None) #","title":"SEARCH"},{"location":"functions/#substitute","text":"Replaces existing text with new text in a string. It is useful when you know the substring of text to replace. Use REPLACE when you know the position of text to replace. If instance_num is given, it specifies which occurrence of old_text to replace. If omitted, all occurrences are replaced. Same as text.replace(old_text, new_text) when instance_num is omitted. >>> SUBSTITUTE(\"Sales Data\", \"Sales\", \"Cost\") 'Cost Data' >>> SUBSTITUTE(\"Quarter 1, 2008\", \"1\", \"2\", 1) 'Quarter 2, 2008' >>> SUBSTITUTE(\"Quarter 1, 2011\", \"1\", \"2\", 3) 'Quarter 1, 2012' T (value) #","title":"SUBSTITUTE"},{"location":"functions/#t","text":"Returns value if value is text, or the empty string when value is not text. >>> T('Text') 'Text' >>> T(826) '' >>> T('826') '826' >>> T(False) '' >>> T('100 points') '100 points' >>> T(AltText('Text')) 'Text' >>> T(float('nan')) '' TEXT (number, format_type) #","title":"T"},{"location":"functions/#text_1","text":"Converts a number into text according to a specified format. It is not yet implemented in Grist. Note This function is not currently implemented in Grist. TRIM (text) #","title":"TEXT"},{"location":"functions/#trim","text":"Removes all spaces from text except for single spaces between words. Note that TRIM does not remove other whitespace such as tab or newline characters. >>> TRIM(\" First Quarter\\n Earnings \") 'First Quarter\\n Earnings' >>> TRIM(\"\") '' UPPER (text) #","title":"TRIM"},{"location":"functions/#upper","text":"Converts a specified string to uppercase. Same as text.lower() . >>> UPPER(\"e. e. cummings\") 'E. E. CUMMINGS' >>> UPPER(\"Apt. 2B\") 'APT. 2B' VALUE (text) #","title":"UPPER"},{"location":"functions/#value","text":"Converts a string in accepted date, time or number formats into a number or date. >>> VALUE(\"$1,000\") 1000 >>> VALUE(\"16:48:00\") - VALUE(\"12:00:00\") datetime.timedelta(0, 17280) >>> VALUE(\"01/01/2012\") datetime.datetime(2012, 1, 1, 0, 0) >>> VALUE(\"\") 0 >>> VALUE(0) 0 >>> VALUE(\"826\") 826 >>> VALUE(\"-826.123123123\") -826.123123123 >>> VALUE(float('nan')) nan >>> VALUE(\"Invalid\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number >>> VALUE(\"13/13/13\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number","title":"VALUE"},{"location":"imports/","text":"Importing and exporting data # Importing # You can import a file to start a new Grist document , or to add tables to an existing document. Imports of Excel, CSV, and tab-separated files are supported, while other formats (such as HTML, PDF, and plain text) may or may not work depending on their structure. In all cases, when you import a file, Grist makes guesses about the structure of the file. Tables to import # For Excel files, Grist imports each sheet as a new table, using the sheet name to name the tables. For CSV and other delimited formats, one file becomes one table, and the filename determines the table name. Column names # For both Excel and delimited files, Grist tries to guess whether or not headers are included and which line they occur in. If Grist guesses there are no headers, it will name columns as \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, etc. You can always rename columns after an import, using the Field side pane. Note Currently, if Grist thinks your first line of data is headers, you both need to rename columns to something sensible, and you lose the first row of data. At the moment, you can only recover it by inserting a new row and populating it manually; or by adding headers to the original data and re-importing. Column types # Grist guesses the data types for columns based on the data in the column. It automatically tries to parse numbers, dates, and boolean fields to detect the most suitable type to set the column to. Grist tries to be lossless: e.g. if it marks a column as numeric, any text values in it (such as \u201cN/A\u201d) will remain in the imported table, but shown highlighted because of the type mismatch. If Grist guesses a type wrong, you can convert it, as well as do arbitrary transformations to the imported values, by changing the type in the Field side pane.","title":"Importing new tables"},{"location":"imports/#importing-and-exporting-data","text":"","title":"Importing and exporting data"},{"location":"imports/#importing","text":"You can import a file to start a new Grist document , or to add tables to an existing document. Imports of Excel, CSV, and tab-separated files are supported, while other formats (such as HTML, PDF, and plain text) may or may not work depending on their structure. In all cases, when you import a file, Grist makes guesses about the structure of the file.","title":"Importing"},{"location":"imports/#tables-to-import","text":"For Excel files, Grist imports each sheet as a new table, using the sheet name to name the tables. For CSV and other delimited formats, one file becomes one table, and the filename determines the table name.","title":"Tables to import"},{"location":"imports/#column-names","text":"For both Excel and delimited files, Grist tries to guess whether or not headers are included and which line they occur in. If Grist guesses there are no headers, it will name columns as \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, etc. You can always rename columns after an import, using the Field side pane. Note Currently, if Grist thinks your first line of data is headers, you both need to rename columns to something sensible, and you lose the first row of data. At the moment, you can only recover it by inserting a new row and populating it manually; or by adding headers to the original data and re-importing.","title":"Column names"},{"location":"imports/#column-types","text":"Grist guesses the data types for columns based on the data in the column. It automatically tries to parse numbers, dates, and boolean fields to detect the most suitable type to set the column to. Grist tries to be lossless: e.g. if it marks a column as numeric, any text values in it (such as \u201cN/A\u201d) will remain in the imported table, but shown highlighted because of the type mismatch. If Grist guesses a type wrong, you can convert it, as well as do arbitrary transformations to the imported values, by changing the type in the Field side pane.","title":"Column types"},{"location":"intro/","text":"Launching Grist # Launch Grist by clicking the application icon or double-clicking a .grist file. The Start page lists Grist documents in your local Documents directory. If you\u2019re launching Grist for the first time, it will likely be empty. Let\u2019s change that by creating a new document . Or, open a .csv or .xls file directly in Grist, by right-clicking the file in Finder and selecting Open With > Grist . This will import the file into a new Grist file in your Documents directory. Creating a new document # Once you\u2019ve launched Grist, create and import new documents from the Start page. Create document loads a new, empty document in the current window. Upload document creates a new document from the selected a .csv or .xls file. Opening an existing document # Click on a listed document to open it in the same window. To get back to the list open a new window from the File menu (Command-N) or click on the Grist logo in the top-left corner. Tip To open the underlying file in Finder, right-click the filename in the window title and select the file\u2019s containing folder.","title":"What is Grist"},{"location":"intro/#launching-grist","text":"Launch Grist by clicking the application icon or double-clicking a .grist file. The Start page lists Grist documents in your local Documents directory. If you\u2019re launching Grist for the first time, it will likely be empty. Let\u2019s change that by creating a new document . Or, open a .csv or .xls file directly in Grist, by right-clicking the file in Finder and selecting Open With > Grist . This will import the file into a new Grist file in your Documents directory.","title":"Launching Grist"},{"location":"intro/#creating-a-new-document","text":"Once you\u2019ve launched Grist, create and import new documents from the Start page. Create document loads a new, empty document in the current window. Upload document creates a new document from the selected a .csv or .xls file.","title":"Creating a new document"},{"location":"intro/#opening-an-existing-document","text":"Click on a listed document to open it in the same window. To get back to the list open a new window from the File menu (Command-N) or click on the Grist logo in the top-left corner. Tip To open the underlying file in Finder, right-click the filename in the window title and select the file\u2019s containing folder.","title":"Opening an existing document"},{"location":"investment-research/","text":"How to analyze and visualize data # Grist offers several powerful ways to analyze and visualize data. In this tutorial, you\u2019ll learn how to: Create summary tables Create and configure charts Link charts dynamically To explain these features, we\u2019ll use the sample document \u201cInvestment Research\u201d 1 . The dataset comes from Kaggle , and includes companies and investments in them up to 2013. Let\u2019s take a look at the sample document and then we\u2019ll talk about how to build it so that you can apply these tools to your own data. Exploring the example # Open the document \u201cInvestment Research\u201d, found in Examples & Templates in your Grist home page. The first thing you\u2019ll see is \u201cOverview\u201d. This page contains two charts next to two tables. The top left has a pie chart showing the distribution of investments by category. The table next to it has the same data in tabular form. Below the pie chart is a bar graph showing the total investments raised by year. It is also accompanied by the same data in the table next to it in tabular form. All these charts and tables are examples of \u201csummary tables\u201d, which we\u2019ll describe below. The next page, \u201cBreakdowns\u201d, also contains two tables and two charts, but these are linked dynamically and offer much more detailed insight into the data. On the top left is a table showing the total funding by year (the same table as we saw on the previous page). This table serves as a driver for the chart next to it. When you click on a year in the table, the pie chart updates to show the distribution of investments in that year. Similarly, the bottom table shows investments by category. When you click on any category, the line chart next to it updates to show the history of funding in that category over the years. Note how powerful this is, and how much insight you can gain from it. For instance, you can see that Advertising category has been getting a lot of investment in NY since 2007, but was overtaken by E-commerce in 2012-2013, while the Fashion category had a major spike in 2011. On the next page, \u201cCompany Details\u201d, we get to see the granular data of this dataset. Here, we see a list of companies and the categories they fall into. Each company shown has a link pointing to its listing on the Crunchbase website. Selecting a company shows a card with its details, as well as a list of all the investments it has received. This is where we begin to see the power of Grist. The original dataset is a flat spreadsheet of companies, and an even bigger spreadsheet of investments. By displaying the data graphically, the data comes alive, making it powerful and useful. How can I make this? # With Grist, presenting your own data in graphic form is a few easy steps away. Let\u2019s begin with the first step. Get the data # Let\u2019s import the raw data. We\u2019ll import two CSV files, where each will become its own table. To follow along, save the files from crunchbase_companies_ny.csv and crunchbase_investments_ny.csv to your computer first. Then, create a Grist document by importing the first file from the home page. Next, import the second table using the \u201cAdd New\u201d button and the \u201cImport from file\u201d option. In the import dialog box, finish by clicking \u201cImport\u201d on the bottom left. The tables you\u2019ve imported will be named \u201ccrunchbase_companies_ny\u201d and \u201ccrunchbase_investments_ny\u201d. Use the page menu (click on the three dots beside the file name) to rename them \u201cCompanies\u201d and \u201cInvestments\u201d. Make it relational # The power of Grist comes from giving structure to the data. Take a look at the \u201cInvestments\u201d table. Sort by the first column and you\u2019ll notice how much repetition there is: each row contains the complete company info, which both duplicates the data in the \u201cCompanies\u201d table, and is repeated multiple times when multiple investments apply to the same company. 2 The reality is that each investment applies to a single company. Each investment row only needs to contain a reference to a company, and the data specific to that investment. To make it so, find a column that identifies a company uniquely. In this dataset, the first column, \u201ccompany_permalink\u201d, does it best 3 . Click on the arrow in the column header and click \u201cColumn Options\u201d. Click on the arrow beside \u201cText\u201d under the \u201cColumn Type\u201d in the dialogue box at the right of the screen and select \u201cReference\u201d from the list. Grist will automatically suggest to make it a \u201cReference\u201d to the \u201cCompanies\u201d table, and to show the referenced company\u2019s \u201cpermalink\u201d. Click \u201cApply\u201d to save this conversion. Let\u2019s also rename this column to \u201cCompany\u201d. In Grist, duplicated data is not needed and we recommend removing it. Using the Option-Minus (Mac) or Alt-Minus (Windows) shortcut is a quick way to remove columns. After removing the columns from \u201ccompany_name\u201d to \u201ccompany_city\u201d, here\u2019s what\u2019s left: The data you\u2019ve deleted isn\u2019t lost since it was duplicated \u2013 it\u2019s still available in the \u201cCompanies\u201d table and can be used in an Investment record\u2019s formula as, e.g. $Company.company_xxx . In fact, there\u2019s a handy way to create this kind of formula. Let\u2019s create one that we\u2019ll need later. Click the header of the \u201cCompany\u201d column. In the right panel\u2019s Column tab, you\u2019ll see a section \u2018Add Referenced Columns\u2019. Click \u2018Add Column\u2019 to add the \u201ccategory_code\u201d column. A new column will be added to the table with the formula $Company.category_code . For each investment, it shows the \u201ccategory_code\u201d of the company linked to its investment record. Summarize # The powerful feature you\u2019ve been waiting for is the one that summarizes the data. To utilize this, let\u2019s add a table showing companies grouped by \u201ccategory_code\u201d. In the \u201cAdd New\u201d menu at the top left, select \u201cAdd Page\u201d. In the dialog box, select \u201cTable\u201d and \u201cCompanies\u201d, and then use the summation symbol (\u2211) to select the \u201cGroup By\u201d columns \u2013 i.e. the columns by which to summarize. If you don\u2019t select any columns, you\u2019ll just get a single row of totals. If you summarize by \u201ccategory_code\u201d, you\u2019ll get a row for each distinct value of \u201ccategory_code\u201d. Let\u2019s do that and then click \u201cAdd Page\u201d. This is similar to Excel\u2019s pivot tables. Each row represents the group of records from the source table (\u201cCompanies\u201d) that have a particular value of \u201ccategory_code\u201d. There is a reminder of that in the table\u2019s title (\u201cCOMPANIES [by category_code]\u201d). Such summary tables can (and should!) use formulas. The columns you choose when creating the table are the identifiers of the groups. All other columns are formula columns \u2013 they are calculated. In formulas, the group of source records summarized by one row is available as the value \u201c$group\u201d. For example, you\u2019ll see a column created automatically called \u201ccount\u201d. If you hit \u201cEnter\u201d, you\u2019ll see the formula in it \u2013 len($group) \u2013 that\u2019s just the number of records in that group of records, i.e. the number of companies in that category. For numeric columns in the source table, summary tables automatically get a same-named numeric column containing a sum, with a formula such as SUM($group.funding_total_usd) . Side note for Python fans. $group is a special Python object. It\u2019s an iterable collection of records. Using an attribute like $group.A is a shorthand for the list of values in the A column of all the records in the group, i.e. it\u2019s roughly equivalent to [r.A for r in $group] . Sometimes, adding the values doesn\u2019t make sense. E.g. the sum of \u201cfounded_year\u201d is meaningless. It\u2019s best to delete this and any other column we don\u2019t need, which leaves us with the \u201cfunding_total_usd\u201d column. Let\u2019s add a second summary table. Select \u201cAdd New\u201d again to \u201cAdd Widget to Page\u201d. To get a summary by year, select the \u201cInvestments\u201d table under \u201cSelect Data\u201d, and again use its sum symbol (\u2211) to select the column by which to summarize: \u201cfunded_year\u201d and then click \u201cAdd to page\u201d. This produces a second summary table that shows a record for each year, with each representing a group of \u201cInvestments\u201d rows for that year. The most useful column is \u201craised_amount_usd\u201d, adding all investments made in that year. Let\u2019s delete the unneeded columns. You\u2019ll notice pink values in \u201craised_amount_usd\u201d. That\u2019s because Grist guesses the column type to be an integer.The pink sums are instances where the numbers exceed Javascript\u2019s ability to handle large integers. To correct for this, the type of the column should be switched to \u201cNumeric\u201d (which trades off precision for the ability to represent very large and very small numbers). Change the type to \u201cNumeric\u201c under \u201cColumn options\u201d. Chart, graph, plot # You can make a chart of any data. To this page, we want to add a graphic version of each summary table. Select the \u201cAdd New\u201d button again, pick \u201cAdd Widget to Page\u201d, select \u201cChart\u201d as the widget, and the same table (Companies) and summary column (category_code) as before. Then click \u201cAdd to Page\u201d. For a chart, you\u2019ll always follow up by customizing it. Open the right panel, and select \u201cChart\u201d tab / \u201cWidget\u201d subtab. The \u201cVisible Series\u201d section in the subtab determines which columns of data will be used as the series in the chart. Their exact meaning depends on the chart type. For this first chart, under \u201cChart type, select \u201cPie Chart\u201d. To construct this chart, two \u201cVisible Series\u201d are required: the first one will be used as labels, and the second as values. Since we want the chart to show \u201ccategory_code\u201d as labels, and \u201cfunding_total_usd\u201d as values, those should be the two items in the \u201cVisible Series\u201d list in the configuration panel. As you move your mouse over the items in that list, use the \u201ceye\u201d icon that shows up to remove the other series from the list. Alternatively, you can select the unneeded columns using checkboxes, and click \u201cHide Series\u201d. Now add a chart showing a trend by year. Add another \u201cWidget to page\u201d, select \u201cChart\u201d under \u201cWidget\u201d, select \u201cInvestments\u201d under \u201cSelect Data\u201d, click summation (\u2211) to group by \u201cfunded_year\u201d, and click \u201cAdd to Page\u201d. To customize this chart, stick with the chart type \u201cBar Chart\u201d. The list of \u201cVisible Series\u201d in the \u201cChart\u201d tab should now be adjusted: the first series will be the values for the X (horizontal) axis, and second (and possible additional) series will be the values for the Y (vertical) axis. So hide the unwanted columns (\u201ccount\u201d), and leave the \u201cfunded_year\u201d first (to serve as the X-values), and \u201craised_amount_usd\u201d second (to serve as the Y-values). Drag and drop the sections into a configuration you\u2019d like to see for a dashboard, and then rename the page \u201cOverview\u201d. You can rearrange the sections on the screen into a configuration you\u2019d like to see for a dashboard. Move your mouse to the top left of each section until you see a \u201cdrag handle\u201d icon. Use that icon to drag each section into the desired spot relative to other sections. Once you\u2019re finished, rename the page \u201cOverview\u201d. Dynamic charts # If you\u2019ve read our other tutorials on linking data, this will come naturally. Charts are simply a different way to show data, and they can be linked in the same way as tables. For our example, we\u2019ll add a new page with a summary table: select widget \u201cTable\u201d, data \u201cInvestments\u201d, group by \u201cfunded_year\u201d, click \u201cAdd to Page\u201d. Let\u2019s rename this new page \u201cBreakdowns\u201d. Next, add a widget to this page, selecting widget \u201cChart\u201d, data \u201cInvestments\u201d. For \u201cGroup By\u201d, we pick two columns: \u201cCompany_category_code\u201d and \u201cfunded_year\u201d. Note: This is why we added the \u201cCompany_category_code\u201d column earlier. We can only group investment records by the category code if we have this code for each investment. The \u201cSelect By\u201d dropdown at the bottom left of the dialog box lists widgets already on the screen that can control the selection of data in the chart we are adding. In \u201cSelect By\u201d, choose \u201cINVESTMENTS [by funded_year]\u201d, and click \u201cAdd to Page\u201d. Note: If you need to make changes to a widget you already added, such as change its type, \u201cGroup By\u201d, or \u201cSelect By\u201d settings, you can always do so from the \u201cData\u201d subtab in the widget settings, using the \u201cEdit Data Selection\u201d button. We want to be able to select a year, and then show a pie chart for that year that displays the total for each category code. The \u201cSelect By\u201d option we chose ensures that only the selected year\u2019s data is used. All that\u2019s left is to change the chart type to \u201cPie Chart\u201d, and set \u201cVisible Series\u201d to only \u201ccategory_code\u201d and \u201craised_amount_usd\u201d and hide the other data series. Note: Graphs need more screenspace, so our small screenshots will look better if we close the side-panes by clicking on the opener icons ( , ). Let\u2019s also sort the table by \u201cfunded_year\u201d. As far as sorting, the highlighted button above the table reminds you that sort settings aren\u2019t saved automatically. Click the green button and select \u201cSave\u201d to do that. What\u2019s the result? We can click through the years (or use arrow keys), and see the distribution by category change. Note: If clicking through the years does not affect the chart, the chart must not be linked. You can check and correct it by using the \u201cthree dots\u201d menu on top right of the chart, clicking \u201cData selection\u201d, and ensuring that \u201cSelect By\u201d dropdown is showing \u201cINVESTMENTS [by funded_year]\u201d. To complete the example, we will add two more sections to this \u201cBreakdowns\u201d page. One will be a table listing company categories, and linked to it will be a chart showing amount of investment into that category over the years. To add the table of categories, use \u201cAdd Widget to Page\u201d, and select \u201cTable\u201d widget, \u201cInvestments\u201d data, grouped by \u201cCompany_category_code\u201d. The \u201cfunded_year\u201d column in the resulting table is meaningless, and should be deleted. For the last step, we add another chart. We need to remember to group by both \u201cCompany_category_code\u201d \u201cfunded_year\u201d, and to set a suitable \u201cSelect By\u201d widget for it. Since there are two tables on this page, you have a choice of which one will drive the data in this chart. In this case, pick the widget that we just added: \u201cINVESTMENTS [by Company_category_code]\u201d. As in the previous section, we configure the chart by selecting \u201cChart Type\u201d as \u201cBar Chart\u201d, and in the \u201cVisible Series\u201d list, leaving the series \u201cfunded_year\u201d (the x-axis) and \u201craised_amount_usd\u201d (the y-axis), and hiding the rest. We can now click through the categories, and see the history of investment into each one. Next steps # If you\u2019re unfamiliar with how we created the \u201cCompany Details\u201d page that\u2019s present in the example, visit one of these earlier tutorials to learn how: \u2018How to build a Lightweight CRM\u2019, or \u2018Managing your Business in Grist\u2019. That\u2019s it! Now go analyze some data! The sample document includes only the \u201ccompanies\u201d and \u201cinvestments\u201d data, and includes only New York companies to keep it smaller and faster. \u21a9 Such duplication is commonly seen in spreadsheets. Data in this form is called \u201cdenormalized\u201d. \u21a9 If you don\u2019t have a single identifying column, you can construct one with a formula. \u21a9","title":"Analyze and visualize"},{"location":"investment-research/#exploring-the-example","text":"Open the document \u201cInvestment Research\u201d, found in Examples & Templates in your Grist home page. The first thing you\u2019ll see is \u201cOverview\u201d. This page contains two charts next to two tables. The top left has a pie chart showing the distribution of investments by category. The table next to it has the same data in tabular form. Below the pie chart is a bar graph showing the total investments raised by year. It is also accompanied by the same data in the table next to it in tabular form. All these charts and tables are examples of \u201csummary tables\u201d, which we\u2019ll describe below. The next page, \u201cBreakdowns\u201d, also contains two tables and two charts, but these are linked dynamically and offer much more detailed insight into the data. On the top left is a table showing the total funding by year (the same table as we saw on the previous page). This table serves as a driver for the chart next to it. When you click on a year in the table, the pie chart updates to show the distribution of investments in that year. Similarly, the bottom table shows investments by category. When you click on any category, the line chart next to it updates to show the history of funding in that category over the years. Note how powerful this is, and how much insight you can gain from it. For instance, you can see that Advertising category has been getting a lot of investment in NY since 2007, but was overtaken by E-commerce in 2012-2013, while the Fashion category had a major spike in 2011. On the next page, \u201cCompany Details\u201d, we get to see the granular data of this dataset. Here, we see a list of companies and the categories they fall into. Each company shown has a link pointing to its listing on the Crunchbase website. Selecting a company shows a card with its details, as well as a list of all the investments it has received. This is where we begin to see the power of Grist. The original dataset is a flat spreadsheet of companies, and an even bigger spreadsheet of investments. By displaying the data graphically, the data comes alive, making it powerful and useful.","title":"Exploring the example"},{"location":"investment-research/#get-the-data","text":"Let\u2019s import the raw data. We\u2019ll import two CSV files, where each will become its own table. To follow along, save the files from crunchbase_companies_ny.csv and crunchbase_investments_ny.csv to your computer first. Then, create a Grist document by importing the first file from the home page. Next, import the second table using the \u201cAdd New\u201d button and the \u201cImport from file\u201d option. In the import dialog box, finish by clicking \u201cImport\u201d on the bottom left. The tables you\u2019ve imported will be named \u201ccrunchbase_companies_ny\u201d and \u201ccrunchbase_investments_ny\u201d. Use the page menu (click on the three dots beside the file name) to rename them \u201cCompanies\u201d and \u201cInvestments\u201d.","title":"Get the data"},{"location":"investment-research/#make-it-relational","text":"The power of Grist comes from giving structure to the data. Take a look at the \u201cInvestments\u201d table. Sort by the first column and you\u2019ll notice how much repetition there is: each row contains the complete company info, which both duplicates the data in the \u201cCompanies\u201d table, and is repeated multiple times when multiple investments apply to the same company. 2 The reality is that each investment applies to a single company. Each investment row only needs to contain a reference to a company, and the data specific to that investment. To make it so, find a column that identifies a company uniquely. In this dataset, the first column, \u201ccompany_permalink\u201d, does it best 3 . Click on the arrow in the column header and click \u201cColumn Options\u201d. Click on the arrow beside \u201cText\u201d under the \u201cColumn Type\u201d in the dialogue box at the right of the screen and select \u201cReference\u201d from the list. Grist will automatically suggest to make it a \u201cReference\u201d to the \u201cCompanies\u201d table, and to show the referenced company\u2019s \u201cpermalink\u201d. Click \u201cApply\u201d to save this conversion. Let\u2019s also rename this column to \u201cCompany\u201d. In Grist, duplicated data is not needed and we recommend removing it. Using the Option-Minus (Mac) or Alt-Minus (Windows) shortcut is a quick way to remove columns. After removing the columns from \u201ccompany_name\u201d to \u201ccompany_city\u201d, here\u2019s what\u2019s left: The data you\u2019ve deleted isn\u2019t lost since it was duplicated \u2013 it\u2019s still available in the \u201cCompanies\u201d table and can be used in an Investment record\u2019s formula as, e.g. $Company.company_xxx . In fact, there\u2019s a handy way to create this kind of formula. Let\u2019s create one that we\u2019ll need later. Click the header of the \u201cCompany\u201d column. In the right panel\u2019s Column tab, you\u2019ll see a section \u2018Add Referenced Columns\u2019. Click \u2018Add Column\u2019 to add the \u201ccategory_code\u201d column. A new column will be added to the table with the formula $Company.category_code . For each investment, it shows the \u201ccategory_code\u201d of the company linked to its investment record.","title":"Make it relational"},{"location":"investment-research/#summarize","text":"The powerful feature you\u2019ve been waiting for is the one that summarizes the data. To utilize this, let\u2019s add a table showing companies grouped by \u201ccategory_code\u201d. In the \u201cAdd New\u201d menu at the top left, select \u201cAdd Page\u201d. In the dialog box, select \u201cTable\u201d and \u201cCompanies\u201d, and then use the summation symbol (\u2211) to select the \u201cGroup By\u201d columns \u2013 i.e. the columns by which to summarize. If you don\u2019t select any columns, you\u2019ll just get a single row of totals. If you summarize by \u201ccategory_code\u201d, you\u2019ll get a row for each distinct value of \u201ccategory_code\u201d. Let\u2019s do that and then click \u201cAdd Page\u201d. This is similar to Excel\u2019s pivot tables. Each row represents the group of records from the source table (\u201cCompanies\u201d) that have a particular value of \u201ccategory_code\u201d. There is a reminder of that in the table\u2019s title (\u201cCOMPANIES [by category_code]\u201d). Such summary tables can (and should!) use formulas. The columns you choose when creating the table are the identifiers of the groups. All other columns are formula columns \u2013 they are calculated. In formulas, the group of source records summarized by one row is available as the value \u201c$group\u201d. For example, you\u2019ll see a column created automatically called \u201ccount\u201d. If you hit \u201cEnter\u201d, you\u2019ll see the formula in it \u2013 len($group) \u2013 that\u2019s just the number of records in that group of records, i.e. the number of companies in that category. For numeric columns in the source table, summary tables automatically get a same-named numeric column containing a sum, with a formula such as SUM($group.funding_total_usd) . Side note for Python fans. $group is a special Python object. It\u2019s an iterable collection of records. Using an attribute like $group.A is a shorthand for the list of values in the A column of all the records in the group, i.e. it\u2019s roughly equivalent to [r.A for r in $group] . Sometimes, adding the values doesn\u2019t make sense. E.g. the sum of \u201cfounded_year\u201d is meaningless. It\u2019s best to delete this and any other column we don\u2019t need, which leaves us with the \u201cfunding_total_usd\u201d column. Let\u2019s add a second summary table. Select \u201cAdd New\u201d again to \u201cAdd Widget to Page\u201d. To get a summary by year, select the \u201cInvestments\u201d table under \u201cSelect Data\u201d, and again use its sum symbol (\u2211) to select the column by which to summarize: \u201cfunded_year\u201d and then click \u201cAdd to page\u201d. This produces a second summary table that shows a record for each year, with each representing a group of \u201cInvestments\u201d rows for that year. The most useful column is \u201craised_amount_usd\u201d, adding all investments made in that year. Let\u2019s delete the unneeded columns. You\u2019ll notice pink values in \u201craised_amount_usd\u201d. That\u2019s because Grist guesses the column type to be an integer.The pink sums are instances where the numbers exceed Javascript\u2019s ability to handle large integers. To correct for this, the type of the column should be switched to \u201cNumeric\u201d (which trades off precision for the ability to represent very large and very small numbers). Change the type to \u201cNumeric\u201c under \u201cColumn options\u201d.","title":"Summarize"},{"location":"investment-research/#chart-graph-plot","text":"You can make a chart of any data. To this page, we want to add a graphic version of each summary table. Select the \u201cAdd New\u201d button again, pick \u201cAdd Widget to Page\u201d, select \u201cChart\u201d as the widget, and the same table (Companies) and summary column (category_code) as before. Then click \u201cAdd to Page\u201d. For a chart, you\u2019ll always follow up by customizing it. Open the right panel, and select \u201cChart\u201d tab / \u201cWidget\u201d subtab. The \u201cVisible Series\u201d section in the subtab determines which columns of data will be used as the series in the chart. Their exact meaning depends on the chart type. For this first chart, under \u201cChart type, select \u201cPie Chart\u201d. To construct this chart, two \u201cVisible Series\u201d are required: the first one will be used as labels, and the second as values. Since we want the chart to show \u201ccategory_code\u201d as labels, and \u201cfunding_total_usd\u201d as values, those should be the two items in the \u201cVisible Series\u201d list in the configuration panel. As you move your mouse over the items in that list, use the \u201ceye\u201d icon that shows up to remove the other series from the list. Alternatively, you can select the unneeded columns using checkboxes, and click \u201cHide Series\u201d. Now add a chart showing a trend by year. Add another \u201cWidget to page\u201d, select \u201cChart\u201d under \u201cWidget\u201d, select \u201cInvestments\u201d under \u201cSelect Data\u201d, click summation (\u2211) to group by \u201cfunded_year\u201d, and click \u201cAdd to Page\u201d. To customize this chart, stick with the chart type \u201cBar Chart\u201d. The list of \u201cVisible Series\u201d in the \u201cChart\u201d tab should now be adjusted: the first series will be the values for the X (horizontal) axis, and second (and possible additional) series will be the values for the Y (vertical) axis. So hide the unwanted columns (\u201ccount\u201d), and leave the \u201cfunded_year\u201d first (to serve as the X-values), and \u201craised_amount_usd\u201d second (to serve as the Y-values). Drag and drop the sections into a configuration you\u2019d like to see for a dashboard, and then rename the page \u201cOverview\u201d. You can rearrange the sections on the screen into a configuration you\u2019d like to see for a dashboard. Move your mouse to the top left of each section until you see a \u201cdrag handle\u201d icon. Use that icon to drag each section into the desired spot relative to other sections. Once you\u2019re finished, rename the page \u201cOverview\u201d.","title":"Chart, graph, plot"},{"location":"investment-research/#dynamic-charts","text":"If you\u2019ve read our other tutorials on linking data, this will come naturally. Charts are simply a different way to show data, and they can be linked in the same way as tables. For our example, we\u2019ll add a new page with a summary table: select widget \u201cTable\u201d, data \u201cInvestments\u201d, group by \u201cfunded_year\u201d, click \u201cAdd to Page\u201d. Let\u2019s rename this new page \u201cBreakdowns\u201d. Next, add a widget to this page, selecting widget \u201cChart\u201d, data \u201cInvestments\u201d. For \u201cGroup By\u201d, we pick two columns: \u201cCompany_category_code\u201d and \u201cfunded_year\u201d. Note: This is why we added the \u201cCompany_category_code\u201d column earlier. We can only group investment records by the category code if we have this code for each investment. The \u201cSelect By\u201d dropdown at the bottom left of the dialog box lists widgets already on the screen that can control the selection of data in the chart we are adding. In \u201cSelect By\u201d, choose \u201cINVESTMENTS [by funded_year]\u201d, and click \u201cAdd to Page\u201d. Note: If you need to make changes to a widget you already added, such as change its type, \u201cGroup By\u201d, or \u201cSelect By\u201d settings, you can always do so from the \u201cData\u201d subtab in the widget settings, using the \u201cEdit Data Selection\u201d button. We want to be able to select a year, and then show a pie chart for that year that displays the total for each category code. The \u201cSelect By\u201d option we chose ensures that only the selected year\u2019s data is used. All that\u2019s left is to change the chart type to \u201cPie Chart\u201d, and set \u201cVisible Series\u201d to only \u201ccategory_code\u201d and \u201craised_amount_usd\u201d and hide the other data series. Note: Graphs need more screenspace, so our small screenshots will look better if we close the side-panes by clicking on the opener icons ( , ). Let\u2019s also sort the table by \u201cfunded_year\u201d. As far as sorting, the highlighted button above the table reminds you that sort settings aren\u2019t saved automatically. Click the green button and select \u201cSave\u201d to do that. What\u2019s the result? We can click through the years (or use arrow keys), and see the distribution by category change. Note: If clicking through the years does not affect the chart, the chart must not be linked. You can check and correct it by using the \u201cthree dots\u201d menu on top right of the chart, clicking \u201cData selection\u201d, and ensuring that \u201cSelect By\u201d dropdown is showing \u201cINVESTMENTS [by funded_year]\u201d. To complete the example, we will add two more sections to this \u201cBreakdowns\u201d page. One will be a table listing company categories, and linked to it will be a chart showing amount of investment into that category over the years. To add the table of categories, use \u201cAdd Widget to Page\u201d, and select \u201cTable\u201d widget, \u201cInvestments\u201d data, grouped by \u201cCompany_category_code\u201d. The \u201cfunded_year\u201d column in the resulting table is meaningless, and should be deleted. For the last step, we add another chart. We need to remember to group by both \u201cCompany_category_code\u201d \u201cfunded_year\u201d, and to set a suitable \u201cSelect By\u201d widget for it. Since there are two tables on this page, you have a choice of which one will drive the data in this chart. In this case, pick the widget that we just added: \u201cINVESTMENTS [by Company_category_code]\u201d. As in the previous section, we configure the chart by selecting \u201cChart Type\u201d as \u201cBar Chart\u201d, and in the \u201cVisible Series\u201d list, leaving the series \u201cfunded_year\u201d (the x-axis) and \u201craised_amount_usd\u201d (the y-axis), and hiding the rest. We can now click through the categories, and see the history of investment into each one.","title":"Dynamic charts"},{"location":"investment-research/#next-steps","text":"If you\u2019re unfamiliar with how we created the \u201cCompany Details\u201d page that\u2019s present in the example, visit one of these earlier tutorials to learn how: \u2018How to build a Lightweight CRM\u2019, or \u2018Managing your Business in Grist\u2019. That\u2019s it! Now go analyze some data! The sample document includes only the \u201ccompanies\u201d and \u201cinvestments\u201d data, and includes only New York companies to keep it smaller and faster. \u21a9 Such duplication is commonly seen in spreadsheets. Data in this form is called \u201cdenormalized\u201d. \u21a9 If you don\u2019t have a single identifying column, you can construct one with a formula. \u21a9","title":"Next steps"},{"location":"lookup-formulas/","text":"Documentation to be written.","title":"Lookup formulas"},{"location":"publish/","text":"Documentation to be written.","title":"Publishing and embedding data"},{"location":"releases/","text":"Grist Releases # 0.13 (2018-06-12) # Added importing from Google Drive and from SQL databases. Added importing JSON files. Improved import dialog with support for parse options, transforms, and previews. Better action history, supporting history of one table, and showing diffs of actions. Suggest auto-completions when editing formulas. Added step-through search. Support easier renames of columns, by clicking the selected column header. Allow deleting documents from the document list. Fixed CSV exports to respect table sort order. Improved application start-up time. 0.12 (2017-12-12) # Document List now automatically displays new files Enhance imports to allow changing import options (work-in-progress) Usability improvements to Date Editor widget Added a sample document for a Capitalization table Fixed multiple bugs: Defaulting to first tab when opening a document Column filters causing errors on column deletion Inconsistencies with datatype conversions 0.11 (2017-09-21) # Formula editor now displays detailed formula errors, making them easier to fix. Automatically create backups when migrating a document to a new version. Improved Undo to jump to the location of the undone action. Streamline the behavior of \u201c+\u201d button for adding a new column. Improve the layout of charts and include labels for the data series. Field options are now by default shared across views. Fixed multiple bugs: Pasting of Dates and References within a column. Table renaming sometimes causing an error or incorrect record positioning. Undo in cases of column transforms and column renaming. Error when editing an Image cell. 0.10 (2017-07-25) # Grist now supports software updates New display options for cells: Word-wrapping for Text columns Max decimals for Numeric columns New switch widget for Toggle columns Added border and zebra-striping options to GridView Improved Help with better navigation and new articles Improved data formatting when copying to clipboard 0.9 (2017-04-17) # Improve copy-paste and CSV export for Reference columns. Improve scrolling performance. Improve type conversions, including Text-to-Reference auto-suggest. Fix summary tables to use correct display options for group-by columns. Fix a bug with column renaming. Fix a rare bug with unexpected connection loss. 0.8 (2017-03-10) # First release with Windows support! Improve handling of complex actions in action log and when using Undo. Assist formula editing by displaying columns\u2019 Python identifiers. Handle import logic within the secure sandbox (no more need for system Python). Several bug fixes. 0.7 (2017-01-06) # Automatically adjust formulas when renaming columns and tables. Allow adding display columns when showing a reference to another table. Include column headers in CSV exports, and fix dates and references. Improve adding records to linked sections. Several bug fixes. 0.6 (2016-11-22) # Added support for many Excel functions. Implemented shortcuts to insert current date/time. Made improvements to summary tables. Made views remember cursor and scroll position. Improvements to copy-paste functionality. Fixed sorting by reference columns. Added a few sample documents. 0.5 (2016-10-27) # Implemented many common spreadsheet functions. Added ability to delete multiple selected rows. Added ability to clear multiple selected cells. Added menu item listing recent documents. Improved the look of application top bar. Improved summary tables. 0.4 (2016-08-12) # Switched to use NaCL-based sandbox. Implemented collection of usage and performance metrics. Improved Table deletion. Implemented Shift-Click to select multiple cells. Redesigned the document list. Several bug fixes. 0.3 (2016-07-21) # Improves Mac application menu and title. Fixes several issues with Excel imports Fixes bug with updating values in Reference columns. 0.2 (2016-06-30) # Attempting our second release! 0.1 (2016-06-30) # First release of Grist","title":"Release notes"},{"location":"releases/#grist-releases","text":"","title":"Grist Releases"},{"location":"releases/#013-2018-06-12","text":"Added importing from Google Drive and from SQL databases. Added importing JSON files. Improved import dialog with support for parse options, transforms, and previews. Better action history, supporting history of one table, and showing diffs of actions. Suggest auto-completions when editing formulas. Added step-through search. Support easier renames of columns, by clicking the selected column header. Allow deleting documents from the document list. Fixed CSV exports to respect table sort order. Improved application start-up time.","title":"0.13 (2018-06-12)"},{"location":"releases/#012-2017-12-12","text":"Document List now automatically displays new files Enhance imports to allow changing import options (work-in-progress) Usability improvements to Date Editor widget Added a sample document for a Capitalization table Fixed multiple bugs: Defaulting to first tab when opening a document Column filters causing errors on column deletion Inconsistencies with datatype conversions","title":"0.12 (2017-12-12)"},{"location":"releases/#011-2017-09-21","text":"Formula editor now displays detailed formula errors, making them easier to fix. Automatically create backups when migrating a document to a new version. Improved Undo to jump to the location of the undone action. Streamline the behavior of \u201c+\u201d button for adding a new column. Improve the layout of charts and include labels for the data series. Field options are now by default shared across views. Fixed multiple bugs: Pasting of Dates and References within a column. Table renaming sometimes causing an error or incorrect record positioning. Undo in cases of column transforms and column renaming. Error when editing an Image cell.","title":"0.11 (2017-09-21)"},{"location":"releases/#010-2017-07-25","text":"Grist now supports software updates New display options for cells: Word-wrapping for Text columns Max decimals for Numeric columns New switch widget for Toggle columns Added border and zebra-striping options to GridView Improved Help with better navigation and new articles Improved data formatting when copying to clipboard","title":"0.10 (2017-07-25)"},{"location":"releases/#09-2017-04-17","text":"Improve copy-paste and CSV export for Reference columns. Improve scrolling performance. Improve type conversions, including Text-to-Reference auto-suggest. Fix summary tables to use correct display options for group-by columns. Fix a bug with column renaming. Fix a rare bug with unexpected connection loss.","title":"0.9 (2017-04-17)"},{"location":"releases/#08-2017-03-10","text":"First release with Windows support! Improve handling of complex actions in action log and when using Undo. Assist formula editing by displaying columns\u2019 Python identifiers. Handle import logic within the secure sandbox (no more need for system Python). Several bug fixes.","title":"0.8 (2017-03-10)"},{"location":"releases/#07-2017-01-06","text":"Automatically adjust formulas when renaming columns and tables. Allow adding display columns when showing a reference to another table. Include column headers in CSV exports, and fix dates and references. Improve adding records to linked sections. Several bug fixes.","title":"0.7 (2017-01-06)"},{"location":"releases/#06-2016-11-22","text":"Added support for many Excel functions. Implemented shortcuts to insert current date/time. Made improvements to summary tables. Made views remember cursor and scroll position. Improvements to copy-paste functionality. Fixed sorting by reference columns. Added a few sample documents.","title":"0.6 (2016-11-22)"},{"location":"releases/#05-2016-10-27","text":"Implemented many common spreadsheet functions. Added ability to delete multiple selected rows. Added ability to clear multiple selected cells. Added menu item listing recent documents. Improved the look of application top bar. Improved summary tables.","title":"0.5 (2016-10-27)"},{"location":"releases/#04-2016-08-12","text":"Switched to use NaCL-based sandbox. Implemented collection of usage and performance metrics. Improved Table deletion. Implemented Shift-Click to select multiple cells. Redesigned the document list. Several bug fixes.","title":"0.4 (2016-08-12)"},{"location":"releases/#03-2016-07-21","text":"Improves Mac application menu and title. Fixes several issues with Excel imports Fixes bug with updating values in Reference columns.","title":"0.3 (2016-07-21)"},{"location":"releases/#02-2016-06-30","text":"Attempting our second release!","title":"0.2 (2016-06-30)"},{"location":"releases/#01-2016-06-30","text":"First release of Grist","title":"0.1 (2016-06-30)"},{"location":"rest-api/","text":"Documentation to be written.","title":"REST API to Grist instance"},{"location":"summary-change/","text":"Documentation to be written.","title":"Changing group-by fields"},{"location":"summary-create/","text":"Documentation to be written.","title":"Creating summary views"},{"location":"summary-formulas/","text":"Documentation to be written.","title":"Summary formulas"},{"location":"table-add/","text":"Documentation to be written.","title":"Adding tables"},{"location":"table-mod/","text":"Documentation to be written.","title":"Renaming and deleting tables"},{"location":"view-layouts/","text":"Documentation to be written.","title":"Creating view layouts"},{"location":"view-linking/","text":"Documentation to be written.","title":"Linking views"},{"location":"view-types/","text":"Configuring views # A feature that separates Grist from traditional spreadsheets is that you can create multiple views of the same data, and you can display multiple data sets on one screen. This allows you to create complex dashboards and custom applications tailored to your needs. Types of views # Similar to spreadsheet software, Grist lets you see your data in a grid of rows and columns. But you can also choose to view your data as a list of records or as detailed records, one at a time. Additional view types are listed below. Consider your e-mail, for example. Your inbox lets you view your e-mails as a list, and opening an e-mail displays its full details. It\u2019s a much nicer interface than having all your e-mails in a grid in a spreadsheets, isn\u2019t it? Grist lets you do the same thing with your other data as well. Type Description Grid ( Default ) Standard grid or spreadsheet view type. List List of records. Layout of each record is fully customizable. Detail Full-page detail record, with next / previous navigation. Layout of each record is fully customizable. Summary A summary (aka pivot) table of an existing table. Chart A chart view type that can be configured to display line charts, bar charts, and many more. Creating a new view # To create a new view for an existing table, click Add section . In the added blank section you can select the table and the view type. Organizing view sections # To rearrange view sections on the screen you can simply grab a section by its top-left corner and drag it to the desired location. Drop zones are signified by a dotted blue line.","title":"Types of views"},{"location":"view-types/#configuring-views","text":"A feature that separates Grist from traditional spreadsheets is that you can create multiple views of the same data, and you can display multiple data sets on one screen. This allows you to create complex dashboards and custom applications tailored to your needs.","title":"Configuring views"},{"location":"view-types/#types-of-views","text":"Similar to spreadsheet software, Grist lets you see your data in a grid of rows and columns. But you can also choose to view your data as a list of records or as detailed records, one at a time. Additional view types are listed below. Consider your e-mail, for example. Your inbox lets you view your e-mails as a list, and opening an e-mail displays its full details. It\u2019s a much nicer interface than having all your e-mails in a grid in a spreadsheets, isn\u2019t it? Grist lets you do the same thing with your other data as well. Type Description Grid ( Default ) Standard grid or spreadsheet view type. List List of records. Layout of each record is fully customizable. Detail Full-page detail record, with next / previous navigation. Layout of each record is fully customizable. Summary A summary (aka pivot) table of an existing table. Chart A chart view type that can be configured to display line charts, bar charts, and many more.","title":"Types of views"},{"location":"view-types/#creating-a-new-view","text":"To create a new view for an existing table, click Add section . In the added blank section you can select the table and the view type.","title":"Creating a new view"},{"location":"view-types/#organizing-view-sections","text":"To rearrange view sections on the screen you can simply grab a section by its top-left corner and drag it to the desired location. Drop zones are signified by a dotted blue line.","title":"Organizing view sections"}]}