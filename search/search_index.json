{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Grist! # Grist is a software product to organize, analyze, and share data. Grist combines the best of spreadsheets and databases. Even our name reflects this: \u201cGrist\u201d is made of \u201cgrid\u201d (as of spreadsheet cells) and \u201clist\u201d (as of database records). Of course, real-world problems go beyond simple grids and lists, and Grist is at its best when data gets more complex. To sign up and start using Grist, visit https://docs.getgrist.com . To learn Grist, we recommend starting with our How-To tutorials, or our Intro videos. How-To Tutorials # Create a custom CRM . Using the \u201cLightweight CRM\u201d example, learn to link data, and create high-productivity layouts. Analyze and visualize data . Using the \u201cInvestment Research\u201d example, learn to create summary tables and charts, and link charts dynamically. Managing business data . Using the \u201cAfterschool Program\u201d example, learn to model business data, use formulas, and manage complexity. [Coming soon] Managing scientific data . Using the \u201cBiochem Research\u201d example, learn to organize and analyze scientific data. Intro Videos # Creating a doc Pages & widgets Columns & types Reference columns Linking widgets Sharing a doc Popular shortcuts # Function reference Keyboard shortcuts Contact us # Email: support@getgrist.com If you have questions not answered here, problem reports, or other feedback, please contact us! While using Grist, you can use the Give feedback link in the bottom left corner. Or email us at support@getgrist.com .","title":"Welcome to Grist"},{"location":"#how-to-tutorials","text":"Create a custom CRM . Using the \u201cLightweight CRM\u201d example, learn to link data, and create high-productivity layouts. Analyze and visualize data . Using the \u201cInvestment Research\u201d example, learn to create summary tables and charts, and link charts dynamically. Managing business data . Using the \u201cAfterschool Program\u201d example, learn to model business data, use formulas, and manage complexity. [Coming soon] Managing scientific data . Using the \u201cBiochem Research\u201d example, learn to organize and analyze scientific data.","title":"How-To Tutorials"},{"location":"#intro-videos","text":"Creating a doc Pages & widgets Columns & types Reference columns Linking widgets Sharing a doc","title":"Intro Videos"},{"location":"#popular-shortcuts","text":"Function reference Keyboard shortcuts","title":"Popular shortcuts"},{"location":"#contact-us","text":"Email: support@getgrist.com If you have questions not answered here, problem reports, or other feedback, please contact us! While using Grist, you can use the Give feedback link in the bottom left corner. Or email us at support@getgrist.com .","title":"Contact us"},{"location":"afterschool-program/","text":"How to manage business data # Grist shines when your business data has some complexity. In this example, we\u2019ll look at an organization that runs after-school activities for children. Feel free to refer to the \u201cAfterschool Program\u201d example document in Examples & Templates in your Grist home page. In this exercise we will show how to go about planning, designing, and creating such document. Planning # A little planning ahead will help you get a solution faster. Think about what kinds of data you are working with, and what kinds of workflows you will need. You don\u2019t need to anticipate everything when you start. You can easily add complexity later, as you\u2019ll see below. Our organization runs a number of classes for children. Each class has an instructor and multiple students. Students may enroll in multiple classes, and may return year after year. For each class, we\u2019ll want to see the list of enrolled students, and if there are spots available. When a parent calls, we want a convenient way to enroll a new student, or to change or cancel a student\u2019s enrollment. If this sounds like building an application, that\u2019s exactly what we are doing. As you\u2019ll see, however, it is no harder than building a spreadsheet. Data Modeling # The better you model your business data, the easier your work will be. In a way, you are doing database design as well as building a custom application. Grist just makes it easier. Let\u2019s start with the classes and their instructors. We need a list of classes and instructors. The same instructor can teach different classes, so instructors and classes will live in different tables. Let\u2019s call them \u201cClasses\u201d and \u201cStaff\u201d. Each class has a single instructor, so one of the properties of a class will be that class\u2019s instructor. Classes and Instructors # When starting from scratch, you\u2019ll create a new empty document (see Creating a document ), rename the initial empty table \u201cTable1\u201d to \u201cClasses\u201d, add the columns you need, and type in some classes. To follow the steps of this tutorial, you can instead import Classes.csv (or simply refer to the \u201cAfterschool Program\u201d example document). For the Staff table, click the \u201cAdd New\u201d button and select \u201cAdd Empty Table\u201d. Rename it to \u201cStaff\u201d, create some columns, and enter some data about instructors. Or import Staff.csv to use sample data and save a few steps. We want the Instructor column in the Classes table to be a reference to the Staff table. Currently, the Staff table doesn\u2019t have any column that uniquely identifies each record. For setting up references, it\u2019s a good idea to add one. In this case, we\u2019ll add a \u201cFull Name\u201d column to the Staff table. Formulas # Click on the \u201cStaff\u201d page, and add a \u201cFull Name\u201d column using the column menu or the Alt + = shortcut, and type \u201cFull Name\u201d in the new column\u2019s header. Create a formula by typing in a value into any cell in the new column, starting with the equal sign (\u201c=\u201d). Enter the formula as $First_Name + \", \" + $Last_Name . You may use Excel-like syntax to the same effect: CONCAT($First_Name, \", \", $Last_Name) . In Grist, a formula always applies to every record in the table. Grist supports Python in formulas, and most Excel functions, which have uppercase names. Because formulas apply to every row, you should see the Full Name column automatically filled. References # Click on the \u201cClasses\u201d page again, and open \u201cColumn Options\u201d for the Instructor column. We\u2019ll turn it into a reference to Staff . In the right-side panel, set the column type to \u201cReference\u201d (in database terms, this is known as a \u201cforeign key\u201d), and set the referenced table to \u201cStaff\u201d. For the \u201cSHOW COLUMN\u201d dropdown, select \u201cFull Name\u201d, which is the new column we just added. Click the \u201cApply\u201d button to complete this change of the column\u2019s type (if the column is empty, there is no confirmation step). You can now assign an instructor to any class. Click on a cell in the Instructor column. You can hit Enter and choose from among the available instructors in the Staff table, or start typing to use auto-complete. Next, we will continue with students and their enrollments. Students # Each class has a number of students. So, we\u2019ll need a table of students. Again, add a new empty table, rename it to \u201cStudents\u201d, and fill it with the students\u2019 names, grade levels, etc. Or import Students.csv to use sample data and save a few steps. Let\u2019s add here a \u201cFull Name\u201d formula column, just like in the Staff table. It will come in handy. Many-to-Many Relationships # A student can take more than one class. Let\u2019s remember also that there are classes in the past and in the future, and keeping this historical data is valuable. So, for each student, there may be multiple classes, and in each class, there are multiple students. A good way to model such a relation is by adding the concept of an \u201cenrollment\u201d and a new Enrollments table. An \u201cenrollment\u201d represents one student being enrolled in one class. It has some useful properties of its own: the enrollment status (Confirmed, Waitlisted, or Cancelled), whether they have paid for the class, and perhaps more. In database design, this is known as a \u201cmany-to-many\u201d relationship. The extra table is known as a \u201cjoin\u201d table. Essentially, it adds a record for each student-class connection, and turns the \u201cmany-to-many\u201d relationship into two \u201cone-to-many\u201d relationships. This relationship: becomes this: So, let\u2019s add a new table, name it \u201cEnrollments\u201d, and add the columns we need. Here too, to follow along, you may import sample data from Enrollments.csv . In Column Options for the column Student , set the Column Type to \u201cReference\u201d, set the referenced table to Students , and select \u201cFull Name\u201d as the column to show. For the column Class , set the Column Type to \u201cReference\u201d, the referenced table to Classes , and select \u201cClass Code\u201d as the column to show. It\u2019s possible to enter enrollment data by adding records to this table and using auto-complete in the Student and Class column. Below, we will set up a much more convenient way to enroll students. Class View # One of our goals in the Planning stage was to see a list of enrolled students for each class. Now that the data tables are in place, we can create a page that does this. Click \u201cAdd New\u201d, then \u201cAdd Page\u201d to open the widget picker. Select to show a table of Classes , and click \u201cAdd Page\u201d. The new page shows a list of classes. Let\u2019s rename this page \u201cClass View\u201d. Next, add the Enrollments table linked to the table of classes. Click \u201cAdd New\u201d again, then \u201cAdd Widget to Page\u201d. In the widget picker, select to show a table of Enrollments . For \u201cSELECT BY\u201d, choose \u201cCLASSES\u201d, and click \u201cAdd to Page\u201d. We get two tables side-by-side. Selecting a class shows all enrollments in that class, each of which references a particular student and includes some other enrollment info. We can go a step further to make this view convenient for us. Let\u2019s add a Class card to this view. Click \u201cAdd New\u201d and \u201cAdd Widget to Page\u201d. In the widget picker, select widget \u201cCard\u201d for the Classes data. For \u201cSELECT BY\u201d, choose \u201cCLASSES\u201d again, and click \u201cAdd to Page\u201d. We can similarly add a card for the instructor leading this class. Again, click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d, and select \u201cCard\u201d for the Staff data. For \u201cSELECT BY\u201d, you can now pick \u201cCLASSES \u2022 Instructor\u201d. You can change the look of the new cards. Click the three-dot menu on the top right of the Card you\u2019d like to change, and choose \u201cWidget options\u201d. Find the \u201cTheme\u201d dropdown in the right panel, and select \u201cCompact\u201d. Here is what we now have in Class View page: It\u2019s a good time to clean up this page by hiding columns and fields that are duplicated or distracting. Check out Configuring field lists for an efficient way to select which fields to show, and Custom Layouts for rearranging widgets on the page. Enrollment View # Our other stated goal was a convenient way to enroll a student, and to see or adjust a given student\u2019s enrollments. Let\u2019s add a page for this. Click \u201cAdd New\u201d > \u201cAdd Page\u201d, and select a table of Students . We\u2019ll rename the new page to \u201cEnrollment View\u201d. When we select a student here, we\u2019d like to see all enrollments for this student. So click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d, and add a table of Enrollments . To link the new widget to the Students widget in the page, set the \u201cSELECT BY\u201d dropdown to \u201cSTUDENTS\u201d, and click \u201cAdd to Page\u201d. Now you can click on a student\u2019s name on the left and see the classes that student is enrolled in on the right. You can enroll the selected student into a class by simply entering a class code in the special blank row at the bottom of the enrollments list. As usual, the Class reference column offers auto-complete. You can hide the \u201cStudent\u201d column in \u201cENROLLMENTS\u201d table, since it will always show the selected student anyway. If you\u2019d like to include more info about the classes in the Enrollments table, select Column Options for the Class column, and click \u201c+ Add Column\u201d in the side panel. Any of the fields associated with a class are available. If you examine the columns you add this way, you\u2019ll see that they are simply formulas of the form $Class.Times . Adding Layers # If you are working with children, you are talking to their parents. You\u2019ll need to have the parents\u2019 names and contact info, which you can add as columns to the students table. You\u2019re likely to find that some parents have multiple children that enroll in classes together. Recognizing the parent-child relationship in your database may seem like a complex step, but it will likely simplify your daily workflow. So, let\u2019s add one more table: Families . We\u2019ll include the parent name and contact info, and link each child to a record here. You can import sample data from Families.csv . Note that we added a Full Name column here as for other tables that list people. In the Students table, we\u2019ll add a column named \u201cFamily\u201d, and make it a Reference to Families . The example data already has families filled in, and conversion to reference looks up the text to set correct references. If you were entering new data, you could link students to families using auto-complete as with other reference columms. Let\u2019s change our \u201cEnrollment View\u201d to list families first. This way, when a parent calls, you can pick the right record and see all of their children and enrollments for each child. In the \u201cEnrollment View\u201d page, click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d. Select to show a table of Families . Rearrange the widgets to have Families on the left, and Students and Enrollments to the right of it. Now link students to Families: click the three-dot menu on the top right of the STUDENTS table, and choose \u201cData Selection\u201d. In the side panel, you can set \u201cSELECT BY\u201d widget to \u201cFAMILIES\u201d. Finally, you can add Card widgets for details of the selected family, and of the selected student, and rearrange the widgets on the page to create a layout that\u2019s perfect for talking to a parent. You select a parent, see their children, and then select a child to see their enrollments. It\u2019s easy to add an enrollment record for a new class, or to change a record (e.g. mark it as \u201ccancelled\u201d), to add another child, or to add a new family. Example Document # The \u201cAfterschool Program\u201d example includes everything described above and a bit more. In particular, it adds a Count field to Classes to calculate the number of enrolled students, and a Spots Left field to show the number of spots remaining, by comparing Count to Max_Students : The formula for Count is len(Enrollments.lookupRecords(Class=$id, Status=\"Confirmed\")) . The formula for Spots Left is max($Max_Students - $Count, 0) or \"Full\" . These make for a more useful Class View page, where it\u2019s now easy to see at a glance which classes have spots remaining.","title":"Manage business data"},{"location":"afterschool-program/#how-to-manage-business-data","text":"Grist shines when your business data has some complexity. In this example, we\u2019ll look at an organization that runs after-school activities for children. Feel free to refer to the \u201cAfterschool Program\u201d example document in Examples & Templates in your Grist home page. In this exercise we will show how to go about planning, designing, and creating such document.","title":"Intro"},{"location":"afterschool-program/#planning","text":"A little planning ahead will help you get a solution faster. Think about what kinds of data you are working with, and what kinds of workflows you will need. You don\u2019t need to anticipate everything when you start. You can easily add complexity later, as you\u2019ll see below. Our organization runs a number of classes for children. Each class has an instructor and multiple students. Students may enroll in multiple classes, and may return year after year. For each class, we\u2019ll want to see the list of enrolled students, and if there are spots available. When a parent calls, we want a convenient way to enroll a new student, or to change or cancel a student\u2019s enrollment. If this sounds like building an application, that\u2019s exactly what we are doing. As you\u2019ll see, however, it is no harder than building a spreadsheet.","title":"Planning"},{"location":"afterschool-program/#data-modeling","text":"The better you model your business data, the easier your work will be. In a way, you are doing database design as well as building a custom application. Grist just makes it easier. Let\u2019s start with the classes and their instructors. We need a list of classes and instructors. The same instructor can teach different classes, so instructors and classes will live in different tables. Let\u2019s call them \u201cClasses\u201d and \u201cStaff\u201d. Each class has a single instructor, so one of the properties of a class will be that class\u2019s instructor.","title":"Data Modeling"},{"location":"afterschool-program/#classes-and-instructors","text":"When starting from scratch, you\u2019ll create a new empty document (see Creating a document ), rename the initial empty table \u201cTable1\u201d to \u201cClasses\u201d, add the columns you need, and type in some classes. To follow the steps of this tutorial, you can instead import Classes.csv (or simply refer to the \u201cAfterschool Program\u201d example document). For the Staff table, click the \u201cAdd New\u201d button and select \u201cAdd Empty Table\u201d. Rename it to \u201cStaff\u201d, create some columns, and enter some data about instructors. Or import Staff.csv to use sample data and save a few steps. We want the Instructor column in the Classes table to be a reference to the Staff table. Currently, the Staff table doesn\u2019t have any column that uniquely identifies each record. For setting up references, it\u2019s a good idea to add one. In this case, we\u2019ll add a \u201cFull Name\u201d column to the Staff table.","title":"Classes and Instructors"},{"location":"afterschool-program/#formulas","text":"Click on the \u201cStaff\u201d page, and add a \u201cFull Name\u201d column using the column menu or the Alt + = shortcut, and type \u201cFull Name\u201d in the new column\u2019s header. Create a formula by typing in a value into any cell in the new column, starting with the equal sign (\u201c=\u201d). Enter the formula as $First_Name + \", \" + $Last_Name . You may use Excel-like syntax to the same effect: CONCAT($First_Name, \", \", $Last_Name) . In Grist, a formula always applies to every record in the table. Grist supports Python in formulas, and most Excel functions, which have uppercase names. Because formulas apply to every row, you should see the Full Name column automatically filled.","title":"Formulas"},{"location":"afterschool-program/#references","text":"Click on the \u201cClasses\u201d page again, and open \u201cColumn Options\u201d for the Instructor column. We\u2019ll turn it into a reference to Staff . In the right-side panel, set the column type to \u201cReference\u201d (in database terms, this is known as a \u201cforeign key\u201d), and set the referenced table to \u201cStaff\u201d. For the \u201cSHOW COLUMN\u201d dropdown, select \u201cFull Name\u201d, which is the new column we just added. Click the \u201cApply\u201d button to complete this change of the column\u2019s type (if the column is empty, there is no confirmation step). You can now assign an instructor to any class. Click on a cell in the Instructor column. You can hit Enter and choose from among the available instructors in the Staff table, or start typing to use auto-complete. Next, we will continue with students and their enrollments.","title":"References"},{"location":"afterschool-program/#students","text":"Each class has a number of students. So, we\u2019ll need a table of students. Again, add a new empty table, rename it to \u201cStudents\u201d, and fill it with the students\u2019 names, grade levels, etc. Or import Students.csv to use sample data and save a few steps. Let\u2019s add here a \u201cFull Name\u201d formula column, just like in the Staff table. It will come in handy.","title":"Students"},{"location":"afterschool-program/#many-to-many-relationships","text":"A student can take more than one class. Let\u2019s remember also that there are classes in the past and in the future, and keeping this historical data is valuable. So, for each student, there may be multiple classes, and in each class, there are multiple students. A good way to model such a relation is by adding the concept of an \u201cenrollment\u201d and a new Enrollments table. An \u201cenrollment\u201d represents one student being enrolled in one class. It has some useful properties of its own: the enrollment status (Confirmed, Waitlisted, or Cancelled), whether they have paid for the class, and perhaps more. In database design, this is known as a \u201cmany-to-many\u201d relationship. The extra table is known as a \u201cjoin\u201d table. Essentially, it adds a record for each student-class connection, and turns the \u201cmany-to-many\u201d relationship into two \u201cone-to-many\u201d relationships. This relationship: becomes this: So, let\u2019s add a new table, name it \u201cEnrollments\u201d, and add the columns we need. Here too, to follow along, you may import sample data from Enrollments.csv . In Column Options for the column Student , set the Column Type to \u201cReference\u201d, set the referenced table to Students , and select \u201cFull Name\u201d as the column to show. For the column Class , set the Column Type to \u201cReference\u201d, the referenced table to Classes , and select \u201cClass Code\u201d as the column to show. It\u2019s possible to enter enrollment data by adding records to this table and using auto-complete in the Student and Class column. Below, we will set up a much more convenient way to enroll students.","title":"Many-to-Many Relationships"},{"location":"afterschool-program/#class-view","text":"One of our goals in the Planning stage was to see a list of enrolled students for each class. Now that the data tables are in place, we can create a page that does this. Click \u201cAdd New\u201d, then \u201cAdd Page\u201d to open the widget picker. Select to show a table of Classes , and click \u201cAdd Page\u201d. The new page shows a list of classes. Let\u2019s rename this page \u201cClass View\u201d. Next, add the Enrollments table linked to the table of classes. Click \u201cAdd New\u201d again, then \u201cAdd Widget to Page\u201d. In the widget picker, select to show a table of Enrollments . For \u201cSELECT BY\u201d, choose \u201cCLASSES\u201d, and click \u201cAdd to Page\u201d. We get two tables side-by-side. Selecting a class shows all enrollments in that class, each of which references a particular student and includes some other enrollment info. We can go a step further to make this view convenient for us. Let\u2019s add a Class card to this view. Click \u201cAdd New\u201d and \u201cAdd Widget to Page\u201d. In the widget picker, select widget \u201cCard\u201d for the Classes data. For \u201cSELECT BY\u201d, choose \u201cCLASSES\u201d again, and click \u201cAdd to Page\u201d. We can similarly add a card for the instructor leading this class. Again, click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d, and select \u201cCard\u201d for the Staff data. For \u201cSELECT BY\u201d, you can now pick \u201cCLASSES \u2022 Instructor\u201d. You can change the look of the new cards. Click the three-dot menu on the top right of the Card you\u2019d like to change, and choose \u201cWidget options\u201d. Find the \u201cTheme\u201d dropdown in the right panel, and select \u201cCompact\u201d. Here is what we now have in Class View page: It\u2019s a good time to clean up this page by hiding columns and fields that are duplicated or distracting. Check out Configuring field lists for an efficient way to select which fields to show, and Custom Layouts for rearranging widgets on the page.","title":"Class View"},{"location":"afterschool-program/#enrollment-view","text":"Our other stated goal was a convenient way to enroll a student, and to see or adjust a given student\u2019s enrollments. Let\u2019s add a page for this. Click \u201cAdd New\u201d > \u201cAdd Page\u201d, and select a table of Students . We\u2019ll rename the new page to \u201cEnrollment View\u201d. When we select a student here, we\u2019d like to see all enrollments for this student. So click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d, and add a table of Enrollments . To link the new widget to the Students widget in the page, set the \u201cSELECT BY\u201d dropdown to \u201cSTUDENTS\u201d, and click \u201cAdd to Page\u201d. Now you can click on a student\u2019s name on the left and see the classes that student is enrolled in on the right. You can enroll the selected student into a class by simply entering a class code in the special blank row at the bottom of the enrollments list. As usual, the Class reference column offers auto-complete. You can hide the \u201cStudent\u201d column in \u201cENROLLMENTS\u201d table, since it will always show the selected student anyway. If you\u2019d like to include more info about the classes in the Enrollments table, select Column Options for the Class column, and click \u201c+ Add Column\u201d in the side panel. Any of the fields associated with a class are available. If you examine the columns you add this way, you\u2019ll see that they are simply formulas of the form $Class.Times .","title":"Enrollment View"},{"location":"afterschool-program/#adding-layers","text":"If you are working with children, you are talking to their parents. You\u2019ll need to have the parents\u2019 names and contact info, which you can add as columns to the students table. You\u2019re likely to find that some parents have multiple children that enroll in classes together. Recognizing the parent-child relationship in your database may seem like a complex step, but it will likely simplify your daily workflow. So, let\u2019s add one more table: Families . We\u2019ll include the parent name and contact info, and link each child to a record here. You can import sample data from Families.csv . Note that we added a Full Name column here as for other tables that list people. In the Students table, we\u2019ll add a column named \u201cFamily\u201d, and make it a Reference to Families . The example data already has families filled in, and conversion to reference looks up the text to set correct references. If you were entering new data, you could link students to families using auto-complete as with other reference columms. Let\u2019s change our \u201cEnrollment View\u201d to list families first. This way, when a parent calls, you can pick the right record and see all of their children and enrollments for each child. In the \u201cEnrollment View\u201d page, click \u201cAdd New\u201d > \u201cAdd Widget to Page\u201d. Select to show a table of Families . Rearrange the widgets to have Families on the left, and Students and Enrollments to the right of it. Now link students to Families: click the three-dot menu on the top right of the STUDENTS table, and choose \u201cData Selection\u201d. In the side panel, you can set \u201cSELECT BY\u201d widget to \u201cFAMILIES\u201d. Finally, you can add Card widgets for details of the selected family, and of the selected student, and rearrange the widgets on the page to create a layout that\u2019s perfect for talking to a parent. You select a parent, see their children, and then select a child to see their enrollments. It\u2019s easy to add an enrollment record for a new class, or to change a record (e.g. mark it as \u201ccancelled\u201d), to add another child, or to add a new family.","title":"Adding Layers"},{"location":"afterschool-program/#example-document","text":"The \u201cAfterschool Program\u201d example includes everything described above and a bit more. In particular, it adds a Count field to Classes to calculate the number of enrolled students, and a Spots Left field to show the number of spots remaining, by comparing Count to Max_Students : The formula for Count is len(Enrollments.lookupRecords(Class=$id, Status=\"Confirmed\")) . The formula for Spots Left is max($Max_Students - $Count, 0) or \"Full\" . These make for a more useful Class View page, where it\u2019s now easy to see at a glance which classes have spots remaining.","title":"Example Document"},{"location":"api/","text":"Authentication orgs get List the orgs you have access to get Describe an org patch Modify an org get List users with access to org patch Change who has access to org get List workspaces and documents within an org workspaces post Create an empty workspace get Describe a workspace patch Modify a workspace del Delete a workspace get List users with access to workspace patch Change who has access to workspace docs post Create an empty document get Describe a document patch Modify document metadata (but not its contents) del Delete a document patch Move document to another workspace in the same org. get List users with access to document patch Change who has access to document get Content of document, as an Sqlite file Data Tables get Fetch data from a table post Add rows to a table patch Modify rows of a table Attachments post Upload attachments to a doc get Get the metadata for an attachment get Download the contents of an attachment Documentation Powered by ReDoc Grist API ( 1.0.1 ) An API for manipulating Grist sites, workspaces, and documents. Authentication API Key Access to the Grist API is controlled by an Authorization header, which should contain the word 'Bearer', followed by a space, followed by your API key. Security scheme type: HTTP HTTP Authorization Scheme bearer Bearer format \" Authorization: Bearer XXXXXXXXXXX \" orgs Team sites and personal spaces are called 'orgs' in the API. List the orgs you have access to get /orgs https://docs.getgrist.com/api /orgs This enumerates all the team sites or personal areas available. Authorizations: API Key Responses 200 An array of organizations Response samples 200 Content type application/json Copy Expand all Collapse all [ { \"id\" : 42 , \"name\" : \"Grist Labs\" , \"domain\" : \"gristlabs\" , \"owner\" : { \"id\" : 101 , \"name\" : \"Helga Hufflepuff\" , \"picture\" : null } , \"access\" : \"owners\" , \"createdAt\" : \"2019-09-13T15:42:35.000Z\" , \"updatedAt\" : \"2019-09-13T15:42:35.000Z\" } ] Describe an org get /orgs/{orgId} https://docs.getgrist.com/api /orgs/{orgId} Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Responses 200 An organization Response samples 200 Content type application/json Copy Expand all Collapse all { \"id\" : 42 , \"name\" : \"Grist Labs\" , \"domain\" : \"gristlabs\" , \"owner\" : { \"id\" : 101 , \"name\" : \"Helga Hufflepuff\" , \"picture\" : null } , \"access\" : \"owners\" , \"createdAt\" : \"2019-09-13T15:42:35.000Z\" , \"updatedAt\" : \"2019-09-13T15:42:35.000Z\" } Modify an org patch /orgs/{orgId} https://docs.getgrist.com/api /orgs/{orgId} Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Request Body schema: application/json the changes to make name string Responses 200 Success Request samples Payload Content type application/json Copy Expand all Collapse all { \"name\" : \"ACME Unlimited\" } List users with access to org get /orgs/{orgId}/access https://docs.getgrist.com/api /orgs/{orgId}/access Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Responses 200 Users with access to org Response samples 200 Content type application/json Copy Expand all Collapse all { \"users\" : [ { \"id\" : 1 , \"name\" : \"Andrea\" , \"email\" : \"andrea@getgrist.com\" , \"access\" : \"owners\" } ] } Change who has access to org patch /orgs/{orgId}/access https://docs.getgrist.com/api /orgs/{orgId}/access Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Request Body schema: application/json the changes to make delta required object ( OrgAccessWrite ) Request samples Payload Content type application/json Copy Expand all Collapse all { \"delta\" : { \"users\" : { \"foo@getgrist.com\" : \"owners\" , \"bar@getgrist.com\" : null } } } List workspaces and documents within an org get /orgs/{orgId}/workspaces https://docs.getgrist.com/api /orgs/{orgId}/workspaces Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Responses 200 An org's workspaces and documents Response samples 200 Content type application/json Copy Expand all Collapse all { \"id\" : 42 , \"name\" : \"Grist Labs\" , \"domain\" : \"gristlabs\" , \"owner\" : { \"id\" : 101 , \"name\" : \"Helga Hufflepuff\" , \"picture\" : null } , \"access\" : \"owners\" , \"createdAt\" : \"2019-09-13T15:42:35.000Z\" , \"updatedAt\" : \"2019-09-13T15:42:35.000Z\" , \"workspaces\" : [ { \"id\" : 97 , \"name\" : \"Secret Plans\" , \"access\" : \"owners\" , \"docs\" : [ { \"id\" : 145 , \"name\" : \"Project Lollipop\" , \"access\" : \"owners\" , \"isPinned\" : true , \"urlId\" : null } ] } ] } workspaces Sites can be organized into groups of documents called workspaces. Create an empty workspace post /orgs/{orgId}/workspaces https://docs.getgrist.com/api /orgs/{orgId}/workspaces Authorizations: API Key path Parameters orgId required any ( OrgKey ) This can be an integer id, or a string subdomain (e.g. gristlabs ), or current if the org is implied by the domain in the url Request Body schema: application/json settings for the workspace name string Responses 200 The workspace id Request samples Payload Content type application/json Copy Expand all Collapse all { \"name\" : \"Retreat Docs\" } Response samples 200 Content type application/json Copy Expand all Collapse all 155 Describe a workspace get /workspaces/{workspaceId} https://docs.getgrist.com/api /workspaces/{workspaceId} Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Responses 200 A workspace Response samples 200 Content type application/json Copy Expand all Collapse all { \"id\" : 97 , \"name\" : \"Secret Plans\" , \"access\" : \"owners\" , \"org\" : { \"id\" : 42 , \"name\" : \"Grist Labs\" , \"domain\" : \"gristlabs\" , \"owner\" : { \"id\" : 101 , \"name\" : \"Helga Hufflepuff\" , \"picture\" : null } , \"access\" : \"owners\" , \"createdAt\" : \"2019-09-13T15:42:35.000Z\" , \"updatedAt\" : \"2019-09-13T15:42:35.000Z\" } } Modify a workspace patch /workspaces/{workspaceId} https://docs.getgrist.com/api /workspaces/{workspaceId} Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Request Body schema: application/json the changes to make name string Responses 200 Success Request samples Payload Content type application/json Copy Expand all Collapse all { \"name\" : \"Retreat Docs\" } Delete a workspace delete /workspaces/{workspaceId} https://docs.getgrist.com/api /workspaces/{workspaceId} Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Responses 200 Success List users with access to workspace get /workspaces/{workspaceId}/access https://docs.getgrist.com/api /workspaces/{workspaceId}/access Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Responses 200 Users with access to workspace Response samples 200 Content type application/json Copy Expand all Collapse all { \"maxInheritedRole\" : \"owners\" , \"users\" : [ { \"id\" : 1 , \"name\" : \"Andrea\" , \"email\" : \"andrea@getgrist.com\" , \"access\" : \"owners\" , \"parentAccess\" : \"owners\" } ] } Change who has access to workspace patch /workspaces/{workspaceId}/access https://docs.getgrist.com/api /workspaces/{workspaceId}/access Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Request Body schema: application/json the changes to make delta required object ( WorkspaceAccessWrite ) Request samples Payload Content type application/json Copy Expand all Collapse all { \"delta\" : { \"maxInheritedRole\" : \"owners\" , \"users\" : { \"foo@getgrist.com\" : \"owners\" , \"bar@getgrist.com\" : null } } } docs Workspaces contain collections of Grist documents. Create an empty document post /workspaces/{workspaceId} https://docs.getgrist.com/api /workspaces/{workspaceId} Authorizations: API Key path Parameters workspaceId required integer ( WorkspaceKey ) An integer id Request Body schema: application/json settings for the document name string isPinned boolean Responses 200 The document id Request samples Payload Content type application/json Copy Expand all Collapse all { \"name\" : \"Competitive Analysis\" , \"isPinned\" : false } Response samples 200 Content type application/json Copy Expand all Collapse all \"8b97c8db-b4df-4b34-b72c-17459e70140a\" Describe a document get /docs/{docId} https://docs.getgrist.com/api /docs/{docId} Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Responses 200 A document's metadata Response samples 200 Content type application/json Copy Expand all Collapse all { \"id\" : 145 , \"name\" : \"Project Lollipop\" , \"access\" : \"owners\" , \"isPinned\" : true , \"urlId\" : null , \"workspace\" : { \"id\" : 97 , \"name\" : \"Secret Plans\" , \"access\" : \"owners\" , \"org\" : { \"id\" : 42 , \"name\" : \"Grist Labs\" , \"domain\" : \"gristlabs\" , \"owner\" : { \"id\" : 101 , \"name\" : \"Helga Hufflepuff\" , \"picture\" : null } , \"access\" : \"owners\" , \"createdAt\" : \"2019-09-13T15:42:35.000Z\" , \"updatedAt\" : \"2019-09-13T15:42:35.000Z\" } } } Modify document metadata (but not its contents) patch /docs/{docId} https://docs.getgrist.com/api /docs/{docId} Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Request Body schema: application/json the changes to make name string isPinned boolean Responses 200 Success Request samples Payload Content type application/json Copy Expand all Collapse all { \"name\" : \"Competitive Analysis\" , \"isPinned\" : false } Delete a document delete /docs/{docId} https://docs.getgrist.com/api /docs/{docId} Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Responses 200 Success Move document to another workspace in the same org. patch /docs/{docId}/move https://docs.getgrist.com/api /docs/{docId}/move Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Request Body schema: application/json the target workspace workspace required integer Responses 200 Success Request samples Payload Content type application/json Copy Expand all Collapse all { \"workspace\" : 597 } List users with access to document get /docs/{docId}/access https://docs.getgrist.com/api /docs/{docId}/access Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Responses 200 Users with access to document Response samples 200 Content type application/json Copy Expand all Collapse all { \"maxInheritedRole\" : \"owners\" , \"users\" : [ { \"id\" : 1 , \"name\" : \"Andrea\" , \"email\" : \"andrea@getgrist.com\" , \"access\" : \"owners\" , \"parentAccess\" : \"owners\" } ] } Change who has access to document patch /docs/{docId}/access https://docs.getgrist.com/api /docs/{docId}/access Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Request Body schema: application/json the changes to make delta required object ( WorkspaceAccessWrite ) Request samples Payload Content type application/json Copy Expand all Collapse all { \"delta\" : { \"maxInheritedRole\" : \"owners\" , \"users\" : { \"foo@getgrist.com\" : \"owners\" , \"bar@getgrist.com\" : null } } } Content of document, as an Sqlite file get /docs/{docId}/download https://docs.getgrist.com/api /docs/{docId}/download Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Responses 200 A document's content in Sqlite form Data Tables Documents contains tables with records of data. Fetch data from a table get /docs/{docId}/tables/{tableId}/data https://docs.getgrist.com/api /docs/{docId}/tables/{tableId}/data Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) tableId required string name of a table (normalized) query Parameters filter string Example: filter=%7B%22pet%22%3A%20%5B%22cat%22%2C%20%22dog%22%5D%7D This is a JSON object mapping column names to arrays of allowed values. For example, to filter column pet for values cat and dog , the filter would be {\"pet\": [\"cat\", \"dog\"]} . JSON contains characters that are not safe to place in a URL, so it is important to url-encode them. For this example, the url-encoding is %7B%22pet%22%3A%20%5B%22cat%22%2C%20%22dog%22%5D%7D . See https://rosettacode.org/wiki/URL_encoding for how to url-encode a string, or https://www.urlencoder.org/ to try some examples. Multiple columns can be filtered. For example the filter for pet being either cat or dog , AND size being either tiny or outrageously small , would be {\"pet\": [\"cat\", \"dog\"], \"size\": [\"tiny\", \"outrageously small\"]} . sort string Example: sort=pet%2C-age Order in which to return results. If a single column name is given (e.g. pet ), results are placed in ascending order of values in that column. Multiple columns can be specified, separated by commas (e.g. pet,age ). For descending order, prefix a column name with a - character (e.g. pet,-age ). limit number Example: limit=5 Return at most this number of rows. A value of 0 is equivalent to having no limit. header Parameters X-Sort string Example: pet,-age Same as sort query parameter. X-Limit number Example: 5 Same as limit query parameter. Responses 200 Cells from the table Response samples 200 Content type application/json Copy Expand all Collapse all { \"id\" : [ 1 , 2 ] , \"pet\" : [ \"cat\" , \"dog\" ] , \"popularity\" : [ 67 , 95 ] } Add rows to a table post /docs/{docId}/tables/{tableId}/data https://docs.getgrist.com/api /docs/{docId}/tables/{tableId}/data Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) tableId required string name of a table (normalized) Request Body schema: application/json the data to add property name* Array of any Responses 200 IDs of rows added Request samples Payload Content type application/json Copy Expand all Collapse all { \"id\" : [ 1 , 2 ] , \"pet\" : [ \"cat\" , \"dog\" ] , \"popularity\" : [ 67 , 95 ] } Response samples 200 Content type application/json Copy Expand all Collapse all [ 101 , 102 , 103 ] Modify rows of a table patch /docs/{docId}/tables/{tableId}/data https://docs.getgrist.com/api /docs/{docId}/tables/{tableId}/data Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) tableId required string name of a table (normalized) Request Body schema: application/json the data to add, with ids id required Array of integers property name* Array of any Responses 200 IDs of rows modified Request samples Payload Content type application/json Copy Expand all Collapse all { \"id\" : [ 1 , 2 ] , \"pet\" : [ \"cat\" , \"dog\" ] , \"popularity\" : [ 67 , 95 ] } Response samples 200 Content type application/json Copy Expand all Collapse all [ 101 , 102 , 103 ] Attachments Documents may include attached files. Data records can refer to these using a column of type Attachments . Upload attachments to a doc post /docs/{docId}/attachments https://docs.getgrist.com/api /docs/{docId}/attachments Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) Request Body schema: multipart/form-data the files to add to the doc upload Array of File Responses 200 IDs of attachments added, one per file. Response samples 200 Content type application/json Copy Expand all Collapse all [ 101 , 102 , 103 ] Get the metadata for an attachment get /docs/{docId}/attachments/{attachmentId} https://docs.getgrist.com/api /docs/{docId}/attachments/{attachmentId} Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) attachmentId required number ( AttachmentId ) An integer ID Responses 200 Attachment metadata Response samples 200 Content type application/json Copy Expand all Collapse all { \"fileName\" : \"logo.png\" , \"fileSize\" : 12345 , \"timeUploaded\" : \"2020-02-13T12:17:19.000Z\" } Download the contents of an attachment get /docs/{docId}/attachments/{attachmentId}/download https://docs.getgrist.com/api /docs/{docId}/attachments/{attachmentId}/download Authorizations: API Key path Parameters docId required string ( DocKey ) A string id (UUID) attachmentId required number ( AttachmentId ) An integer ID Responses 200 Attachment contents, with suitable Content-Type. const __redoc_state = {\"menu\":{\"activeItemIdx\":-1},\"spec\":{\"data\":{\"info\":{\"description\":\"An API for manipulating Grist sites, workspaces, and documents.\\n\\n# Authentication\\n\\n<!-- ReDoc-Inject: <security-definitions> -->\",\"version\":\"1.0.1\",\"title\":\"Grist API\"},\"openapi\":\"3.0.0\",\"security\":[{\"API Key\":[]}],\"servers\":[{\"url\":\"https://docs.getgrist.com/api\"}],\"paths\":{\"/orgs\":{\"get\":{\"tags\":[\"orgs\"],\"summary\":\"List the orgs you have access to\",\"description\":\"This enumerates all the team sites or personal areas available.\",\"responses\":{\"200\":{\"description\":\"An array of organizations\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Orgs\"}}}}}}},\"/orgs/{orgId}\":{\"get\":{\"tags\":[\"orgs\"],\"summary\":\"Describe an org\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"An organization\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Org\"}}}}}},\"patch\":{\"tags\":[\"orgs\"],\"summary\":\"Modify an org\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/OrgParameters\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/orgs/{orgId}/access\":{\"get\":{\"tags\":[\"orgs\"],\"summary\":\"List users with access to org\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Users with access to org\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/OrgAccessRead\"}}}}}},\"patch\":{\"tags\":[\"orgs\"],\"summary\":\"Change who has access to org\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"required\":[\"delta\"],\"properties\":{\"delta\":{\"$ref\":\"#/components/schemas/OrgAccessWrite\"}}}}},\"required\":true}}},\"/orgs/{orgId}/workspaces\":{\"get\":{\"tags\":[\"orgs\"],\"summary\":\"List workspaces and documents within an org\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"An org's workspaces and documents\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/OrgWithWorkspaces\"}}}}}},\"post\":{\"tags\":[\"workspaces\"],\"summary\":\"Create an empty workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"orgId\",\"schema\":{\"$ref\":\"#/components/schemas/OrgKey\"},\"required\":true}],\"requestBody\":{\"description\":\"settings for the workspace\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceParameters\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"The workspace id\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"integer\",\"description\":\"an identifier for the workspace\",\"example\":155}}}}}}},\"/workspaces/{workspaceId}\":{\"get\":{\"tags\":[\"workspaces\"],\"summary\":\"Describe a workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"A workspace\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceWithOrg\"}}}}}},\"post\":{\"tags\":[\"docs\"],\"summary\":\"Create an empty document\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"requestBody\":{\"description\":\"settings for the document\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/DocParameters\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"The document id\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"string\",\"description\":\"a unique identifier for the document\",\"example\":\"8b97c8db-b4df-4b34-b72c-17459e70140a\"}}}}}},\"patch\":{\"tags\":[\"workspaces\"],\"summary\":\"Modify a workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceParameters\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"Success\"}}},\"delete\":{\"tags\":[\"workspaces\"],\"summary\":\"Delete a workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/workspaces/{workspaceId}/access\":{\"get\":{\"tags\":[\"workspaces\"],\"summary\":\"List users with access to workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Users with access to workspace\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceAccessRead\"}}}}}},\"patch\":{\"tags\":[\"workspaces\"],\"summary\":\"Change who has access to workspace\",\"parameters\":[{\"in\":\"path\",\"name\":\"workspaceId\",\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"required\":[\"delta\"],\"properties\":{\"delta\":{\"$ref\":\"#/components/schemas/WorkspaceAccessWrite\"}}}}},\"required\":true}}},\"/docs/{docId}\":{\"get\":{\"tags\":[\"docs\"],\"summary\":\"Describe a document\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"A document's metadata\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/DocWithWorkspace\"}}}}}},\"patch\":{\"tags\":[\"docs\"],\"summary\":\"Modify document metadata (but not its contents)\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/DocParameters\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"Success\"}}},\"delete\":{\"tags\":[\"docs\"],\"summary\":\"Delete a document\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/docs/{docId}/move\":{\"patch\":{\"tags\":[\"docs\"],\"summary\":\"Move document to another workspace in the same org.\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the target workspace\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"required\":[\"workspace\"],\"properties\":{\"workspace\":{\"type\":\"integer\",\"example\":597}}}}}},\"responses\":{\"200\":{\"description\":\"Success\"}}}},\"/docs/{docId}/access\":{\"get\":{\"tags\":[\"docs\"],\"summary\":\"List users with access to document\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Users with access to document\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/WorkspaceAccessRead\"}}}}}},\"patch\":{\"tags\":[\"docs\"],\"summary\":\"Change who has access to document\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the changes to make\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"object\",\"required\":[\"delta\"],\"properties\":{\"delta\":{\"$ref\":\"#/components/schemas/WorkspaceAccessWrite\"}}}}},\"required\":true}}},\"/docs/{docId}/download\":{\"get\":{\"tags\":[\"docs\"],\"summary\":\"Content of document, as an Sqlite file\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"A document's content in Sqlite form\",\"content\":{\"application/x-sqlite3\":{\"schema\":{\"type\":\"string\",\"format\":\"binary\"}}}}}}},\"/docs/{docId}/tables/{tableId}/data\":{\"get\":{\"tags\":[\"Data Tables\"],\"summary\":\"Fetch data from a table\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true},{\"in\":\"path\",\"name\":\"tableId\",\"schema\":{\"type\":\"string\",\"description\":\"name of a table (normalized)\"},\"required\":true},{\"in\":\"query\",\"name\":\"filter\",\"schema\":{\"type\":\"string\",\"description\":\"This is a JSON object mapping column names to arrays of allowed values. For example, to filter column `pet` for values `cat` and `dog`, the filter would be `{\\\"pet\\\": [\\\"cat\\\", \\\"dog\\\"]}`. JSON contains characters that are not safe to place in a URL, so it is important to url-encode them. For this example, the url-encoding is `%7B%22pet%22%3A%20%5B%22cat%22%2C%20%22dog%22%5D%7D`. See https://rosettacode.org/wiki/URL_encoding for how to url-encode a string, or https://www.urlencoder.org/ to try some examples. Multiple columns can be filtered. For example the filter for `pet` being either `cat` or `dog`, AND `size` being either `tiny` or `outrageously small`, would be `{\\\"pet\\\": [\\\"cat\\\", \\\"dog\\\"], \\\"size\\\": [\\\"tiny\\\", \\\"outrageously small\\\"]}`.\",\"example\":\"{\\\"pet\\\": [\\\"cat\\\", \\\"dog\\\"]}\"},\"required\":false},{\"in\":\"query\",\"name\":\"sort\",\"schema\":{\"type\":\"string\",\"description\":\"Order in which to return results. If a single column name is given (e.g. `pet`), results are placed in ascending order of values in that column. Multiple columns can be specified, separated by commas (e.g. `pet,age`). For descending order, prefix a column name with a `-` character (e.g. `pet,-age`).\",\"example\":\"pet,-age\"}},{\"in\":\"query\",\"name\":\"limit\",\"schema\":{\"type\":\"number\",\"description\":\"Return at most this number of rows. A value of 0 is equivalent to having no limit.\",\"example\":\"5\"}},{\"in\":\"header\",\"name\":\"X-Sort\",\"schema\":{\"type\":\"string\",\"description\":\"Same as `sort` query parameter.\",\"example\":\"pet,-age\"}},{\"in\":\"header\",\"name\":\"X-Limit\",\"schema\":{\"type\":\"number\",\"description\":\"Same as `limit` query parameter.\",\"example\":\"5\"}}],\"responses\":{\"200\":{\"description\":\"Cells from the table\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Data\"}}}}}},\"post\":{\"tags\":[\"Data Tables\"],\"summary\":\"Add rows to a table\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true},{\"in\":\"path\",\"name\":\"tableId\",\"schema\":{\"type\":\"string\",\"description\":\"name of a table (normalized)\"},\"required\":true}],\"requestBody\":{\"description\":\"the data to add\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/DataWithoutId\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"IDs of rows added\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RowIds\"}}}}}},\"patch\":{\"tags\":[\"Data Tables\"],\"summary\":\"Modify rows of a table\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true},{\"in\":\"path\",\"name\":\"tableId\",\"schema\":{\"type\":\"string\",\"description\":\"name of a table (normalized)\"},\"required\":true}],\"requestBody\":{\"description\":\"the data to add, with ids\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Data\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"IDs of rows modified\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RowIds\"}}}}}}},\"/docs/{docId}/attachments\":{\"post\":{\"tags\":[\"Attachments\"],\"summary\":\"Upload attachments to a doc\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true}],\"requestBody\":{\"description\":\"the files to add to the doc\",\"content\":{\"multipart/form-data\":{\"schema\":{\"$ref\":\"#/components/schemas/AttachmentUpload\"}}},\"required\":true},\"responses\":{\"200\":{\"description\":\"IDs of attachments added, one per file.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/RowIds\"}}}}}}},\"/docs/{docId}/attachments/{attachmentId}\":{\"get\":{\"tags\":[\"Attachments\"],\"summary\":\"Get the metadata for an attachment\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true},{\"in\":\"path\",\"name\":\"attachmentId\",\"schema\":{\"$ref\":\"#/components/schemas/AttachmentId\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Attachment metadata\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/AttachmentMetadata\"}}}}}}},\"/docs/{docId}/attachments/{attachmentId}/download\":{\"get\":{\"tags\":[\"Attachments\"],\"summary\":\"Download the contents of an attachment\",\"parameters\":[{\"in\":\"path\",\"name\":\"docId\",\"schema\":{\"$ref\":\"#/components/schemas/DocKey\"},\"required\":true},{\"in\":\"path\",\"name\":\"attachmentId\",\"schema\":{\"$ref\":\"#/components/schemas/AttachmentId\"},\"required\":true}],\"responses\":{\"200\":{\"description\":\"Attachment contents, with suitable Content-Type.\"}}}}},\"tags\":[{\"name\":\"orgs\",\"description\":\"Team sites and personal spaces are called 'orgs' in the API.\"},{\"name\":\"workspaces\",\"description\":\"Sites can be organized into groups of documents called workspaces.\"},{\"name\":\"docs\",\"description\":\"Workspaces contain collections of Grist documents.\"},{\"name\":\"Data Tables\",\"description\":\"Documents contains tables with records of data.\"},{\"name\":\"Attachments\",\"description\":\"Documents may include attached files. Data records can refer to these using a column of type `Attachments`.\"}],\"components\":{\"securitySchemes\":{\"API Key\":{\"type\":\"http\",\"scheme\":\"bearer\",\"bearerFormat\":\"Authorization: Bearer XXXXXXXXXXX\",\"description\":\"Access to the Grist API is controlled by an Authorization header, which should contain the word 'Bearer', followed by a space, followed by your API key.\"}},\"schemas\":{\"OrgKey\":{\"oneof\":[\"integer\",\"string\"],\"description\":\"This can be an integer id, or a string subdomain (e.g. `gristlabs`), or `current` if the org is implied by the domain in the url\"},\"WorkspaceKey\":{\"type\":\"integer\",\"description\":\"An integer id\"},\"DocKey\":{\"type\":\"string\",\"description\":\"A string id (UUID)\"},\"Org\":{\"type\":\"object\",\"required\":[\"id\",\"name\",\"domain\",\"owner\",\"createdAt\",\"updatedAt\",\"access\"],\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":42},\"name\":{\"type\":\"string\",\"example\":\"Grist Labs\"},\"domain\":{\"type\":\"string\",\"nullable\":true,\"example\":\"gristlabs\"},\"owner\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/User\",\"nullable\":true},\"access\":{\"type\":\"string\",\"$ref\":\"#/components/schemas/Access\"},\"createdAt\":{\"type\":\"string\",\"example\":\"2019-09-13T15:42:35.000Z\"},\"updatedAt\":{\"type\":\"string\",\"example\":\"2019-09-13T15:42:35.000Z\"}}},\"Orgs\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Org\"}},\"Workspace\":{\"type\":\"object\",\"required\":[\"id\",\"name\",\"access\"],\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":97},\"name\":{\"type\":\"string\",\"example\":\"Secret Plans\"},\"access\":{\"type\":\"string\",\"$ref\":\"#/components/schemas/Access\"}}},\"Doc\":{\"type\":\"object\",\"required\":[\"id\",\"name\",\"isPinned\",\"urlId\",\"access\"],\"properties\":{\"id\":{\"type\":\"string\",\"example\":145},\"name\":{\"type\":\"string\",\"example\":\"Project Lollipop\"},\"access\":{\"type\":\"string\",\"$ref\":\"#/components/schemas/Access\"},\"isPinned\":{\"type\":\"boolean\",\"example\":true},\"urlId\":{\"type\":\"string\",\"nullable\":true,\"example\":null}}},\"Workspaces\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Workspace\"}},\"WorkspaceWithDocs\":{\"allOf\":[{\"$ref\":\"#/components/schemas/Workspace\"},{\"type\":\"object\",\"required\":[\"docs\"],\"properties\":{\"docs\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Doc\"}}}}]},\"WorkspaceWithOrg\":{\"allOf\":[{\"$ref\":\"#/components/schemas/Workspace\"},{\"type\":\"object\",\"required\":[\"org\"],\"properties\":{\"org\":{\"$ref\":\"#/components/schemas/Org\"}}}]},\"OrgWithWorkspaces\":{\"allOf\":[{\"$ref\":\"#/components/schemas/Org\"},{\"type\":\"object\",\"required\":[\"workspaces\"],\"properties\":{\"workspaces\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/WorkspaceWithDocs\"}}}}]},\"DocWithWorkspace\":{\"allOf\":[{\"$ref\":\"#/components/schemas/Doc\"},{\"type\":\"object\",\"required\":[\"workspace\"],\"properties\":{\"workspace\":{\"$ref\":\"#/components/schemas/WorkspaceWithOrg\"}}}]},\"User\":{\"type\":\"object\",\"required\":[\"id\",\"name\",\"picture\"],\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\",\"example\":101},\"name\":{\"type\":\"string\",\"example\":\"Helga Hufflepuff\"},\"picture\":{\"type\":\"string\",\"nullable\":true,\"example\":null}}},\"Access\":{\"type\":\"string\",\"enum\":[\"owners\",\"editors\",\"viewers\"]},\"Data\":{\"type\":\"object\",\"required\":[\"id\"],\"properties\":{\"id\":{\"type\":\"array\",\"items\":{\"type\":\"integer\"}}},\"additionalProperties\":{\"type\":\"array\",\"items\":{}},\"example\":{\"id\":[1,2],\"pet\":[\"cat\",\"dog\"],\"popularity\":[67,95]}},\"DataWithoutId\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"array\",\"items\":{}},\"example\":{\"id\":[1,2],\"pet\":[\"cat\",\"dog\"],\"popularity\":[67,95]}},\"RowIds\":{\"type\":\"array\",\"example\":[101,102,103],\"items\":{\"type\":\"integer\"}},\"DocParameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"example\":\"Competitive Analysis\"},\"isPinned\":{\"type\":\"boolean\",\"example\":false}}},\"WorkspaceParameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"example\":\"Retreat Docs\"}}},\"OrgParameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"example\":\"ACME Unlimited\"}}},\"OrgAccessRead\":{\"type\":\"object\",\"required\":[\"users\"],\"properties\":{\"users\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"id\",\"name\"],\"properties\":{\"id\":{\"type\":\"integer\",\"example\":1},\"name\":{\"type\":\"string\",\"example\":\"Andrea\"},\"email\":{\"type\":\"string\",\"example\":\"andrea@getgrist.com\"},\"access\":{\"$ref\":\"#/components/schemas/Access\"}}}}}},\"OrgAccessWrite\":{\"type\":\"object\",\"required\":[\"users\"],\"properties\":{\"users\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\",\"enum\":[\"owners\",\"editors\",\"viewers\",\"members\",null]},\"example\":{\"foo@getgrist.com\":\"owners\",\"bar@getgrist.com\":null}}}},\"WorkspaceAccessRead\":{\"type\":\"object\",\"required\":[\"maxInheritedRole\",\"users\"],\"properties\":{\"maxInheritedRole\":{\"$ref\":\"#/components/schemas/Access\"},\"users\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"id\",\"name\"],\"properties\":{\"id\":{\"type\":\"integer\",\"example\":1},\"name\":{\"type\":\"string\",\"example\":\"Andrea\"},\"email\":{\"type\":\"string\",\"example\":\"andrea@getgrist.com\"},\"access\":{\"$ref\":\"#/components/schemas/Access\"},\"parentAccess\":{\"$ref\":\"#/components/schemas/Access\"}}}}}},\"WorkspaceAccessWrite\":{\"type\":\"object\",\"properties\":{\"maxInheritedRole\":{\"$ref\":\"#/components/schemas/Access\"},\"users\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\",\"enum\":[\"owners\",\"editors\",\"viewers\",\"members\",null]},\"example\":{\"foo@getgrist.com\":\"owners\",\"bar@getgrist.com\":null}}}},\"DocAccessWrite\":{\"$ref\":\"#/components/schemas/WorkspaceAccessWrite\"},\"DocAccessRead\":{\"$ref\":\"#/components/schemas/WorkspaceAccessRead\"},\"AttachmentUpload\":{\"type\":\"object\",\"properties\":{\"upload\":{\"type\":\"array\",\"items\":{\"type\":\"File\"}}}},\"AttachmentId\":{\"type\":\"number\",\"description\":\"An integer ID\"},\"AttachmentMetadata\":{\"type\":\"object\",\"properties\":{\"fileName\":{\"type\":\"string\",\"example\":\"logo.png\"},\"fileSize\":{\"type\":\"number\",\"example\":12345},\"timeUploaded\":{\"type\":\"string\",\"example\":\"2020-02-13T12:17:19.000Z\"}}}}}}},\"searchIndex\":{\"store\":[\"section/Authentication\",\"tag/orgs\",\"tag/orgs/paths/~1orgs/get\",\"tag/orgs/paths/~1orgs~1{orgId}/get\",\"tag/orgs/paths/~1orgs~1{orgId}/patch\",\"tag/orgs/paths/~1orgs~1{orgId}~1access/get\",\"tag/orgs/paths/~1orgs~1{orgId}~1access/patch\",\"tag/orgs/paths/~1orgs~1{orgId}~1workspaces/get\",\"tag/workspaces\",\"tag/workspaces/paths/~1orgs~1{orgId}~1workspaces/post\",\"tag/workspaces/paths/~1workspaces~1{workspaceId}/get\",\"tag/workspaces/paths/~1workspaces~1{workspaceId}/patch\",\"tag/workspaces/paths/~1workspaces~1{workspaceId}/delete\",\"tag/workspaces/paths/~1workspaces~1{workspaceId}~1access/get\",\"tag/workspaces/paths/~1workspaces~1{workspaceId}~1access/patch\",\"tag/docs\",\"tag/docs/paths/~1workspaces~1{workspaceId}/post\",\"tag/docs/paths/~1docs~1{docId}/get\",\"tag/docs/paths/~1docs~1{docId}/patch\",\"tag/docs/paths/~1docs~1{docId}/delete\",\"tag/docs/paths/~1docs~1{docId}~1move/patch\",\"tag/docs/paths/~1docs~1{docId}~1access/get\",\"tag/docs/paths/~1docs~1{docId}~1access/patch\",\"tag/docs/paths/~1docs~1{docId}~1download/get\",\"tag/Data-Tables\",\"tag/Data-Tables/paths/~1docs~1{docId}~1tables~1{tableId}~1data/get\",\"tag/Data-Tables/paths/~1docs~1{docId}~1tables~1{tableId}~1data/post\",\"tag/Data-Tables/paths/~1docs~1{docId}~1tables~1{tableId}~1data/patch\",\"tag/Attachments\",\"tag/Attachments/paths/~1docs~1{docId}~1attachments/post\",\"tag/Attachments/paths/~1docs~1{docId}~1attachments~1{attachmentId}/get\",\"tag/Attachments/paths/~1docs~1{docId}~1attachments~1{attachmentId}~1download/get\"],\"index\":{\"version\":\"2.3.6\",\"fields\":[\"title\",\"description\"],\"fieldVectors\":[[\"title/0\",[0,4.169]],[\"description/0\",[1,2.765,2,1.736,3,1.736]],[\"title/1\",[4,1.68]],[\"description/1\",[4,0.466,5,0.965,6,0.839,7,0.965,8,1.156,9,0.965,10,1.156]],[\"title/2\",[4,1.195,11,1.719,12,1.421]],[\"description/2\",[5,1.086,6,0.944,7,1.086,13,1.301,14,1.301,15,1.301]],[\"title/3\",[4,1.396,16,2.516]],[\"description/3\",[]],[\"title/4\",[4,1.396,17,2.234]],[\"description/4\",[]],[\"title/5\",[4,1.044,11,1.502,12,1.242,18,1.881]],[\"description/5\",[]],[\"title/6\",[4,1.195,12,1.421,19,2.153]],[\"description/6\",[]],[\"title/7\",[4,0.927,11,1.334,20,0.785,21,0.665,22,2.301]],[\"description/7\",[]],[\"title/8\",[20,1.422]],[\"description/8\",[6,0.944,9,1.086,20,0.444,21,0.376,23,1.301,24,1.301]],[\"title/9\",[20,1.011,25,2.475,26,2.475]],[\"description/9\",[]],[\"title/10\",[16,2.516,20,1.182]],[\"description/10\",[]],[\"title/11\",[17,2.234,20,1.182]],[\"description/11\",[]],[\"title/12\",[20,1.182,27,2.893]],[\"description/12\",[]],[\"title/13\",[11,1.502,12,1.242,18,1.881,20,0.884]],[\"description/13\",[]],[\"title/14\",[12,1.421,19,2.153,20,1.011]],[\"description/14\",[]],[\"title/15\",[28,3.48]],[\"description/15\",[20,0.507,21,0.43,29,1.241,30,1.487,31,1.487]],[\"title/16\",[21,0.858,25,2.475,26,2.475]],[\"description/16\",[]],[\"title/17\",[16,2.516,21,1.002]],[\"description/17\",[]],[\"title/18\",[17,1.67,21,0.749,32,2.163,33,1.881]],[\"description/18\",[]],[\"title/19\",[21,1.002,27,2.893]],[\"description/19\",[]],[\"title/20\",[4,0.834,20,0.706,21,0.598,34,2.069,35,2.069,36,2.069]],[\"description/20\",[]],[\"title/21\",[11,1.502,12,1.242,18,1.881,21,0.749]],[\"description/21\",[]],[\"title/22\",[12,1.421,19,2.153,21,0.858]],[\"description/22\",[]],[\"title/23\",[21,0.749,33,1.881,37,2.591,38,2.163]],[\"description/23\",[]],[\"title/24\",[39,2.234,40,2.009]],[\"description/24\",[21,0.43,29,1.241,39,0.959,40,0.862,41,1.241]],[\"title/25\",[39,1.912,40,1.719,42,2.966]],[\"description/25\",[]],[\"title/26\",[40,1.719,43,2.966,44,2.475]],[\"description/26\",[]],[\"title/27\",[17,1.912,40,1.719,44,2.475]],[\"description/27\",[]],[\"title/28\",[45,2.417]],[\"description/28\",[21,0.231,38,0.668,39,0.516,41,0.668,45,0.83,46,0.8,47,0.8,48,0.8,49,0.8,50,0.8]],[\"title/29\",[28,2.475,45,1.719,51,2.966]],[\"description/29\",[]],[\"title/30\",[32,2.893,45,2.009]],[\"description/30\",[]],[\"title/31\",[33,2.153,45,1.719,52,2.966]],[\"description/31\",[]]],\"invertedIndex\":[[\"\",{\"_index\":1,\"title\":{},\"description\":{\"0\":{}}}],[\"access\",{\"_index\":12,\"title\":{\"2\":{},\"5\":{},\"6\":{},\"13\":{},\"14\":{},\"21\":{},\"22\":{}},\"description\":{}}],[\"add\",{\"_index\":43,\"title\":{\"26\":{}},\"description\":{}}],[\"anoth\",{\"_index\":35,\"title\":{\"20\":{}},\"description\":{}}],[\"api\",{\"_index\":10,\"title\":{},\"description\":{\"1\":{}}}],[\"area\",{\"_index\":14,\"title\":{},\"description\":{\"2\":{}}}],[\"attach\",{\"_index\":45,\"title\":{\"28\":{},\"29\":{},\"30\":{},\"31\":{}},\"description\":{\"28\":{}}}],[\"authent\",{\"_index\":0,\"title\":{\"0\":{}},\"description\":{}}],[\"avail\",{\"_index\":15,\"title\":{},\"description\":{\"2\":{}}}],[\"call\",{\"_index\":9,\"title\":{},\"description\":{\"1\":{},\"8\":{}}}],[\"chang\",{\"_index\":19,\"title\":{\"6\":{},\"14\":{},\"22\":{}},\"description\":{}}],[\"collect\",{\"_index\":30,\"title\":{},\"description\":{\"15\":{}}}],[\"column\",{\"_index\":49,\"title\":{},\"description\":{\"28\":{}}}],[\"contain\",{\"_index\":29,\"title\":{},\"description\":{\"15\":{},\"24\":{}}}],[\"content\",{\"_index\":33,\"title\":{\"18\":{},\"23\":{},\"31\":{}},\"description\":{}}],[\"creat\",{\"_index\":25,\"title\":{\"9\":{},\"16\":{}},\"description\":{}}],[\"data\",{\"_index\":39,\"title\":{\"24\":{},\"25\":{}},\"description\":{\"24\":{},\"28\":{}}}],[\"delet\",{\"_index\":27,\"title\":{\"12\":{},\"19\":{}},\"description\":{}}],[\"describ\",{\"_index\":16,\"title\":{\"3\":{},\"10\":{},\"17\":{}},\"description\":{}}],[\"doc\",{\"_index\":28,\"title\":{\"15\":{},\"29\":{}},\"description\":{}}],[\"document\",{\"_index\":21,\"title\":{\"7\":{},\"16\":{},\"17\":{},\"18\":{},\"19\":{},\"20\":{},\"21\":{},\"22\":{},\"23\":{}},\"description\":{\"8\":{},\"15\":{},\"24\":{},\"28\":{}}}],[\"download\",{\"_index\":52,\"title\":{\"31\":{}},\"description\":{}}],[\"empti\",{\"_index\":26,\"title\":{\"9\":{},\"16\":{}},\"description\":{}}],[\"enumer\",{\"_index\":13,\"title\":{},\"description\":{\"2\":{}}}],[\"fetch\",{\"_index\":42,\"title\":{\"25\":{}},\"description\":{}}],[\"file\",{\"_index\":38,\"title\":{\"23\":{}},\"description\":{\"28\":{}}}],[\"grist\",{\"_index\":31,\"title\":{},\"description\":{\"15\":{}}}],[\"group\",{\"_index\":24,\"title\":{},\"description\":{\"8\":{}}}],[\"includ\",{\"_index\":46,\"title\":{},\"description\":{\"28\":{}}}],[\"list\",{\"_index\":11,\"title\":{\"2\":{},\"5\":{},\"7\":{},\"13\":{},\"21\":{}},\"description\":{}}],[\"metadata\",{\"_index\":32,\"title\":{\"18\":{},\"30\":{}},\"description\":{}}],[\"modifi\",{\"_index\":17,\"title\":{\"4\":{},\"11\":{},\"18\":{},\"27\":{}},\"description\":{}}],[\"move\",{\"_index\":34,\"title\":{\"20\":{}},\"description\":{}}],[\"org\",{\"_index\":4,\"title\":{\"1\":{},\"2\":{},\"3\":{},\"4\":{},\"5\":{},\"6\":{},\"7\":{},\"20\":{}},\"description\":{\"1\":{}}}],[\"organ\",{\"_index\":23,\"title\":{},\"description\":{\"8\":{}}}],[\"person\",{\"_index\":7,\"title\":{},\"description\":{\"1\":{},\"2\":{}}}],[\"record\",{\"_index\":41,\"title\":{},\"description\":{\"24\":{},\"28\":{}}}],[\"redoc-inject\",{\"_index\":2,\"title\":{},\"description\":{\"0\":{}}}],[\"refer\",{\"_index\":47,\"title\":{},\"description\":{\"28\":{}}}],[\"row\",{\"_index\":44,\"title\":{\"26\":{},\"27\":{}},\"description\":{}}],[\"same\",{\"_index\":36,\"title\":{\"20\":{}},\"description\":{}}],[\"security-definit\",{\"_index\":3,\"title\":{},\"description\":{\"0\":{}}}],[\"site\",{\"_index\":6,\"title\":{},\"description\":{\"1\":{},\"2\":{},\"8\":{}}}],[\"space\",{\"_index\":8,\"title\":{},\"description\":{\"1\":{}}}],[\"sqlite\",{\"_index\":37,\"title\":{\"23\":{}},\"description\":{}}],[\"tabl\",{\"_index\":40,\"title\":{\"24\":{},\"25\":{},\"26\":{},\"27\":{}},\"description\":{\"24\":{}}}],[\"team\",{\"_index\":5,\"title\":{},\"description\":{\"1\":{},\"2\":{}}}],[\"type\",{\"_index\":50,\"title\":{},\"description\":{\"28\":{}}}],[\"upload\",{\"_index\":51,\"title\":{\"29\":{}},\"description\":{}}],[\"us\",{\"_index\":48,\"title\":{},\"description\":{\"28\":{}}}],[\"user\",{\"_index\":18,\"title\":{\"5\":{},\"13\":{},\"21\":{}},\"description\":{}}],[\"within\",{\"_index\":22,\"title\":{\"7\":{}},\"description\":{}}],[\"workspac\",{\"_index\":20,\"title\":{\"7\":{},\"8\":{},\"9\":{},\"10\":{},\"11\":{},\"12\":{},\"13\":{},\"14\":{},\"20\":{}},\"description\":{\"8\":{},\"15\":{}}}]],\"pipeline\":[]}},\"options\":{\"theme\":{\"spacing\":{\"sectionVertical\":2},\"breakpoints\":{\"medium\":\"50rem\",\"large\":\"50rem\"},\"menu\":{\"width\":\"0px\"}},\"hideDownloadButton\":true,\"pathInMiddlePanel\":true}}; var container = document.getElementById('redoc'); Redoc.hydrate(__redoc_state, container);;","title":"API reference"},{"location":"col-refs/","text":"Reference columns # Overview # Reference columns in Grist allow one table to create an explicit reference to another. In the database world this is similar to a foreign key. In the spreadsheet world this is similar to a VLOOKUP , but much more powerful and easier to use. In this guide we\u2019ll use the term underlying table for the table that lists all available values, and referencing table for the table that uses those values. Creating a new reference column # Suppose we have a document with two tables, Clients and Projects. The Clients table lists our clients - names, contacts, signing dates - and the Projects table lists projects we do for clients. There are all sorts of things Grist can do for us if we let it know that the Client column in the Projects table is referring to clients listed in the Clients table. We can do this by converting the Client column to a \u201creference column\u201d. Open the Column Options side panel (see Specifying a type ) and set the \u201cColumn Type\u201d to \u201cReference\u201d. Adjust the \u201cData from Table\u201d option to be the correct table you want to cross-reference, and the \u201cShow Column\u201d option to match which column of that table you\u2019d like to show. Then hit \u201cApply\u201d when you\u2019re happy with the result. Understanding the reference The column value always references the entire record in the underlying table. The displayed value can be any column from that record, as selected in Show Column . You can also include additional columns to display as explained later. In our example, you can see little link icons appearing in the Client column cells, showing that they have been successfully cross-referenced with the Clients table. Once the column type is set, you can start typing into it or double-click it to see a dropdown list of all available values. Spotting reference columns You can tell that the values in a column represent a reference by the link icon that appears next to the values. If you accidentally type in a value that is not present in the Clients table, its value will be highlighted as invalid: Adding values to a reference column # Sometimes it\u2019s useful to add a new value to the dropdown list without having to switch to the underlying table. Reference columns make it easy! Just type in the value you want add and select the + value in the dropdown list. Grist will automatically add a new record containing this value to the underlying table and insert the proper reference: Converting text column to reference # When working with existing data, it\u2019s common to have existing text values that should really be reference values. Don\u2019t worry, conversion is simple! Just change the column type to Reference and Grist will automatically find and substitute matching values for references. If some values are not found, they\u2019ll be shown as invalid. You can then either add them to the underlying table or select the proper values for them. In this example, the first three values match perfectly, but Forest Labs is invalid because it doesn\u2019t exist in the Clients table: Including multiple fields from a reference # A big benefit of reference columns is that they allow you to easily bring in multiple columns from the underlying table. In our example, if you wanted to bring in $Client.Contact to the Projects table, you can just select the Contact column from the Add Reference Columns section and it will be automatically added to the Projects table: If you\u2019re comfortable using formulas, you can see that the added column is just the formula =$Client.Contact . If you were so inclined, you could achieve the same result by manually adding the formula column. You can also use any other fields from Clients table by referencing $Client in formulas in the Projects table. Using references in formulas You may have noticed that the underlying table is Clients (plural) but the formula is $Client.Contact (singular). That\u2019s because the formula refers to the referencing column, not the underlying table. In our example, the referencing column is Client .","title":"Reference columns"},{"location":"col-refs/#reference-columns","text":"","title":"Reference columns"},{"location":"col-refs/#overview","text":"Reference columns in Grist allow one table to create an explicit reference to another. In the database world this is similar to a foreign key. In the spreadsheet world this is similar to a VLOOKUP , but much more powerful and easier to use. In this guide we\u2019ll use the term underlying table for the table that lists all available values, and referencing table for the table that uses those values.","title":"Overview"},{"location":"col-refs/#creating-a-new-reference-column","text":"Suppose we have a document with two tables, Clients and Projects. The Clients table lists our clients - names, contacts, signing dates - and the Projects table lists projects we do for clients. There are all sorts of things Grist can do for us if we let it know that the Client column in the Projects table is referring to clients listed in the Clients table. We can do this by converting the Client column to a \u201creference column\u201d. Open the Column Options side panel (see Specifying a type ) and set the \u201cColumn Type\u201d to \u201cReference\u201d. Adjust the \u201cData from Table\u201d option to be the correct table you want to cross-reference, and the \u201cShow Column\u201d option to match which column of that table you\u2019d like to show. Then hit \u201cApply\u201d when you\u2019re happy with the result. Understanding the reference The column value always references the entire record in the underlying table. The displayed value can be any column from that record, as selected in Show Column . You can also include additional columns to display as explained later. In our example, you can see little link icons appearing in the Client column cells, showing that they have been successfully cross-referenced with the Clients table. Once the column type is set, you can start typing into it or double-click it to see a dropdown list of all available values. Spotting reference columns You can tell that the values in a column represent a reference by the link icon that appears next to the values. If you accidentally type in a value that is not present in the Clients table, its value will be highlighted as invalid:","title":"Creating a new reference column"},{"location":"col-refs/#adding-values-to-a-reference-column","text":"Sometimes it\u2019s useful to add a new value to the dropdown list without having to switch to the underlying table. Reference columns make it easy! Just type in the value you want add and select the + value in the dropdown list. Grist will automatically add a new record containing this value to the underlying table and insert the proper reference:","title":"Adding values to a reference column"},{"location":"col-refs/#converting-text-column-to-reference","text":"When working with existing data, it\u2019s common to have existing text values that should really be reference values. Don\u2019t worry, conversion is simple! Just change the column type to Reference and Grist will automatically find and substitute matching values for references. If some values are not found, they\u2019ll be shown as invalid. You can then either add them to the underlying table or select the proper values for them. In this example, the first three values match perfectly, but Forest Labs is invalid because it doesn\u2019t exist in the Clients table:","title":"Converting text column to reference"},{"location":"col-refs/#including-multiple-fields-from-a-reference","text":"A big benefit of reference columns is that they allow you to easily bring in multiple columns from the underlying table. In our example, if you wanted to bring in $Client.Contact to the Projects table, you can just select the Contact column from the Add Reference Columns section and it will be automatically added to the Projects table: If you\u2019re comfortable using formulas, you can see that the added column is just the formula =$Client.Contact . If you were so inclined, you could achieve the same result by manually adding the formula column. You can also use any other fields from Clients table by referencing $Client in formulas in the Projects table. Using references in formulas You may have noticed that the underlying table is Clients (plural) but the formula is $Client.Contact (singular). That\u2019s because the formula refers to the referencing column, not the underlying table. In our example, the referencing column is Client .","title":"Including multiple fields from a reference"},{"location":"col-transform/","text":"Column Transformations # Grist offers two ways to transform all values in a column. One is to change the type of the column, and the other is to apply a formula-based transformation. Type conversions # When converting between different column types, Grist has sensible default behavior, but makes that behavior easy to revise. For example, suppose you have a column of integers. To convert that column to text, open the column options as described in Specifying a type , and find the column type section. Change the column type to text in the dropdown. You\u2019ll notice that a \u201ccancel/revise/apply\u201d dialog opens beside the dropdown. To change how the conversion is done, click Revise . You\u2019ll see a formula box with the default conversion method, grist.Text.typeConvert($tally) . This means \u201cdo default conversion to text for the tally column\u201d. you can replace this with any formula you like. For example: Code for converting to unicode tally lines is left as an exercise to the reader. To preview the results of the conversion, click \u201cpreview\u201d. When you are satisfied with the conversion, click \u201capply\u201d. To abandon the conversion, click \u201ccancel\u201d. Formula-based transforms # Spreadsheets are convenient tools for cleaning up data using formulas . For example, imagine you had zip codes that have lost leading zeros - you can easily reformat them with a quick formula: We could now freeze the results and delete the original data if we don\u2019t need it anymore. If you know you\u2019re going to throw away the original data like this, Grist offers column transformations as a faster way to systematically modify all cells of a column. Find the \u201cTransform\u201d section at the bottom of the column options side panel (see Columns for how to open this panel). When you click the orange \u201clightning\u201d button, Grist prompts you with a formula, return $zip in this case. You can edit this formula to make some change to the selected column. For example return $zip + 1 would add one to the zip code. You can preview the effect your formula would have, and when you are happy, hit \u201cApply\u201d. In our case, where we want to add leading zeros, we\u2019ll need to first change our column type to be Text (assuming it is currently Integer - if it Numeric convert to Integer first and then to Text to avoid decimal points). Once done, we can use our formula for adding leading zeros: When happy, press \u201cApply\u201d to replace the cell values with their new versions. Likewise, the response column could be transformed with the formula into true/false values with $response[0] == 'y' , and then set as a toggle column .","title":"Transformations"},{"location":"col-transform/#type-conversions","text":"When converting between different column types, Grist has sensible default behavior, but makes that behavior easy to revise. For example, suppose you have a column of integers. To convert that column to text, open the column options as described in Specifying a type , and find the column type section. Change the column type to text in the dropdown. You\u2019ll notice that a \u201ccancel/revise/apply\u201d dialog opens beside the dropdown. To change how the conversion is done, click Revise . You\u2019ll see a formula box with the default conversion method, grist.Text.typeConvert($tally) . This means \u201cdo default conversion to text for the tally column\u201d. you can replace this with any formula you like. For example: Code for converting to unicode tally lines is left as an exercise to the reader. To preview the results of the conversion, click \u201cpreview\u201d. When you are satisfied with the conversion, click \u201capply\u201d. To abandon the conversion, click \u201ccancel\u201d.","title":"Type conversions"},{"location":"col-transform/#formula-based-transforms","text":"Spreadsheets are convenient tools for cleaning up data using formulas . For example, imagine you had zip codes that have lost leading zeros - you can easily reformat them with a quick formula: We could now freeze the results and delete the original data if we don\u2019t need it anymore. If you know you\u2019re going to throw away the original data like this, Grist offers column transformations as a faster way to systematically modify all cells of a column. Find the \u201cTransform\u201d section at the bottom of the column options side panel (see Columns for how to open this panel). When you click the orange \u201clightning\u201d button, Grist prompts you with a formula, return $zip in this case. You can edit this formula to make some change to the selected column. For example return $zip + 1 would add one to the zip code. You can preview the effect your formula would have, and when you are happy, hit \u201cApply\u201d. In our case, where we want to add leading zeros, we\u2019ll need to first change our column type to be Text (assuming it is currently Integer - if it Numeric convert to Integer first and then to Text to avoid decimal points). Once done, we can use our formula for adding leading zeros: When happy, press \u201cApply\u201d to replace the cell values with their new versions. Likewise, the response column could be transformed with the formula into true/false values with $response[0] == 'y' , and then set as a toggle column .","title":"Formula-based transforms"},{"location":"col-types/","text":"Columns and data types # Adding and removing columns # Every Grist table, when first created, has three columns called A, B, and C. To rename a column, hover on the column header, click on the drop-down, then select \u201cRename column\u201d (you can also just click on the column header twice). To delete a column, hover on the column header, click on the drop-down, then select \u201cDelete column\u201d. To add a column, click on the \u201c+\u201d symbol in the header row, then type in the column name. To reorder a column, first select the column if it isn\u2019t already selected, by clicking on the column header. Next, click and hold on the column header. After a second or two, you\u2019ll be able to drag the entire column to its new location. Another way to reorder columns is via the widget options: In the visible columns section, the columns can be dragged around freely to reorder them. You can also hide columns here. Renaming columns # You can rename columns in several ways. One way is to click on the column header when the column is already selected. Another is to hover on the column header, click on the drop-down, then select \u201cRename Column\u201d. Another is by selecting \u201cColumn Options\u201d in the same drop-down, and editing the \u201cField\u201d name shown at the top. A bonus with this method is that you can also control the identifier given to the column in formulas. By default this is based on the field name, with any characters Python doesn\u2019t like replaced with \u201c_\u201c, and a number added if needed to keep the name unique within your table. If you don\u2019t like this identifier, you can change it, though it will still need to be Python-friendly. To change the name, deselect \u201cUse Name as ID\u201d if it is selected, and edit the \u201cID\u201d entry now shown. Specifying a type # Grist columns have types, similar to other spreadsheets or databases. The type of a column controls its appearance and the help Grist will offer you when editing cells. When you create a new column, it initially has the Any type. When you enter the column\u2019s first cell, Grist tries to narrow this type. If you enter a number, the column will be changed to Numeric type, which is right-aligned by default. If you enter something that doesn\u2019t look like a number, the column will be changed to Text type, which is left-aligned by default. To inspect the type of a column, hover over the column header, then click on the drop-down, then select \u201cColumn Options\u201d. The \u201cColumn Type\u201d section is what you are looking for. You will often want to control the column type manually. You can change it in the \u201cColumn Type\u201d section. For example, here we set a column full of \u201cyes\u201d and \u201cno\u201d responses to be of type Toggle : One advantage of doing so is that Grist can now offer you ways to visualize the column that are specialized to on/off style values. Each column type has different options in the \u201cCell Format\u201d section of the side panel: Regardless of the column type, you can enter any value in cells. If a value entered is incompatible with the defined type, the cell will be highlighted with an error (and columns referencing the invalid value will also display an error): Supported types # Grist supports the following types: Type Description Text ( Default ) Any string of text. Numeric Floating point numbers. Integer Integers (whole numbers). Toggle Boolean (True / False) Date Valid date (without a time component). DateTime Valid date + time. Choice List of pre-defined valid values. Reference A reference column to another table. Attachment Cells where you can place files or images. Text columns # You can put any text you like in this type of column. For formatting, you can control alignment and word-wrap, text color and background color. If the column is used for storing web links, you can turn on \u201cHyperLink\u201d formatting to make that prettier. Numeric columns # This type is for floating point numbers, and can also be used with whole numbers. As for text, you can control alignment and color. You can also choose whether to show arrows for increasing/decreasing the number (this is the \u201cSpinner\u201d option). And you can set a minimum and maximum number of decimal points to show. Integer columns # This is strictly for whole numbers. It has the same options as the numeric type. Toggle columns # This type is for storing true/false values. The values can be shown as text, checkboxes, or switches. See also example in Specifying a type . Date columns # This type is for storing calendar dates (without a time of day component). More details in Working with dates . You can choose the format for dates, see the date formatting reference . DateTime columns # This type is for storing calendar dates plus time of day. More details in Working with dates . You can choose the format for dates, see the date and time formatting reference . You can also specify the timezone to display for. Choice columns # This type is for storing one of a set of valid values, where you get to specify the available values. There\u2019s an example of using this type of column in the Lightweight CRM example . If you start off with a populated text column, Grist will take all unique values from that column as the valid choices. You can add or remove choices as you wish. Reference columns # This sets up a cross-reference to another table. You can specify the table to reference, and a column within that table to show. There\u2019s a lot you can do with this kind of column, see Reference columns for details. Attachment columns # This column type lets you insert entire files and images in cells. When images are added in cells, a preview thumbnail is shown in the cell. The \u201cSize\u201d bar gives control of the scale of this thumbnail. When you create an attachment column, cells of that column will have a paperclip icon: When you click on a paperclip icon, you can select a file to attach. If it is an image, you\u2019ll see a thumbnail of it in the cell. If you hover over the image, you\u2019ll see a paperclip icon again, which you can use to add more files to the same cell. You\u2019ll also see an \u201copen-eye\u201d icon, which when clicked brings up a larger view of all of the cell\u2019s attachments, and gives you a way to rename them, download them, or remove them.","title":"Columns & types"},{"location":"col-types/#columns-and-data-types","text":"","title":"Columns and data types"},{"location":"col-types/#adding-and-removing-columns","text":"Every Grist table, when first created, has three columns called A, B, and C. To rename a column, hover on the column header, click on the drop-down, then select \u201cRename column\u201d (you can also just click on the column header twice). To delete a column, hover on the column header, click on the drop-down, then select \u201cDelete column\u201d. To add a column, click on the \u201c+\u201d symbol in the header row, then type in the column name. To reorder a column, first select the column if it isn\u2019t already selected, by clicking on the column header. Next, click and hold on the column header. After a second or two, you\u2019ll be able to drag the entire column to its new location. Another way to reorder columns is via the widget options: In the visible columns section, the columns can be dragged around freely to reorder them. You can also hide columns here.","title":"Adding and removing columns"},{"location":"col-types/#renaming-columns","text":"You can rename columns in several ways. One way is to click on the column header when the column is already selected. Another is to hover on the column header, click on the drop-down, then select \u201cRename Column\u201d. Another is by selecting \u201cColumn Options\u201d in the same drop-down, and editing the \u201cField\u201d name shown at the top. A bonus with this method is that you can also control the identifier given to the column in formulas. By default this is based on the field name, with any characters Python doesn\u2019t like replaced with \u201c_\u201c, and a number added if needed to keep the name unique within your table. If you don\u2019t like this identifier, you can change it, though it will still need to be Python-friendly. To change the name, deselect \u201cUse Name as ID\u201d if it is selected, and edit the \u201cID\u201d entry now shown.","title":"Renaming columns"},{"location":"col-types/#specifying-a-type","text":"Grist columns have types, similar to other spreadsheets or databases. The type of a column controls its appearance and the help Grist will offer you when editing cells. When you create a new column, it initially has the Any type. When you enter the column\u2019s first cell, Grist tries to narrow this type. If you enter a number, the column will be changed to Numeric type, which is right-aligned by default. If you enter something that doesn\u2019t look like a number, the column will be changed to Text type, which is left-aligned by default. To inspect the type of a column, hover over the column header, then click on the drop-down, then select \u201cColumn Options\u201d. The \u201cColumn Type\u201d section is what you are looking for. You will often want to control the column type manually. You can change it in the \u201cColumn Type\u201d section. For example, here we set a column full of \u201cyes\u201d and \u201cno\u201d responses to be of type Toggle : One advantage of doing so is that Grist can now offer you ways to visualize the column that are specialized to on/off style values. Each column type has different options in the \u201cCell Format\u201d section of the side panel: Regardless of the column type, you can enter any value in cells. If a value entered is incompatible with the defined type, the cell will be highlighted with an error (and columns referencing the invalid value will also display an error):","title":"Specifying a type"},{"location":"col-types/#supported-types","text":"Grist supports the following types: Type Description Text ( Default ) Any string of text. Numeric Floating point numbers. Integer Integers (whole numbers). Toggle Boolean (True / False) Date Valid date (without a time component). DateTime Valid date + time. Choice List of pre-defined valid values. Reference A reference column to another table. Attachment Cells where you can place files or images.","title":"Supported types"},{"location":"col-types/#text-columns","text":"You can put any text you like in this type of column. For formatting, you can control alignment and word-wrap, text color and background color. If the column is used for storing web links, you can turn on \u201cHyperLink\u201d formatting to make that prettier.","title":"Text columns"},{"location":"col-types/#numeric-columns","text":"This type is for floating point numbers, and can also be used with whole numbers. As for text, you can control alignment and color. You can also choose whether to show arrows for increasing/decreasing the number (this is the \u201cSpinner\u201d option). And you can set a minimum and maximum number of decimal points to show.","title":"Numeric columns"},{"location":"col-types/#integer-columns","text":"This is strictly for whole numbers. It has the same options as the numeric type.","title":"Integer columns"},{"location":"col-types/#toggle-columns","text":"This type is for storing true/false values. The values can be shown as text, checkboxes, or switches. See also example in Specifying a type .","title":"Toggle columns"},{"location":"col-types/#date-columns","text":"This type is for storing calendar dates (without a time of day component). More details in Working with dates . You can choose the format for dates, see the date formatting reference .","title":"Date columns"},{"location":"col-types/#datetime-columns","text":"This type is for storing calendar dates plus time of day. More details in Working with dates . You can choose the format for dates, see the date and time formatting reference . You can also specify the timezone to display for.","title":"DateTime columns"},{"location":"col-types/#choice-columns","text":"This type is for storing one of a set of valid values, where you get to specify the available values. There\u2019s an example of using this type of column in the Lightweight CRM example . If you start off with a populated text column, Grist will take all unique values from that column as the valid choices. You can add or remove choices as you wish.","title":"Choice columns"},{"location":"col-types/#reference-columns","text":"This sets up a cross-reference to another table. You can specify the table to reference, and a column within that table to show. There\u2019s a lot you can do with this kind of column, see Reference columns for details.","title":"Reference columns"},{"location":"col-types/#attachment-columns","text":"This column type lets you insert entire files and images in cells. When images are added in cells, a preview thumbnail is shown in the cell. The \u201cSize\u201d bar gives control of the scale of this thumbnail. When you create an attachment column, cells of that column will have a paperclip icon: When you click on a paperclip icon, you can select a file to attach. If it is an image, you\u2019ll see a thumbnail of it in the cell. If you hover over the image, you\u2019ll see a paperclip icon again, which you can use to add more files to the same cell. You\u2019ll also see an \u201copen-eye\u201d icon, which when clicked brings up a larger view of all of the cell\u2019s attachments, and gives you a way to rename them, download them, or remove them.","title":"Attachment columns"},{"location":"creating-doc/","text":"Creating a document # To get started with Grist you\u2019ll first need to create a document. Each document can store different kinds of data, so think of it as a collection of related data. You can start from scratch or import existing data. Click the \u201cAdd New\u201d button on the home screen and choose either \u201cCreate empty document\u201d or \u201cImport document\u201d. You can import spreadsheets in Excel format, as well as comma-separated value files or CSVs. If you import a spreadsheet that has multiple tabs, each tab will become a separate table in Grist. Examples and templates # The \u201cExamples & Templates\u201d list on the Grist homepage includes a number of Grist documents that demonstrate Grist features and use cases. These are always accessible via a link on the bottom left of the home page. For each example, there is a corresponding How-To Tutorial in the Grist Help Center, which describes how to use it or how to build such a document from scratch. You can open any of the examples in view-only mode, or click \u201cMake own copy\u201d and select \u201cCopy full document\u201d to get an editable copy. You can also use any of the examples as a template for a new document, whch will include the structure, layout, and formulas of the example, but none of the sample data. Simply Click \u201cMake own copy\u201d and select \u201cCopy as template\u201d. Importing more data # Once you\u2019ve created a document, you can import more data into it by opening the document and selecting \u201cAdd New\u201d and then one of the Import options. You can read more about importing data at Importing more data .","title":"Creating a document"},{"location":"creating-doc/#creating-a-document","text":"To get started with Grist you\u2019ll first need to create a document. Each document can store different kinds of data, so think of it as a collection of related data. You can start from scratch or import existing data. Click the \u201cAdd New\u201d button on the home screen and choose either \u201cCreate empty document\u201d or \u201cImport document\u201d. You can import spreadsheets in Excel format, as well as comma-separated value files or CSVs. If you import a spreadsheet that has multiple tabs, each tab will become a separate table in Grist.","title":"Creating a document"},{"location":"creating-doc/#examples-and-templates","text":"The \u201cExamples & Templates\u201d list on the Grist homepage includes a number of Grist documents that demonstrate Grist features and use cases. These are always accessible via a link on the bottom left of the home page. For each example, there is a corresponding How-To Tutorial in the Grist Help Center, which describes how to use it or how to build such a document from scratch. You can open any of the examples in view-only mode, or click \u201cMake own copy\u201d and select \u201cCopy full document\u201d to get an editable copy. You can also use any of the examples as a template for a new document, whch will include the structure, layout, and formulas of the example, but none of the sample data. Simply Click \u201cMake own copy\u201d and select \u201cCopy as template\u201d.","title":"Examples and templates"},{"location":"creating-doc/#importing-more-data","text":"Once you\u2019ve created a document, you can import more data into it by opening the document and selecting \u201cAdd New\u201d and then one of the Import options. You can read more about importing data at Importing more data .","title":"Importing more data"},{"location":"custom-layouts/","text":"Custom Layouts # You can easily add multiple widgets to one page, as described in Page widgets , and link them as described in Linking widgets . It is also easy to customize their arrangement. Move the mouse cursor over the title of the widget. A small drag icon will appear over to the left of the title. When you press this icon, you can drag the entire widget to a different place on the screen. As you move it close to the edge of the screen, or the edge of another widget, you\u2019ll see a dashed outline \u2013 sometimes more than one \u2013 where the widget can be dropped. Release the mouse to reposition this widget. To resize widgets, move the mouse cursor between two widgets until a dashed line appear. Drag this dashed line to resize. Layout recommendations # While there is no limit to how complicated a layout you can create, you should aim for simple layouts that will be easy to use for your users (even when you are the only user!) One rule of thumb is that a widget controlled by another \u201cselector\u201d widget (see Linking widgets ) should be to the right or below it. Here are some common layouts. Layout: List and detail # The most common one is to have a list of items on the left, with one or more widgets on the right providing more information. For instance, the Lightweight CRM example includes a list of people on the left, with a person\u2019s card and a table of related interactions to the right of the list. In this usage, you might want to include in the list only the minimal information you need, perhaps only a contact\u2019s name. If your table has many columns, a quick way to leave only a few is via the widget options in the right-side panel. In the table widget, click the three-dot menu on the top right, and select \u201cWidget options\u201d. You\u2019ll see a list of \u201cVisible Columns\u201d. Click \u201cSelect all\u201d link on top of that list: Now uncheck the few fields you want to keep, and click \u201cHide columns\u201d to hide the rest. Layout: Spreadsheet plus # Sometimes a wide spreadsheet with many columns is convenient. If you\u2019d like to see more info associated with the rows of this spreadsheet, you can add widgets below it. These could be details linked to the spreadsheet, or summary tables that show totals or other global info. For instance, here is a possible layout based on the Lightweight CRM example. It shows contacts as a wide spreadsheet, and below that includes sections with an overall summary, and interactions for the selected contact. Layout: Summary and details # Sometimes it\u2019s useful to divide up a large dataset into subsets. For instance, you might have credit card transactions, and want a way to view them one month at a time. To do it, you\u2019ll use a \u201cMonth\u201d column, creating one with a formula if needed. Then create a summary table grouped by \u201cMonth\u201d (see Summary tables , and link the table of transactions to it. We can then select a month and see a spreadsheet of only the transactions in that month. Layout: Charts dashboard # If you have many charts, you can just lay them out in a grid to create a top-level dashboard. For dynamic charts in which data is selected by another table, a layout like List-and-detail above would work well. One tip is to include both a Table widget and a Chart widget, configured and linked the same way, and differing only in the widget type: Having a table alongside the chart can be a useful reference, as well as provide more context to what is visible in the chart.","title":"Custom layouts"},{"location":"custom-layouts/#custom-layouts","text":"You can easily add multiple widgets to one page, as described in Page widgets , and link them as described in Linking widgets . It is also easy to customize their arrangement. Move the mouse cursor over the title of the widget. A small drag icon will appear over to the left of the title. When you press this icon, you can drag the entire widget to a different place on the screen. As you move it close to the edge of the screen, or the edge of another widget, you\u2019ll see a dashed outline \u2013 sometimes more than one \u2013 where the widget can be dropped. Release the mouse to reposition this widget. To resize widgets, move the mouse cursor between two widgets until a dashed line appear. Drag this dashed line to resize.","title":"Custom Layouts"},{"location":"custom-layouts/#layout-recommendations","text":"While there is no limit to how complicated a layout you can create, you should aim for simple layouts that will be easy to use for your users (even when you are the only user!) One rule of thumb is that a widget controlled by another \u201cselector\u201d widget (see Linking widgets ) should be to the right or below it. Here are some common layouts.","title":"Layout recommendations"},{"location":"custom-layouts/#layout-list-and-detail","text":"The most common one is to have a list of items on the left, with one or more widgets on the right providing more information. For instance, the Lightweight CRM example includes a list of people on the left, with a person\u2019s card and a table of related interactions to the right of the list. In this usage, you might want to include in the list only the minimal information you need, perhaps only a contact\u2019s name. If your table has many columns, a quick way to leave only a few is via the widget options in the right-side panel. In the table widget, click the three-dot menu on the top right, and select \u201cWidget options\u201d. You\u2019ll see a list of \u201cVisible Columns\u201d. Click \u201cSelect all\u201d link on top of that list: Now uncheck the few fields you want to keep, and click \u201cHide columns\u201d to hide the rest.","title":"Layout: List and detail"},{"location":"custom-layouts/#layout-spreadsheet-plus","text":"Sometimes a wide spreadsheet with many columns is convenient. If you\u2019d like to see more info associated with the rows of this spreadsheet, you can add widgets below it. These could be details linked to the spreadsheet, or summary tables that show totals or other global info. For instance, here is a possible layout based on the Lightweight CRM example. It shows contacts as a wide spreadsheet, and below that includes sections with an overall summary, and interactions for the selected contact.","title":"Layout: Spreadsheet plus"},{"location":"custom-layouts/#layout-summary-and-details","text":"Sometimes it\u2019s useful to divide up a large dataset into subsets. For instance, you might have credit card transactions, and want a way to view them one month at a time. To do it, you\u2019ll use a \u201cMonth\u201d column, creating one with a formula if needed. Then create a summary table grouped by \u201cMonth\u201d (see Summary tables , and link the table of transactions to it. We can then select a month and see a spreadsheet of only the transactions in that month.","title":"Layout: Summary and details"},{"location":"custom-layouts/#layout-charts-dashboard","text":"If you have many charts, you can just lay them out in a grid to create a top-level dashboard. For dynamic charts in which data is selected by another table, a layout like List-and-detail above would work well. One tip is to include both a Table widget and a Chart widget, configured and linked the same way, and differing only in the widget type: Having a table alongside the chart can be a useful reference, as well as provide more context to what is visible in the chart.","title":"Layout: Charts dashboard"},{"location":"dates/","text":"Overview # Grist expresses dates and times in two ways. The first is the Date column type, which represents a calendar date, with no time of day, and not associated with any particular timezone. The second is the DateTime column type, which represents a calendar date with a time of day which can be linked with a timezone. The Date and DateTime column types support different formatting options. When a column is set to be a Date or a DateTime , a date-picker widget will let you select the date on a calendar when editing a cell. When working with dates in formulas, the dates are Python datetime objects . That allows you to do some powerful things, but can be unexpected if you\u2019re not familiar with them. Making a date/time column # For a general introduction to setting the type of columns, see Columns and data types . To tell Grist that you intend to enter only date/times in a column, over on the header for the column, find the drop-down, and select \u201cColumn Options\u201d. Then in the side panel that opens on the right, pick \u201cDate\u201d from the \u201cColumn Type\u201d drop-down. Or, if you want dates with times, pick \u201cDateTime\u201d. Then you can choose your preferred date/time format. For the \u201cDateTime\u201d type, you can also choose the timezone. When you convert a column from another type, such as \u201cText\u201d, you\u2019ll see a preview of the conversion results, and will need to click \u201cApply\u201d to complete conversion. You can come back and change settings at any time. Now when you edit a cell in this column, you will have help for selecting dates and times. Inserting the current date # You can insert the current date in a cell using \u2318 + ; (semicolon) (Mac) or Ctrl + ; (Windows). You can insert the current date and time using \u2318 + Shift + ; (Mac) or Ctrl + Shift + ; (Windows). When editing a date cell, the date entry widget has a \u201ctoday\u201d button for today\u2019s date. Parsing dates from strings # The DATEVALUE function converts a string that represents a date into a datetime object. It\u2019s simple to use and it will auto-detect different date formats: You can also use Python\u2019s datetime library, which provides two helpful functions: strptime() and strftime() . For example, let\u2019s say you have a table of movie sequels and their release dates (as strings). You\u2019d like to parse out the actual date to be able to sort the table properly. Here\u2019s how you would do that: First line imports the datetime library The second line splits the string into two parts and returns the second part (Python arrays are zero-based). The third line uses Python\u2019s strptime function to parse the date (e.g. \u201cMay 19, 1999\u201d) into a datetime object. The first parameter to the function is the string to parse, the second parameter is the date format that the string is in. Take a look at the format options to see if the example format string %B %d, %Y makes sense. (Note: You could\u2019ve also used DATEVALUE(d) to achieve the same result.) The result has a true date column and can now be properly sorted chronologically, with \u201cA New Hope\u201d at the top. For historical reasons, the first Star Wars movie is considered to be Episode 4. And, because the column type is selected as a date, you can use the \u201cDate Format\u201d in \u201cColumn Options\u201d to select the format in which to display the date. For some situations, you may wish to use the dateutil python library. For example, if you live in an area where dates typically start with the day and then the month, you could use this formula: import dateutil dateutil.parser.parse($date_text, dayfirst=True) Date arithmetic # Once you have a proper date column, often you\u2019ll want to do date arithmetic such as calculating the difference between two dates. The simplest way to do this is to use the DATEDIF function which takes two dates and the unit of information to return (Days, Months, or Years). You could also use the minus sign to subtract two dates, but you might be surprised at the result: This happens because subtracting two datetime objects as we did in the example above, results in a datetime.timedelta object which represents, \u201cA duration expressing the difference between two date, time, or datetime instances to microsecond resolution.\u201d In Grist (and Python) you have to be more specific above how you want to display the date difference. For example, to get the number of days from the returned timedelta object, use its .days property: If you want weeks or years, just divide by 7 or by 365. (Divide by 7.0 or 365.0 to include a fractional part in the result.) If you want hours, multiply by 24. You can also use specific functions to get what you want. For example, DAYS is a common function in spreadsheet apps that returns the difference between two dates: DAYS($Last_day, $First_day) Excel/Sheets formulas Grist supports many other common functions from other spreadsheet apps, including DATEADD , DATEDIF , DATEVALUE , MONTH , HOUR , and many more . Getting a part of the date # You\u2019ve seen how to parse the date, display it in different formats, and do date arithmetic. But what if you want to get more information about a specific date, such as getting its day of the week? One option is to use the WEEKDAY function, which behaves as it does in Excel, returning 1-7 for Sunday-Saturday. Alternatively, we can use the strftime function: Yet another option would be to reformat the date using Date Format in Column Options (see the date formatting reference ). Time zones # Values in DateTime columns represent moments in time. The same moment will look different in different timezones. In Grist, the timezone is set on each DateTime column. For instance, if the timezone is set to \u201cAmerica/New_York\u201d, it will show the values in New York timezone to collaborators anywhere in the world. A Grist document has a global timezone setting, which serves as the default timezone for when you create a new column of type DateTime . This global timezone is set to your local timezone when you first create a document. You can see or change it by clicking on your profile picture or icon, and selecting \u201cDocument Settings\u201d. If you insert the current date and time using \u2318 + Shift + ; (Mac) or Ctrl + Shift + ; (Windows) into a DateTime column, it will be inserted as a true timezone-aware timestamp, and shown with the timezone set for that column. If you do the same in a Text column, the date/time will be inserted as the text appropriate for the document\u2019s global timezone setting. Similarly, inserting the current date into a Date column will produce the current date according to the document\u2019s timezone. Additional resources # Python cheatsheet for strftime , for using with strftime() and strptime() in formulas. Date formatting cheatsheet , for specifying the date/time format in column settings. dateutil library , extensions to the Python standard datetime module.","title":"Working with dates"},{"location":"dates/#overview","text":"Grist expresses dates and times in two ways. The first is the Date column type, which represents a calendar date, with no time of day, and not associated with any particular timezone. The second is the DateTime column type, which represents a calendar date with a time of day which can be linked with a timezone. The Date and DateTime column types support different formatting options. When a column is set to be a Date or a DateTime , a date-picker widget will let you select the date on a calendar when editing a cell. When working with dates in formulas, the dates are Python datetime objects . That allows you to do some powerful things, but can be unexpected if you\u2019re not familiar with them.","title":"Overview"},{"location":"dates/#making-a-datetime-column","text":"For a general introduction to setting the type of columns, see Columns and data types . To tell Grist that you intend to enter only date/times in a column, over on the header for the column, find the drop-down, and select \u201cColumn Options\u201d. Then in the side panel that opens on the right, pick \u201cDate\u201d from the \u201cColumn Type\u201d drop-down. Or, if you want dates with times, pick \u201cDateTime\u201d. Then you can choose your preferred date/time format. For the \u201cDateTime\u201d type, you can also choose the timezone. When you convert a column from another type, such as \u201cText\u201d, you\u2019ll see a preview of the conversion results, and will need to click \u201cApply\u201d to complete conversion. You can come back and change settings at any time. Now when you edit a cell in this column, you will have help for selecting dates and times.","title":"Making a date/time column"},{"location":"dates/#inserting-the-current-date","text":"You can insert the current date in a cell using \u2318 + ; (semicolon) (Mac) or Ctrl + ; (Windows). You can insert the current date and time using \u2318 + Shift + ; (Mac) or Ctrl + Shift + ; (Windows). When editing a date cell, the date entry widget has a \u201ctoday\u201d button for today\u2019s date.","title":"Inserting the current date"},{"location":"dates/#parsing-dates-from-strings","text":"The DATEVALUE function converts a string that represents a date into a datetime object. It\u2019s simple to use and it will auto-detect different date formats: You can also use Python\u2019s datetime library, which provides two helpful functions: strptime() and strftime() . For example, let\u2019s say you have a table of movie sequels and their release dates (as strings). You\u2019d like to parse out the actual date to be able to sort the table properly. Here\u2019s how you would do that: First line imports the datetime library The second line splits the string into two parts and returns the second part (Python arrays are zero-based). The third line uses Python\u2019s strptime function to parse the date (e.g. \u201cMay 19, 1999\u201d) into a datetime object. The first parameter to the function is the string to parse, the second parameter is the date format that the string is in. Take a look at the format options to see if the example format string %B %d, %Y makes sense. (Note: You could\u2019ve also used DATEVALUE(d) to achieve the same result.) The result has a true date column and can now be properly sorted chronologically, with \u201cA New Hope\u201d at the top. For historical reasons, the first Star Wars movie is considered to be Episode 4. And, because the column type is selected as a date, you can use the \u201cDate Format\u201d in \u201cColumn Options\u201d to select the format in which to display the date. For some situations, you may wish to use the dateutil python library. For example, if you live in an area where dates typically start with the day and then the month, you could use this formula: import dateutil dateutil.parser.parse($date_text, dayfirst=True)","title":"Parsing dates from strings"},{"location":"dates/#date-arithmetic","text":"Once you have a proper date column, often you\u2019ll want to do date arithmetic such as calculating the difference between two dates. The simplest way to do this is to use the DATEDIF function which takes two dates and the unit of information to return (Days, Months, or Years). You could also use the minus sign to subtract two dates, but you might be surprised at the result: This happens because subtracting two datetime objects as we did in the example above, results in a datetime.timedelta object which represents, \u201cA duration expressing the difference between two date, time, or datetime instances to microsecond resolution.\u201d In Grist (and Python) you have to be more specific above how you want to display the date difference. For example, to get the number of days from the returned timedelta object, use its .days property: If you want weeks or years, just divide by 7 or by 365. (Divide by 7.0 or 365.0 to include a fractional part in the result.) If you want hours, multiply by 24. You can also use specific functions to get what you want. For example, DAYS is a common function in spreadsheet apps that returns the difference between two dates: DAYS($Last_day, $First_day) Excel/Sheets formulas Grist supports many other common functions from other spreadsheet apps, including DATEADD , DATEDIF , DATEVALUE , MONTH , HOUR , and many more .","title":"Date arithmetic"},{"location":"dates/#getting-a-part-of-the-date","text":"You\u2019ve seen how to parse the date, display it in different formats, and do date arithmetic. But what if you want to get more information about a specific date, such as getting its day of the week? One option is to use the WEEKDAY function, which behaves as it does in Excel, returning 1-7 for Sunday-Saturday. Alternatively, we can use the strftime function: Yet another option would be to reformat the date using Date Format in Column Options (see the date formatting reference ).","title":"Getting a part of the date"},{"location":"dates/#time-zones","text":"Values in DateTime columns represent moments in time. The same moment will look different in different timezones. In Grist, the timezone is set on each DateTime column. For instance, if the timezone is set to \u201cAmerica/New_York\u201d, it will show the values in New York timezone to collaborators anywhere in the world. A Grist document has a global timezone setting, which serves as the default timezone for when you create a new column of type DateTime . This global timezone is set to your local timezone when you first create a document. You can see or change it by clicking on your profile picture or icon, and selecting \u201cDocument Settings\u201d. If you insert the current date and time using \u2318 + Shift + ; (Mac) or Ctrl + Shift + ; (Windows) into a DateTime column, it will be inserted as a true timezone-aware timestamp, and shown with the timezone set for that column. If you do the same in a Text column, the date/time will be inserted as the text appropriate for the document\u2019s global timezone setting. Similarly, inserting the current date into a Date column will produce the current date according to the document\u2019s timezone.","title":"Time zones"},{"location":"dates/#additional-resources","text":"Python cheatsheet for strftime , for using with strftime() and strptime() in formulas. Date formatting cheatsheet , for specifying the date/time format in column settings. dateutil library , extensions to the Python standard datetime module.","title":"Additional resources"},{"location":"enter-data/","text":"Entering data # A spreadsheet-like grid is a great way to see data. In Grist, this is the view offered by the default page widget called \u201cTable\u201d. As in a spreadsheet, you can use the mouse or arrow keys to move around the cells of a table. To start entering data into a selecte cell, either start typing, hit Enter , or double-click the cell. Editing cells # While editing a cell, several keys are special: Escape cancels the operation and restores the previous value in the cell. Tab , Shift + Tab saves your entry and moves your cursor to the next or previous cell. Enter saves your entry and moves your cursor to the next row. Shift + Enter adds a newline inside your cell. Copying and pasting # You can copy data from Grist or paste data into it. If the pasted range is longer than the available records, new records will be added. Note that Grist does not create new columns automatically. If the pasted data has more columns than the grid displays, extra columns will be omitted. Data entry widgets # In Grist, columns have types. In addition to typing in values, many column types offer specialized widgets for entering data more conveniently. Here are some of the most useful ones: Toggle . A \u201cToggle\u201d column shows True/False values, and can show them as a \u201cCheckbox\u201d or as a \u201cSwitch\u201d widget, which you can select in the column options. You can toggle a value in such a cell by clicking the check mark or the switch, or by hitting Space . Date and DateTime . Hitting Enter on such a cell will open a calendar to pick a date. Choice and Reference . Typing into a cell of one of these types will produce an auto-complete dropdown menu. Linking to cells # You can make a sharable link to a cell by pressing \u2318 \u21e7 A (Mac) or Ctrl + Shift + A (Windows) while the cell is selected. This option is also available via the row menu as \u201cCopy anchor link.\u201d The link will be placed in your clipboard, ready to paste into an email or an instant messaging app. The link will open only for people with access to the document.","title":"Entering data"},{"location":"enter-data/#entering-data","text":"A spreadsheet-like grid is a great way to see data. In Grist, this is the view offered by the default page widget called \u201cTable\u201d. As in a spreadsheet, you can use the mouse or arrow keys to move around the cells of a table. To start entering data into a selecte cell, either start typing, hit Enter , or double-click the cell.","title":"Entering data"},{"location":"enter-data/#editing-cells","text":"While editing a cell, several keys are special: Escape cancels the operation and restores the previous value in the cell. Tab , Shift + Tab saves your entry and moves your cursor to the next or previous cell. Enter saves your entry and moves your cursor to the next row. Shift + Enter adds a newline inside your cell.","title":"Editing cells"},{"location":"enter-data/#copying-and-pasting","text":"You can copy data from Grist or paste data into it. If the pasted range is longer than the available records, new records will be added. Note that Grist does not create new columns automatically. If the pasted data has more columns than the grid displays, extra columns will be omitted.","title":"Copying and pasting"},{"location":"enter-data/#data-entry-widgets","text":"In Grist, columns have types. In addition to typing in values, many column types offer specialized widgets for entering data more conveniently. Here are some of the most useful ones: Toggle . A \u201cToggle\u201d column shows True/False values, and can show them as a \u201cCheckbox\u201d or as a \u201cSwitch\u201d widget, which you can select in the column options. You can toggle a value in such a cell by clicking the check mark or the switch, or by hitting Space . Date and DateTime . Hitting Enter on such a cell will open a calendar to pick a date. Choice and Reference . Typing into a cell of one of these types will produce an auto-complete dropdown menu.","title":"Data entry widgets"},{"location":"enter-data/#linking-to-cells","text":"You can make a sharable link to a cell by pressing \u2318 \u21e7 A (Mac) or Ctrl + Shift + A (Windows) while the cell is selected. This option is also available via the row menu as \u201cCopy anchor link.\u201d The link will be placed in your clipboard, ready to paste into an email or an instant messaging app. The link will open only for people with access to the document.","title":"Linking to cells"},{"location":"exports/","text":"Exporting # Exporting a table # If you want to export a table to another spreadsheet or database, one option is to export that table in CSV format, a common interchange format for data. To do this, open your document to the desired table. Then click the sharing icon ( ) on the top right of the screen. It opens the menu with sharing and export options. Select \u201cExport CSV\u201d. Your browser will then download a CSV file containing a header row naming your columns, excluding any hidden columns, followed by all the rows of data in the table in text format. When on a page with multiple page widgets, \u201cExport CSV\u201d will export only the data in the currently-selected widget. Backing up an entire document # Grist documents can also be downloaded in their entirety as an SQLite database file with a .grist extension. SQLite is a popular database format. The downloaded file will contain all your tabular data, any attached files within those tables, metadata about your tables, pages, and widgets, and a history of recent modifications of the document. It will not contain information about who the document is shared with. To download a Grist document, click the sharing icon ( ) on the top right of the screen, and select \u201cDownload\u201d. Restoring from backup # A downloaded .grist file can be uploaded again to provide an exact copy of the original. To upload the file, open the team or personal site where you want to place it, and optionally select also a workspace. Then click on \u201cAdd New\u201d in the top left, and select \u201cImport document\u201d. You may also import CSV and Excel files as new Grist documents this way.","title":"Exports & backups"},{"location":"exports/#exporting","text":"","title":"Exporting"},{"location":"exports/#exporting-a-table","text":"If you want to export a table to another spreadsheet or database, one option is to export that table in CSV format, a common interchange format for data. To do this, open your document to the desired table. Then click the sharing icon ( ) on the top right of the screen. It opens the menu with sharing and export options. Select \u201cExport CSV\u201d. Your browser will then download a CSV file containing a header row naming your columns, excluding any hidden columns, followed by all the rows of data in the table in text format. When on a page with multiple page widgets, \u201cExport CSV\u201d will export only the data in the currently-selected widget.","title":"Exporting a table"},{"location":"exports/#backing-up-an-entire-document","text":"Grist documents can also be downloaded in their entirety as an SQLite database file with a .grist extension. SQLite is a popular database format. The downloaded file will contain all your tabular data, any attached files within those tables, metadata about your tables, pages, and widgets, and a history of recent modifications of the document. It will not contain information about who the document is shared with. To download a Grist document, click the sharing icon ( ) on the top right of the screen, and select \u201cDownload\u201d.","title":"Backing up an entire document"},{"location":"exports/#restoring-from-backup","text":"A downloaded .grist file can be uploaded again to provide an exact copy of the original. To upload the file, open the team or personal site where you want to place it, and optionally select also a workspace. Then click on \u201cAdd New\u201d in the top left, and select \u201cImport document\u201d. You may also import CSV and Excel files as new Grist documents this way.","title":"Restoring from backup"},{"location":"formulas/","text":"Formulas # Grist has a powerful data engine to calculate the cells of your tables using formulas. If you\u2019ve used spreadsheets before, or database expressions, you\u2019ll be on familiar territory - but there are some wrinkles you\u2019ll want to know about, so hang around. Let\u2019s start with a classic use of spreadsheets. Suppose you have a list of products you\u2019ve ordered, the quantity you ordered, and the unit price of each. You\u2019ve made a column to show the quantity times the unit price, but want the computer to do that part for you. Just select a cell in the column you want to fill, and hit = key to tell Grist you want to enter a formula, rather than a value. Did you notice, when you did that, the labels of the columns changed a little? \u201cProduct\u201d became \u201c$Product\u201d, and \u201cUnit Price\u201d became \u201c$Unit_Price\u201d. This is Grist telling you how to refer to those columns in your formula. Just type $Quantity * $Unit_Price . You\u2019ll find an auto-complete feature ready to help you. Or if you don\u2019t like typing, click on the Quantity column, type the multiplication symbol, and then click on the Unit Price column. Your formula should look like this: To control the column ID, like \u201c$Unit_Price\u201d, that\u2019s used in formulas, see Renaming columns . Press Enter , and your formula is applied to all cells in the column. Grist formulas are written in Python, the most popular language for data science. The entirety of Python\u2019s standard library is available to you. For those with a spreadsheet background, we\u2019ve also added a suite of Excel-like functions, with all-uppercase names. Here\u2019s the full list of functions . If you\u2019ve worked with spreadsheets before, you may be surprised that you don\u2019t need to specify row numbers, like B1 * C1 . In Grist, a single formula applies to a whole column. You don\u2019t have to worry about filling it in for all rows, and can refer to values in the same row without fuss. Formulas that operate over many rows # If you are a spreadsheet user, you may find yourself wanting to have some special rows at the end of your table that have formulas different to the rest. In Grist, we\u2019d like you to consider adding a widget to your page instead. For common use cases, Summary tables may be exactly what you need. Or if you want to set things up yourself, you can add an extra table widget like this (see Page widgets for details): This is just another table, giving us a place to put formulas outside of the structure of the Materials table. For example, if we wanted to count how many products there are in that table, we could use this formula: len(Materials.all) Every table in your document is available by its name in formulas, as a UserTable . This formula uses the all method to access the rows of the table, but doesn\u2019t do anything with them but count them. Here\u2019s a formula to compute the average price, using the Excel-like function AVERAGE : AVERAGE(Materials.all.Price) The all method returns a RecordSet , which supports iterating over individual columns this way. Equivalently, we could use a Python list comprehension : AVERAGE(material.Price for material in Materials.all) If you are not familiar with Python, it is worth following a tutorial. There are thousands online, including this official one . Python will be useful to you for all sorts of data work, not just Grist. List comprehension is useful once we\u2019re doing anything nuanced. For example, here\u2019s a formula to list the names of products with a quantity greater than 80: [m.Product for m in Materials.all if m.Quantity > 80] This is a list comprehension, but now with a conditional. The result is a list, which is rendered as text in a cell. Python can help in other ways in your search for rows. For example, here\u2019s a formula to find the name of the product with the highest quantity: max(Materials.all, key=lambda m: m.Quantity).Product Formulas are case-sensitive, with Excel-like functions being all-caps ( MAX ), and regular Python generally all lowercase ( max ). For exact matches, there is a shortcut to avoid iteration called lookupRecords , or lookupOne for single matches. Just pass the the values of columns you require to be matched. For example, here is a formula to look up the product name of a material with a quantity of 52: Materials.lookupOne(Quantity=52).Product For very large tables, it is wise to use lookups as much as you can, rather than iterating through rows. Returning to our example document, you can now see how we calculated the Total Spent , Average Quantity , and Most Ordered Product columns: Column Formula Total Spent SUM(Materials.all.Price) Average Quantity AVERAGE(Materials.all.Quantity) Most Ordered Product max(Materials.all, key=lambda m: m.Quantity).Product Separating out calculations like this from the body of your data can take some getting used to, but working this way can help keep your document more organized. And it brings other advantages. For example we could switch the formatting of the summary widget via the side panel: Varying formula by row # Having a formula apply to all rows is convenient and reduces the changes of mistakes. If you need to have a column change its behavior on different rows, it is possible using a conditional in the formula. For example, here is a replacement for the Materials.Price formula that ignores the price and shows zero for products whose name ends in \u201c(Sample)\u201d: if $Product.endswith(\"(Sample)\"): return 0 else: return $Quantity * $Unit_Price Code viewer # Once you have a lot of formulas, or if you have been invited to a document and want to get an overview of its formulas, there is a code viewer available with a pure Python summary of the document. Special values available in formulas # For those familiar with Python, here are the extra values available to you in Grist: rec is the current row. The $column syntax is shorthand for rec.column . The rec variable is of type Record . table is the current table, and is of type UserTable . Tables in your document are available by their name, and are also of type UserTable . Many extra spreadsheet functions are available, see the full function list . If your table or column has a space in its name, or other characters that are awkward in Python, those characters are replaced with an underscore. Auto-complete may help you if you\u2019re not sure. You can also control the \u201cids\u201d of columns and tables in the right side panel. Freeze a formula column # If you\u2019d like to save the output of your formula as plain values, you can simply turn off the formula. First open the column options in the side panel: Now click on the orange formula icon in the side panel to turn it off: \u2794 : Notice that there is no = sign in the column cells any more, showing that it is no longer a formula. The cells will no longer change if other cells they used to depend on change. The side panel has lots of other handy settings, such as cell formatting (number of digits after decimal point, color, etc). The options apply just as much to formula columns as to regular columns. Lookups # Grist functions lookupOne and lookupRecords are useful for enumerating subsets of your data. For example, suppose we added a Category column to our Materials table, and wished to list all products belonging to a specific catagory. We can do this with lookupRecords , by calling it on the table of interest, and supplying it with the column values to match. Here\u2019s an example: If you are following on, see Adding a field for details of how to add a new field to a card. If you care about the order of results, lookupRecords takes an optional sort_by parameter. For example, we could use this formula to sort by the product name itself: list(Materials.lookupRecords(Category='Ship', sort_by='Product').Product) If you want to sort by multiple columns, remember that you can create a hidden formula column that combines data in any way you like, and then sort by that. The order of records returned by lookupRecords may not match the order of rows you see in a table. To get that order, use sort_by='manualSort' . This is an internal column that is updated with the manually established sort order of rows. If you find yourself doing a lot of look-ups, please consider whether Summary tables and Summary formulas might be what you are looking for. Recursion # Lookups are handy for recursive formulas. Suppose we have a table counting how many events we have per day, and want to add a cumulative sum of those event counts. One way to do that is with a formula like this: yesterday = Events.lookupOne(date=$date - datetime.timedelta(days=1)) $events + (yesterday.cumulative or 0) For clarity, we\u2019ve split this formula into two lines. The first line makes a variable pointing to the row of the day before. The second line computes the value we want in the cell. Python note: the value of the last line is automatically returned (you could prefix it with return if you like). Notice the yesterday.cumulative or 0 . For the earliest row in the table, there will be no yesterday. In this case, lookupOne returns a special empty record, for which yesterday.cumulative will be None . If you\u2019d like to simplify this formula, or find yourself using the same lookup in multiple formulas, it would be worth making yesterday a reference column . Simply add a reference column, and give a formula for it that matches how we defined yesterday here. To actually enter this formula in a cell, you\u2019d use Shift + Enter to divide the lines. For longer formulas, you may prefer to use the side panel, where a simple Enter gives you a new line. Click on the column header, select \u201cColumn Options\u201d and edit the Formula field.","title":"Intro to formulas"},{"location":"formulas/#formulas","text":"Grist has a powerful data engine to calculate the cells of your tables using formulas. If you\u2019ve used spreadsheets before, or database expressions, you\u2019ll be on familiar territory - but there are some wrinkles you\u2019ll want to know about, so hang around. Let\u2019s start with a classic use of spreadsheets. Suppose you have a list of products you\u2019ve ordered, the quantity you ordered, and the unit price of each. You\u2019ve made a column to show the quantity times the unit price, but want the computer to do that part for you. Just select a cell in the column you want to fill, and hit = key to tell Grist you want to enter a formula, rather than a value. Did you notice, when you did that, the labels of the columns changed a little? \u201cProduct\u201d became \u201c$Product\u201d, and \u201cUnit Price\u201d became \u201c$Unit_Price\u201d. This is Grist telling you how to refer to those columns in your formula. Just type $Quantity * $Unit_Price . You\u2019ll find an auto-complete feature ready to help you. Or if you don\u2019t like typing, click on the Quantity column, type the multiplication symbol, and then click on the Unit Price column. Your formula should look like this: To control the column ID, like \u201c$Unit_Price\u201d, that\u2019s used in formulas, see Renaming columns . Press Enter , and your formula is applied to all cells in the column. Grist formulas are written in Python, the most popular language for data science. The entirety of Python\u2019s standard library is available to you. For those with a spreadsheet background, we\u2019ve also added a suite of Excel-like functions, with all-uppercase names. Here\u2019s the full list of functions . If you\u2019ve worked with spreadsheets before, you may be surprised that you don\u2019t need to specify row numbers, like B1 * C1 . In Grist, a single formula applies to a whole column. You don\u2019t have to worry about filling it in for all rows, and can refer to values in the same row without fuss.","title":"Formulas"},{"location":"formulas/#formulas-that-operate-over-many-rows","text":"If you are a spreadsheet user, you may find yourself wanting to have some special rows at the end of your table that have formulas different to the rest. In Grist, we\u2019d like you to consider adding a widget to your page instead. For common use cases, Summary tables may be exactly what you need. Or if you want to set things up yourself, you can add an extra table widget like this (see Page widgets for details): This is just another table, giving us a place to put formulas outside of the structure of the Materials table. For example, if we wanted to count how many products there are in that table, we could use this formula: len(Materials.all) Every table in your document is available by its name in formulas, as a UserTable . This formula uses the all method to access the rows of the table, but doesn\u2019t do anything with them but count them. Here\u2019s a formula to compute the average price, using the Excel-like function AVERAGE : AVERAGE(Materials.all.Price) The all method returns a RecordSet , which supports iterating over individual columns this way. Equivalently, we could use a Python list comprehension : AVERAGE(material.Price for material in Materials.all) If you are not familiar with Python, it is worth following a tutorial. There are thousands online, including this official one . Python will be useful to you for all sorts of data work, not just Grist. List comprehension is useful once we\u2019re doing anything nuanced. For example, here\u2019s a formula to list the names of products with a quantity greater than 80: [m.Product for m in Materials.all if m.Quantity > 80] This is a list comprehension, but now with a conditional. The result is a list, which is rendered as text in a cell. Python can help in other ways in your search for rows. For example, here\u2019s a formula to find the name of the product with the highest quantity: max(Materials.all, key=lambda m: m.Quantity).Product Formulas are case-sensitive, with Excel-like functions being all-caps ( MAX ), and regular Python generally all lowercase ( max ). For exact matches, there is a shortcut to avoid iteration called lookupRecords , or lookupOne for single matches. Just pass the the values of columns you require to be matched. For example, here is a formula to look up the product name of a material with a quantity of 52: Materials.lookupOne(Quantity=52).Product For very large tables, it is wise to use lookups as much as you can, rather than iterating through rows. Returning to our example document, you can now see how we calculated the Total Spent , Average Quantity , and Most Ordered Product columns: Column Formula Total Spent SUM(Materials.all.Price) Average Quantity AVERAGE(Materials.all.Quantity) Most Ordered Product max(Materials.all, key=lambda m: m.Quantity).Product Separating out calculations like this from the body of your data can take some getting used to, but working this way can help keep your document more organized. And it brings other advantages. For example we could switch the formatting of the summary widget via the side panel:","title":"Formulas that operate over many rows"},{"location":"formulas/#varying-formula-by-row","text":"Having a formula apply to all rows is convenient and reduces the changes of mistakes. If you need to have a column change its behavior on different rows, it is possible using a conditional in the formula. For example, here is a replacement for the Materials.Price formula that ignores the price and shows zero for products whose name ends in \u201c(Sample)\u201d: if $Product.endswith(\"(Sample)\"): return 0 else: return $Quantity * $Unit_Price","title":"Varying formula by row"},{"location":"formulas/#code-viewer","text":"Once you have a lot of formulas, or if you have been invited to a document and want to get an overview of its formulas, there is a code viewer available with a pure Python summary of the document.","title":"Code viewer"},{"location":"formulas/#special-values-available-in-formulas","text":"For those familiar with Python, here are the extra values available to you in Grist: rec is the current row. The $column syntax is shorthand for rec.column . The rec variable is of type Record . table is the current table, and is of type UserTable . Tables in your document are available by their name, and are also of type UserTable . Many extra spreadsheet functions are available, see the full function list . If your table or column has a space in its name, or other characters that are awkward in Python, those characters are replaced with an underscore. Auto-complete may help you if you\u2019re not sure. You can also control the \u201cids\u201d of columns and tables in the right side panel.","title":"Special values available in formulas"},{"location":"formulas/#freeze-a-formula-column","text":"If you\u2019d like to save the output of your formula as plain values, you can simply turn off the formula. First open the column options in the side panel: Now click on the orange formula icon in the side panel to turn it off: \u2794 : Notice that there is no = sign in the column cells any more, showing that it is no longer a formula. The cells will no longer change if other cells they used to depend on change. The side panel has lots of other handy settings, such as cell formatting (number of digits after decimal point, color, etc). The options apply just as much to formula columns as to regular columns.","title":"Freeze a formula column"},{"location":"formulas/#lookups","text":"Grist functions lookupOne and lookupRecords are useful for enumerating subsets of your data. For example, suppose we added a Category column to our Materials table, and wished to list all products belonging to a specific catagory. We can do this with lookupRecords , by calling it on the table of interest, and supplying it with the column values to match. Here\u2019s an example: If you are following on, see Adding a field for details of how to add a new field to a card. If you care about the order of results, lookupRecords takes an optional sort_by parameter. For example, we could use this formula to sort by the product name itself: list(Materials.lookupRecords(Category='Ship', sort_by='Product').Product) If you want to sort by multiple columns, remember that you can create a hidden formula column that combines data in any way you like, and then sort by that. The order of records returned by lookupRecords may not match the order of rows you see in a table. To get that order, use sort_by='manualSort' . This is an internal column that is updated with the manually established sort order of rows. If you find yourself doing a lot of look-ups, please consider whether Summary tables and Summary formulas might be what you are looking for.","title":"Lookups"},{"location":"formulas/#recursion","text":"Lookups are handy for recursive formulas. Suppose we have a table counting how many events we have per day, and want to add a cumulative sum of those event counts. One way to do that is with a formula like this: yesterday = Events.lookupOne(date=$date - datetime.timedelta(days=1)) $events + (yesterday.cumulative or 0) For clarity, we\u2019ve split this formula into two lines. The first line makes a variable pointing to the row of the day before. The second line computes the value we want in the cell. Python note: the value of the last line is automatically returned (you could prefix it with return if you like). Notice the yesterday.cumulative or 0 . For the earliest row in the table, there will be no yesterday. In this case, lookupOne returns a special empty record, for which yesterday.cumulative will be None . If you\u2019d like to simplify this formula, or find yourself using the same lookup in multiple formulas, it would be worth making yesterday a reference column . Simply add a reference column, and give a formula for it that matches how we defined yesterday here. To actually enter this formula in a cell, you\u2019d use Shift + Enter to divide the lines. For longer formulas, you may prefer to use the side panel, where a simple Enter gives you a new line. Click on the column header, select \u201cColumn Options\u201d and edit the Formula field.","title":"Recursion"},{"location":"functions/","text":"Function List # Full power of Python # Grist uses Python (version 2.7) for formulas. You can use nearly all features of Python and its standard library. See Python documentation . Grist code runs in a secure sandbox, so Python code cannot access anything other than your document. Note that Python is case-sensitive, which applies to all functions, as well as Grist table and column names. The table below lists Grist-specific functions for accessing your document data, as well as a suite of Excel-like functions provided by Grist. Don\u2019t forget also that the entire Python\u2019s standard library is available. Category Functions Grist Record or rec , $Field or rec.Field , $group or rec.group , RecordSet , UserTable , all , lookupOne , lookupRecords Date DATE , DATEADD , DATEDIF , DATEVALUE , DATE_TO_XL , DAY , DAYS , DTIME , EDATE , EOMONTH , HOUR , ISOWEEKNUM , MINUTE , MONTH , NOW , SECOND , TODAY , WEEKDAY , WEEKNUM , XL_TO_DATE , YEAR , YEARFRAC Info CELL , ISBLANK , ISEMAIL , ISERR , ISERROR , ISLOGICAL , ISNA , ISNONTEXT , ISNUMBER , ISREF , ISTEXT , ISURL , N , NA , TYPE Logical AND , FALSE , IF , IFERROR , NOT , OR , TRUE Lookup lookupOne , lookupRecords , ADDRESS , CHOOSE , COLUMN , COLUMNS , GETPIVOTDATA , HLOOKUP , HYPERLINK , INDEX , INDIRECT , LOOKUP , MATCH , OFFSET , ROW , ROWS , VLOOKUP Math ABS , ACOS , ACOSH , ARABIC , ASIN , ASINH , ATAN , ATAN2 , ATANH , CEILING , COMBIN , COS , COSH , DEGREES , EVEN , EXP , FACT , FACTDOUBLE , FLOOR , GCD , INT , LCM , LN , LOG , LOG10 , MOD , MROUND , MULTINOMIAL , ODD , PI , POWER , PRODUCT , QUOTIENT , RADIANS , RAND , RANDBETWEEN , ROMAN , ROUND , ROUNDDOWN , ROUNDUP , SERIESSUM , SIGN , SIN , SINH , SQRT , SQRTPI , SUBTOTAL , SUM , SUMIF , SUMIFS , SUMPRODUCT , SUMSQ , TAN , TANH , TRUNC Schedule SCHEDULE Stats AVEDEV , AVERAGE , AVERAGEA , AVERAGEIF , AVERAGEIFS , AVERAGE_WEIGHTED , BINOMDIST , CONFIDENCE , CORREL , COUNT , COUNTA , COVAR , CRITBINOM , DEVSQ , EXPONDIST , FDIST , FISHER , FISHERINV , FORECAST , F_DIST , F_DIST_RT , GEOMEAN , HARMEAN , HYPGEOMDIST , INTERCEPT , KURT , LARGE , LOGINV , LOGNORMDIST , MAX , MAXA , MEDIAN , MIN , MINA , MODE , NEGBINOMDIST , NORMDIST , NORMINV , NORMSDIST , NORMSINV , PEARSON , PERCENTILE , PERCENTRANK , PERCENTRANK_EXC , PERCENTRANK_INC , PERMUT , POISSON , PROB , QUARTILE , RANK , RANK_AVG , RANK_EQ , RSQ , SKEW , SLOPE , SMALL , STANDARDIZE , STDEV , STDEVA , STDEVP , STDEVPA , STEYX , TDIST , TINV , TRIMMEAN , TTEST , T_INV , T_INV_2T , VAR , VARA , VARP , VARPA , WEIBULL , ZTEST Text CHAR , CLEAN , CODE , CONCATENATE , CONCATENATE , DOLLAR , EXACT , FIND , FIXED , LEFT , LEN , LOWER , MID , PROPER , REGEXEXTRACT , REGEXMATCH , REGEXREPLACE , REPLACE , REPT , RIGHT , SEARCH , SUBSTITUTE , T , TEXT , TRIM , UPPER , VALUE Grist # class Record # Record # A Record represents a record of data. It is the primary means of accessing values in formulas. A Record for a particular table has a property for each data and formula column in the table. In a formula, $field is translated to rec.field , where rec is the Record for which the formula is being evaluated. For example: def Full_Name(rec, table): return rec.First_Name + ' ' + rec.LastName def Name_Length(rec, table): return len(rec.Full_Name) $ Field or rec .Field # $Field # Access the field named \u201cField\u201d of the current record. E.g. $First_Name or rec.First_Name . $group # $group # In a summary view, $group is a special field containing the list of Records that are summarized by the current summary line. E.g. len($group) is the count of those records. See RecordSet for useful properties offered by the returned object. Examples: sum($group.Amount) # Sum of the Amount field in the matching records sum(r.Amount for r in $group) # Same as sum($group.Amount) sum(r.Amount for r in $group if r > 0) # Sum of only the positive amounts sum(r.Shares * r.Price for r in $group) # Sum of shares * price products class RecordSet # RecordSet # A RecordSet represents a collection of records, as returned by Table.lookupRecords() or $group property in summary views. A RecordSet allows iterating through the records: sum(r.Amount for r in Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\")) min(r.DueDate for r in Tasks.lookupRecords(Owner=\"Bob\")) RecordSets also provide a convenient way to access the list of values for a particular field for all the records, as record_set.Field . For example, the examples above are equivalent to: sum(Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\").Amount) min(Tasks.lookupRecords(Owner=\"Bob\").DueDate) You can get the number of records in a RecordSet using len , e.g. len($group) . class UserTable # UserTable # Each data table in the document is represented in the code by an instance of UserTable class. These names are always capitalized. A UserTable provides access to all the records in the table, as well as methods to look up particular records. Every table in the document is available to all formulas. UserTable. all # all # The list of all the records in this table. For example, this evaluates to the number of records in the table Students . len(Students.all) This evaluates to the sum of the Population field for every record in the table Countries . sum(r.Population for r in Countries.all) UserTable. lookupOne (self, **field_value_pairs) # lookupOne # Returns a Record matching the given field=value arguments. If multiple records match, returns one of them. If none match, returns the special empty record. For example: People.lookupOne(First_Name=\"Lewis\", Last_Name=\"Carroll\") UserTable. lookupRecords (self, **field_value_pairs) # lookupRecords # Returns the Records from this table that match the given field=value arguments. If sort_by=field is given, sort the results by that field. For example: People.lookupRecords(Last_Name=\"Johnson\", sort_by=\"First_Name\") People.lookupRecords(First_Name=\"George\", Last_Name=\"Washington\") See RecordSet for useful properties offered by the returned object. Date # DATE (year, month, day) # DATE # Returns the datetime.datetime object that represents a particular date. The DATE function is most useful in formulas where year, month, and day are formulas, not constants. If year is between 0 and 1899 (inclusive), adds 1900 to calculate the year. >>> DATE(108, 1, 2) datetime.date(2008, 1, 2) >>> DATE(2008, 1, 2) datetime.date(2008, 1, 2) If month is greater than 12, rolls into the following year. >>> DATE(2008, 14, 2) datetime.date(2009, 2, 2) If month is less than 1, subtracts that many months plus 1, from the first month in the year. >>> DATE(2008, -3, 2) datetime.date(2007, 9, 2) If day is greater than the number of days in the given month, rolls into the following months. >>> DATE(2008, 1, 35) datetime.date(2008, 2, 4) If day is less than 1, subtracts that many days plus 1, from the first day of the given month. >>> DATE(2008, 1, -15) datetime.date(2007, 12, 16) DATEADD (start_date, days=0, months=0, years=0, weeks=0) # DATEADD # Returns the date a given number of days, months, years, or weeks away from start_date . You may specify arguments in any order if you specify argument names. Use negative values to subtract. For example, DATEADD(date, 1) is the same as DATEADD(date, days=1) , ands adds one day to date . DATEADD(date, years=1, days=-1) adds one year minus one day. >>> DATEADD(DATE(2011, 1, 15), 1) datetime.date(2011, 1, 16) >>> DATEADD(DATE(2011, 1, 15), months=1, days=-1) datetime.date(2011, 2, 14) >>> DATEADD(DATE(2011, 1, 15), years=-2, months=1, days=3, weeks=2) datetime.date(2009, 3, 4) >>> DATEADD(DATE(1975, 4, 30), years=50, weeks=-5) datetime.date(2025, 3, 26) DATEDIF (start_date, end_date, unit) # DATEDIF # Calculates the number of days, months, or years between two dates. Unit indicates the type of information that you want returned: \u201cY\u201d: The number of complete years in the period. \u201cM\u201d: The number of complete months in the period. \u201cD\u201d: The number of days in the period. \u201cMD\u201d: The difference between the days in start_date and end_date. The months and years of the dates are ignored. \u201cYM\u201d: The difference between the months in start_date and end_date. The days and years of the dates are ignored. \u201cYD\u201d: The difference between the days of start_date and end_date. The years of the dates are ignored. Two complete years in the period (2) >>> DATEDIF(DATE(2001, 1, 1), DATE(2003, 1, 1), \"Y\") 2 440 days between June 1, 2001, and August 15, 2002 (440) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"D\") 440 75 days between June 1 and August 15, ignoring the years of the dates (75) >>> DATEDIF(DATE(2001, 6, 1), DATE(2012, 8, 15), \"YD\") 75 The difference between 1 and 15, ignoring the months and the years of the dates (14) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"MD\") 14 DATEVALUE (date_string, tz=None) # DATEVALUE # Converts a date that is stored as text to a datetime object. >>> DATEVALUE(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"30-Jan-2008\") datetime.datetime(2008, 1, 30, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"2008-12-11\") datetime.datetime(2008, 12, 11, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"5-JUL\").replace(year=2000) datetime.datetime(2000, 7, 5, 0, 0, tzinfo=moment.tzinfo('America/New_York')) In case of ambiguity, prefer M/D/Y format. >>> DATEVALUE(\"1/2/3\") datetime.datetime(2003, 1, 2, 0, 0, tzinfo=moment.tzinfo('America/New_York')) DATE_TO_XL (date_value) # DATE_TO_XL # Converts a Python date or datetime object to the serial number as used by Excel, with December 30, 1899 as serial number 1. See XL_TO_DATE for more explanation. >>> DATE_TO_XL(datetime.date(2008, 1, 1)) 39448.0 >>> DATE_TO_XL(datetime.date(2012, 3, 14)) 40982.0 >>> DATE_TO_XL(datetime.datetime(2012, 3, 14, 1, 30)) 40982.0625 DAY (date) # DAY # Returns the day of a date, as an integer ranging from 1 to 31. Same as date.day . >>> DAY(DATE(2011, 4, 15)) 15 >>> DAY(\"5/31/2012\") 31 >>> DAY(datetime.datetime(1900, 1, 1)) 1 DAYS (end_date, start_date) # DAYS # Returns the number of days between two dates. Same as (end_date - start_date).days . >>> DAYS(\"3/15/11\",\"2/1/11\") 42 >>> DAYS(DATE(2011, 12, 31), DATE(2011, 1, 1)) 364 >>> DAYS(\"2/1/11\", \"3/15/11\") -42 DTIME (value, tz=None) # DTIME # Returns the value converted to a python datetime object. The value may be a string , date (interpreted as midnight on that day), time (interpreted as a time-of-day today), or an existing datetime . The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. If the input is itself a datetime with the timezone set, it is returned unchanged (no changes to its timezone). >>> DTIME(datetime.date(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.date(2017, 1, 1), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('Europe/Paris')) >>> DTIME(datetime.datetime(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC'))) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC')), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) EDATE (start_date, months) # EDATE # Returns the date that is the given number of months before or after start_date . Use EDATE to calculate maturity dates or due dates that fall on the same day of the month as the date of issue. >>> EDATE(DATE(2011, 1, 15), 1) datetime.date(2011, 2, 15) >>> EDATE(DATE(2011, 1, 15), -1) datetime.date(2010, 12, 15) >>> EDATE(DATE(2011, 1, 15), 2) datetime.date(2011, 3, 15) >>> EDATE(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 1) >>> EDATE(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 1) EOMONTH (start_date, months) # EOMONTH # Returns the date for the last day of the month that is the indicated number of months before or after start_date. Use EOMONTH to calculate maturity dates or due dates that fall on the last day of the month. >>> EOMONTH(DATE(2011, 1, 1), 1) datetime.date(2011, 2, 28) >>> EOMONTH(DATE(2011, 1, 15), -3) datetime.date(2010, 10, 31) >>> EOMONTH(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 31) >>> EOMONTH(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 31) HOUR (time) # HOUR # Same as time.hour . >>> HOUR(XL_TO_DATE(0.75)) 18 >>> HOUR(\"7/18/2011 7:45\") 7 >>> HOUR(\"4/21/2012\") 0 ISOWEEKNUM (date) # ISOWEEKNUM # Returns the ISO week number of the year for a given date. >>> ISOWEEKNUM(\"3/9/2012\") 10 >>> [ISOWEEKNUM(DATE(2000 + y, 1, 1)) for y in [0,1,2,3,4,5,6,7,8]] [52, 1, 1, 1, 1, 53, 52, 1, 1] MINUTE (time) # MINUTE # Returns the minutes of datetime , as an integer from 0 to 59. Same as time.minute . >>> MINUTE(XL_TO_DATE(0.75)) 0 >>> MINUTE(\"7/18/2011 7:45\") 45 >>> MINUTE(\"12:59:00 PM\") 59 >>> MINUTE(datetime.time(12, 58, 59)) 58 MONTH (date) # MONTH # Returns the month of a date represented, as an integer from from 1 (January) to 12 (December). Same as date.month . >>> MONTH(DATE(2011, 4, 15)) 4 >>> MONTH(\"5/31/2012\") 5 >>> MONTH(datetime.datetime(1900, 1, 1)) 1 NOW (tz=None) # NOW # Returns the datetime object for the current time. SECOND (time) # SECOND # Returns the seconds of datetime , as an integer from 0 to 59. Same as time.second . >>> SECOND(XL_TO_DATE(0.75)) 0 >>> SECOND(\"7/18/2011 7:45:13\") 13 >>> SECOND(datetime.time(12, 58, 59)) 59 TODAY () # TODAY # Returns the date object for the current date. WEEKDAY (date, return_type=1) # WEEKDAY # Returns the day of the week corresponding to a date. The day is given as an integer, ranging from 1 (Sunday) to 7 (Saturday), by default. Return_type determines the type of the returned value. 1 (default) - Returns 1 (Sunday) through 7 (Saturday). 2 - Returns 1 (Monday) through 7 (Sunday). 3 - Returns 0 (Monday) through 6 (Sunday). 11 - Returns 1 (Monday) through 7 (Sunday). 12 - Returns 1 (Tuesday) through 7 (Monday). 13 - Returns 1 (Wednesday) through 7 (Tuesday). 14 - Returns 1 (Thursday) through 7 (Wednesday). 15 - Returns 1 (Friday) through 7 (Thursday). 16 - Returns 1 (Saturday) through 7 (Friday). 17 - Returns 1 (Sunday) through 7 (Saturday). >>> WEEKDAY(DATE(2008, 2, 14)) 5 >>> WEEKDAY(DATE(2012, 3, 1)) 5 >>> WEEKDAY(DATE(2012, 3, 1), 1) 5 >>> WEEKDAY(DATE(2012, 3, 1), 2) 4 >>> WEEKDAY(\"3/1/2012\", 3) 3 WEEKNUM (date, return_type=1) # WEEKNUM # Returns the week number of a specific date. For example, the week containing January 1 is the first week of the year, and is numbered week 1. Return_type determines which week is considered the first week of the year. 1 (default) - Week 1 is the first week starting Sunday that contains January 1. 2 - Week 1 is the first week starting Monday that contains January 1. 11 - Week 1 is the first week starting Monday that contains January 1. 12 - Week 1 is the first week starting Tuesday that contains January 1. 13 - Week 1 is the first week starting Wednesday that contains January 1. 14 - Week 1 is the first week starting Thursday that contains January 1. 15 - Week 1 is the first week starting Friday that contains January 1. 16 - Week 1 is the first week starting Saturday that contains January 1. 17 - Week 1 is the first week starting Sunday that contains January 1. 21 - ISO 8601 Approach: Week 1 is the first week starting Monday that contains January 4. Equivalently, it is the week that contains the first Thursday of the year. >>> WEEKNUM(DATE(2012, 3, 9)) 10 >>> WEEKNUM(DATE(2012, 3, 9), 2) 11 >>> WEEKNUM('1/1/1900') 1 >>> WEEKNUM('2/1/1900') 5 XL_TO_DATE (value, tz=None) # XL_TO_DATE # Converts a provided Excel serial number representing a date into a datetime object. Value is interpreted as the number of days since December 30, 1899. (This corresponds to Google Sheets interpretation. Excel starts with Dec. 31, 1899 but wrongly considers 1900 to be a leap year. Excel for Mac should be configured to use 1900 date system, i.e. uncheck \u201cUse the 1904 date system\u201d option.) The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. >>> XL_TO_DATE(41100.1875) datetime.datetime(2012, 7, 10, 4, 30, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(39448) datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(40982.0625) datetime.datetime(2012, 3, 14, 1, 30, tzinfo=moment.tzinfo('America/New_York')) YEAR (date) # YEAR # Returns the year corresponding to a date as an integer. Same as date.year . >>> YEAR(DATE(2011, 4, 15)) 2011 >>> YEAR(\"5/31/2030\") 2030 >>> YEAR(datetime.datetime(1900, 1, 1)) 1900 YEARFRAC (start_date, end_date, basis=0) # YEARFRAC # Calculates the fraction of the year represented by the number of whole days between two dates. Basis is the type of day count basis to use. 0 (default) - US (NASD) 30/360 1 - Actual/actual 2 - Actual/360 3 - Actual/365 4 - European 30/360 -1 - Actual/actual (Google Sheets variation) This function is useful for financial calculations. For compatibility with Excel, it defaults to using the NASD standard calendar. For use in non-financial settings, option -1 is likely the best choice. See https://en.wikipedia.org/wiki/360-day_calendar for explanation of the US 30/360 and European 30/360 methods. See http://www.dwheeler.com/yearfrac/ for analysis of Excel\u2019s particular implementation. Basis -1 is similar to 1 , but differs from Excel when dates span both leap and non-leap years. It matches the calculation in Google Sheets, counting the days in each year as a fraction of that year\u2019s length. Fraction of the year between 1/1/2012 and 7/30/12, omitting the Basis argument. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30)) '0.58055556' Fraction between same dates, using the Actual/Actual basis argument. Because 2012 is a Leap year, it has a 366 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 1) '0.57650273' Fraction between same dates, using the Actual/365 basis argument. Uses a 365 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 3) '0.57808219' Info # CELL (info_type, reference) # CELL # Returns the requested information about the specified cell. This is not implemented in Grist Note This function is not currently implemented in Grist. ISBLANK (value) # ISBLANK # Returns whether a value refers to an empty cell. It isn\u2019t implemented in Grist. To check for an empty string, use value == \"\" . Note This function is not currently implemented in Grist. ISEMAIL (value) # ISEMAIL # Returns whether a value is a valid email address. Note that checking email validity is not an exact science. The technical standard considers many email addresses valid that are not used in practice, and would not be considered valid by most users. Instead, we follow Google Sheets implementation, with some differences, noted below. >>> ISEMAIL(\"Abc.123@example.com\") True >>> ISEMAIL(\"Bob_O-Reilly+tag@example.com\") True >>> ISEMAIL(\"John Doe\") False >>> ISEMAIL(\"john@aol...com\") False ISERR (value) # ISERR # Checks whether a value is an error. In other words, it returns true if using value directly would raise an exception. NOTE: Grist implements this by automatically wrapping the argument to use lazy evaluation. A more Pythonic approach to checking for errors is: try: ... value ... except Exception, err: ... do something about the error ... For example: >>> ISERR(\"Hello\") False ISERROR (value) # ISERROR # Checks whether a value is an error or an invalid value. It is similar to ISERR , but also returns true for an invalid value such as NaN or a text value in a Numeric column. NOTE: Grist implements this by automatically wrapping the argument to use lazy evaluation. >>> ISERROR(\"Hello\") False >>> ISERROR(AltText(\"fail\")) True >>> ISERROR(float('nan')) True ISLOGICAL (value) # ISLOGICAL # Checks whether a value is True or False . >>> ISLOGICAL(True) True >>> ISLOGICAL(False) True >>> ISLOGICAL(0) False >>> ISLOGICAL(None) False >>> ISLOGICAL(\"Test\") False ISNA (value) # ISNA # Checks whether a value is the error #N/A . >>> ISNA(float('nan')) True >>> ISNA(0.0) False >>> ISNA('text') False >>> ISNA(float('-inf')) False ISNONTEXT (value) # ISNONTEXT # Checks whether a value is non-textual. >>> ISNONTEXT(\"asdf\") False >>> ISNONTEXT(\"\") False >>> ISNONTEXT(AltText(\"text\")) False >>> ISNONTEXT(17.0) True >>> ISNONTEXT(None) True >>> ISNONTEXT(datetime.date(2011, 1, 1)) True ISNUMBER (value) # ISNUMBER # Checks whether a value is a number. >>> ISNUMBER(17) True >>> ISNUMBER(-123.123423) True >>> ISNUMBER(False) True >>> ISNUMBER(float('nan')) True >>> ISNUMBER(float('inf')) True >>> ISNUMBER('17') False >>> ISNUMBER(None) False >>> ISNUMBER(datetime.date(2011, 1, 1)) False ISREF (value) # ISREF # Checks whether a value is a table record. For example, if a column person is of type Reference to the People table, then ISREF($person) is True. Similarly, ISREF(People.lookupOne(name=$name)) is True. For any other type of value, ISREF() would evaluate to False. >>> ISREF(17) False >>> ISREF(\"Roger\") False ISTEXT (value) # ISTEXT # Checks whether a value is text. >>> ISTEXT(\"asdf\") True >>> ISTEXT(\"\") True >>> ISTEXT(AltText(\"text\")) True >>> ISTEXT(17.0) False >>> ISTEXT(None) False >>> ISTEXT(datetime.date(2011, 1, 1)) False ISURL (value) # ISURL # Checks whether a value is a valid URL. It does not need to be fully qualified, or to include \u201chttp://\u201d and \u201cwww\u201d. It does not follow a standard, but attempts to work similarly to ISURL in Google Sheets, and to return True for text that is likely a URL. Valid protocols include ftp, http, https, gopher, mailto, news, telnet, and aim. >>> ISURL(\"http://www.getgrist.com\") True >>> ISURL(\"https://foo.com/test_(wikipedia)#cite-1\") True >>> ISURL(\"mailto://user@example.com\") True >>> ISURL(\"http:///a\") False N (value) # N # Returns the value converted to a number. True/False are converted to 1/0. A date is converted to Excel-style serial number of the date. Anything else is converted to 0. >>> N(7) 7 >>> N(7.1) 7.1 >>> N(\"Even\") 0 >>> N(\"7\") 0 >>> N(True) 1 >>> N(datetime.datetime(2011, 4, 17)) 40650.0 NA () # NA # Returns the \u201cvalue not available\u201d error, #N/A . >>> math.isnan(NA()) True TYPE (value) # TYPE # Returns a number associated with the type of data passed into the function. This is not implemented in Grist. Use isinstance(value, type) or type(value) . Note This function is not currently implemented in Grist. Logical # AND (logical_expression, *logical_expressions) # AND # Returns True if all of the arguments are logically true, and False if any are false. Same as all([value1, value2, ...]) . >>> AND(1) True >>> AND(0) False >>> AND(1, 1) True >>> AND(1,2,3,4) True >>> AND(1,2,3,4,0) False FALSE () # FALSE # Returns the logical value False . You may also use the value False directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> FALSE() False IF (logical_expression, value_if_true, value_if_false) # IF # Returns one value if a logical expression is True and another if it is False . The equivalent Python expression is: value_if_true if logical_expression else value_if_false Since Grist supports multi-line formulas, you may also use Python blocks such as: if logical_expression: return value_if_true else: return value_if_false NOTE: Grist follows Excel model by only evaluating one of the value expressions, by automatically wrapping the expressions to use lazy evaluation. This allows IF(False, 1/0, 1) to evaluate to 1 rather than raise an exception. >>> IF(12, \"Yes\", \"No\") 'Yes' >>> IF(None, \"Yes\", \"No\") 'No' >>> IF(True, 0.85, 0.0) 0.85 >>> IF(False, 0.85, 0.0) 0.0 IFERROR (value, value_if_error=\u201d\u201c) # IFERROR # Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent. NOTE: Grist handles values that raise an exception by wrapping them to use lazy evaluation. >>> IFERROR(float('nan'), \"**NAN**\") '**NAN**' >>> IFERROR(17.17, \"**NAN**\") 17.17 >>> IFERROR(\"Text\") 'Text' >>> IFERROR(AltText(\"hello\")) '' NOT (logical_expression) # NOT # True . Same as not logical_expression . >>> NOT(123) False >>> NOT(0) True OR (logical_expression, *logical_expressions) # OR # Returns True if any of the arguments is logically true, and false if all of the arguments are false. Same as any([value1, value2, ...]) . >>> OR(1) True >>> OR(0) False >>> OR(1, 1) True >>> OR(0, 1) True >>> OR(0, 0) False >>> OR(0,False,0.0,\"\",None) False >>> OR(0,None,3,0) True TRUE () # TRUE # Returns the logical value True . You may also use the value True directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> TRUE() True Lookup # UserTable. lookupOne (self, **field_value_pairs) # lookupOne # Returns a Record matching the given field=value arguments. If multiple records match, returns one of them. If none match, returns the special empty record. For example: People.lookupOne(First_Name=\"Lewis\", Last_Name=\"Carroll\") UserTable. lookupRecords (self, **field_value_pairs) # lookupRecords # Returns the Records from this table that match the given field=value arguments. If sort_by=field is given, sort the results by that field. For example: People.lookupRecords(Last_Name=\"Johnson\", sort_by=\"First_Name\") People.lookupRecords(First_Name=\"George\", Last_Name=\"Washington\") See RecordSet for useful properties offered by the returned object. ADDRESS (row, column, absolute_relative_mode, use_a1_notation, sheet) # ADDRESS # Returns a cell reference as a string. Note This function is not currently implemented in Grist. CHOOSE (index, choice1, choice2) # CHOOSE # Returns an element from a list of choices based on index. Note This function is not currently implemented in Grist. COLUMN (cell_reference=None) # COLUMN # Returns the column number of a specified cell, with A=1 . Note This function is not currently implemented in Grist. COLUMNS (range) # COLUMNS # Returns the number of columns in a specified array or range. Note This function is not currently implemented in Grist. GETPIVOTDATA (value_name, any_pivot_table_cell, original_column_1, pivot_item_1=None, *args) # GETPIVOTDATA # Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings. Note This function is not currently implemented in Grist. HLOOKUP (search_key, range, index, is_sorted) # HLOOKUP # Horizontal lookup. Searches across the first row of a range for a key and returns the value of a specified cell in the column found. Note This function is not currently implemented in Grist. HYPERLINK (url, link_label) # HYPERLINK # Creates a hyperlink inside a cell. Note This function is not currently implemented in Grist. INDEX (reference, row, column) # INDEX # Returns the content of a cell, specified by row and column offset. Note This function is not currently implemented in Grist. INDIRECT (cell_reference_as_string) # INDIRECT # Returns a cell reference specified by a string. Note This function is not currently implemented in Grist. LOOKUP (search_key, search_range_or_search_result_array, result_range=None) # LOOKUP # Looks through a row or column for a key and returns the value of the cell in a result range located in the same position as the search row or column. Note This function is not currently implemented in Grist. MATCH (search_key, range, search_type) # MATCH # Returns the relative position of an item in a range that matches a specified value. Note This function is not currently implemented in Grist. OFFSET (cell_reference, offset_rows, offset_columns, height, width) # OFFSET # Returns a range reference shifted a specified number of rows and columns from a starting cell reference. Note This function is not currently implemented in Grist. ROW (cell_reference) # ROW # Returns the row number of a specified cell. Note This function is not currently implemented in Grist. ROWS (range) # ROWS # Returns the number of rows in a specified array or range. Note This function is not currently implemented in Grist. VLOOKUP (table, **field_value_pairs) # VLOOKUP # Vertical lookup. Searches the given table for a record matching the given field=value arguments. If multiple records match, returns one of them. If none match, returns the special empty record. The returned object is a record whose fields are available using .field syntax. For example, VLOOKUP(Employees, EmployeeID=$EmpID).Salary . Note that VLOOKUP isn\u2019t commonly needed in Grist, since Reference columns are the best way to link data between tables, and allow simple efficient usage such as $Person.Age . VLOOKUP is exactly quivalent to table.lookupOne(**field_value_pairs) . See lookupOne . For example: VLOOKUP(People, First_Name=\"Lewis\", Last_Name=\"Carroll\") VLOOKUP(People, First_Name=\"Lewis\", Last_Name=\"Carroll\").Age Math # ABS (value) # ABS # Returns the absolute value of a number. >>> ABS(2) 2 >>> ABS(-2) 2 >>> ABS(-4) 4 ACOS (value) # ACOS # Returns the inverse cosine of a value, in radians. >>> round(ACOS(-0.5), 9) 2.094395102 >>> round(ACOS(-0.5)*180/PI(), 10) 120.0 ACOSH (value) # ACOSH # Returns the inverse hyperbolic cosine of a number. >>> ACOSH(1) 0.0 >>> round(ACOSH(10), 7) 2.9932228 ARABIC (roman_numeral) # ARABIC # Computes the value of a Roman numeral. >>> ARABIC(\"LVII\") 57 >>> ARABIC('mcmxii') 1912 ASIN (value) # ASIN # Returns the inverse sine of a value, in radians. >>> round(ASIN(-0.5), 9) -0.523598776 >>> round(ASIN(-0.5)*180/PI(), 10) -30.0 >>> round(DEGREES(ASIN(-0.5)), 10) -30.0 ASINH (value) # ASINH # Returns the inverse hyperbolic sine of a number. >>> round(ASINH(-2.5), 9) -1.647231146 >>> round(ASINH(10), 9) 2.99822295 ATAN (value) # ATAN # Returns the inverse tangent of a value, in radians. >>> round(ATAN(1), 9) 0.785398163 >>> ATAN(1)*180/PI() 45.0 >>> DEGREES(ATAN(1)) 45.0 ATAN2 (x, y) # ATAN2 # Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair ( x , y ), in radians. >>> round(ATAN2(1, 1), 9) 0.785398163 >>> round(ATAN2(-1, -1), 9) -2.35619449 >>> ATAN2(-1, -1)*180/PI() -135.0 >>> DEGREES(ATAN2(-1, -1)) -135.0 >>> round(ATAN2(1,2), 9) 1.107148718 ATANH (value) # ATANH # Returns the inverse hyperbolic tangent of a number. >>> round(ATANH(0.76159416), 9) 1.00000001 >>> round(ATANH(-0.1), 9) -0.100335348 CEILING (value, factor=1) # CEILING # Rounds a number up to the nearest multiple of factor, or the nearest integer if the factor is omitted or 1. >>> CEILING(2.5, 1) 3 >>> CEILING(-2.5, -2) -4 >>> CEILING(-2.5, 2) -2 >>> CEILING(1.5, 0.1) 1.5 >>> CEILING(0.234, 0.01) 0.24 COMBIN (n, k) # COMBIN # Returns the number of ways to choose some number of objects from a pool of a given size of objects. >>> COMBIN(8,2) 28 >>> COMBIN(4,2) 6 >>> COMBIN(10,7) 120 COS (angle) # COS # Returns the cosine of an angle provided in radians. >>> round(COS(1.047), 7) 0.5001711 >>> round(COS(60*PI()/180), 10) 0.5 >>> round(COS(RADIANS(60)), 10) 0.5 COSH (value) # COSH # Returns the hyperbolic cosine of any real number. >>> round(COSH(4), 6) 27.308233 >>> round(COSH(EXP(1)), 7) 7.6101251 DEGREES (angle) # DEGREES # Converts an angle value in radians to degrees. >>> round(DEGREES(ACOS(-0.5)), 10) 120.0 >>> DEGREES(PI()) 180.0 EVEN (value) # EVEN # Rounds a number up to the nearest even integer, rounding away from zero. >>> EVEN(1.5) 2 >>> EVEN(3) 4 >>> EVEN(2) 2 >>> EVEN(-1) -2 EXP (exponent) # EXP # Returns Euler\u2019s number, e (~2.718) raised to a power. >>> round(EXP(1), 8) 2.71828183 >>> round(EXP(2), 7) 7.3890561 FACT (value) # FACT # Returns the factorial of a number. >>> FACT(5) 120 >>> FACT(1.9) 1 >>> FACT(0) 1 >>> FACT(1) 1 >>> FACT(-1) Traceback (most recent call last): ... ValueError: factorial() not defined for negative values FACTDOUBLE (value) # FACTDOUBLE # Returns the \u201cdouble factorial\u201d of a number. >>> FACTDOUBLE(6) 48 >>> FACTDOUBLE(7) 105 >>> FACTDOUBLE(3) 3 >>> FACTDOUBLE(4) 8 FLOOR (value, factor=1) # FLOOR # Rounds a number down to the nearest integer multiple of specified significance. >>> FLOOR(3.7,2) 2 >>> FLOOR(-2.5,-2) -2 >>> FLOOR(2.5,-2) Traceback (most recent call last): ... ValueError: factor argument invalid >>> FLOOR(1.58,0.1) 1.5 >>> FLOOR(0.234,0.01) 0.23 GCD (value1, *more_values) # GCD # Returns the greatest common divisor of one or more integers. >>> GCD(5, 2) 1 >>> GCD(24, 36) 12 >>> GCD(7, 1) 1 >>> GCD(5, 0) 5 >>> GCD(0, 5) 5 >>> GCD(5) 5 >>> GCD(14, 42, 21) 7 INT (value) # INT # Rounds a number down to the nearest integer that is less than or equal to it. >>> INT(8.9) 8 >>> INT(-8.9) -9 >>> 19.5-INT(19.5) 0.5 LCM (value1, *more_values) # LCM # Returns the least common multiple of one or more integers. >>> LCM(5, 2) 10 >>> LCM(24, 36) 72 >>> LCM(0, 5) 0 >>> LCM(5) 5 >>> LCM(10, 100) 100 >>> LCM(12, 18) 36 >>> LCM(12, 18, 24) 72 LN (value) # LN # Returns the the logarithm of a number, base e (Euler\u2019s number). >>> round(LN(86), 7) 4.4543473 >>> round(LN(2.7182818), 7) 1.0 >>> round(LN(EXP(3)), 10) 3.0 LOG (value, base=10) # LOG # Returns the the logarithm of a number given a base. >>> LOG(10) 1.0 >>> LOG(8, 2) 3.0 >>> round(LOG(86, 2.7182818), 7) 4.4543473 LOG10 (value) # LOG10 # Returns the the logarithm of a number, base 10. >>> round(LOG10(86), 9) 1.934498451 >>> LOG10(10) 1.0 >>> LOG10(100000) 5.0 >>> LOG10(10**5) 5.0 MOD (dividend, divisor) # MOD # Returns the result of the modulo operator, the remainder after a division operation. >>> MOD(3, 2) 1 >>> MOD(-3, 2) 1 >>> MOD(3, -2) -1 >>> MOD(-3, -2) -1 MROUND (value, factor) # MROUND # Rounds one number to the nearest integer multiple of another. >>> MROUND(10, 3) 9 >>> MROUND(-10, -3) -9 >>> round(MROUND(1.3, 0.2), 10) 1.4 >>> MROUND(5, -2) Traceback (most recent call last): ... ValueError: factor argument invalid MULTINOMIAL (value1, *more_values) # MULTINOMIAL # Returns the factorial of the sum of values divided by the product of the values\u2019 factorials. >>> MULTINOMIAL(2, 3, 4) 1260 >>> MULTINOMIAL(3) 1 >>> MULTINOMIAL(1,2,3) 60 >>> MULTINOMIAL(0,2,4,6) 13860 ODD (value) # ODD # Rounds a number up to the nearest odd integer. >>> ODD(1.5) 3 >>> ODD(3) 3 >>> ODD(2) 3 >>> ODD(-1) -1 >>> ODD(-2) -3 PI () # PI # Returns the value of Pi to 14 decimal places. >>> round(PI(), 9) 3.141592654 >>> round(PI()/2, 9) 1.570796327 >>> round(PI()*9, 8) 28.27433388 POWER (base, exponent) # POWER # Returns a number raised to a power. >>> POWER(5,2) 25.0 >>> round(POWER(98.6,3.2), 3) 2401077.222 >>> round(POWER(4,5.0/4), 9) 5.656854249 PRODUCT (factor1, *more_factors) # PRODUCT # Returns the result of multiplying a series of numbers together. Each argument may be a number or an array. >>> PRODUCT([5,15,30]) 2250 >>> PRODUCT([5,15,30], 2) 4500 >>> PRODUCT(5,15,[30],[2]) 4500 QUOTIENT (dividend, divisor) # QUOTIENT # Returns one number divided by another. >>> QUOTIENT(5, 2) 2 >>> QUOTIENT(4.5, 3.1) 1 >>> QUOTIENT(-10, 3) -3 RADIANS (angle) # RADIANS # Converts an angle value in degrees to radians. >>> round(RADIANS(270), 6) 4.712389 RAND () # RAND # Returns a random number between 0 inclusive and 1 exclusive. RANDBETWEEN (low, high) # RANDBETWEEN # Returns a uniformly random integer between two values, inclusive. ROMAN (number, form_unused=None) # ROMAN # Formats a number in Roman numerals. The second argument is ignored in this implementation. >>> ROMAN(499,0) 'CDXCIX' >>> ROMAN(499.2,0) 'CDXCIX' >>> ROMAN(57) 'LVII' >>> ROMAN(1912) 'MCMXII' ROUND (value, places=0) # ROUND # Rounds a number to a certain number of decimal places according to standard rules. >>> ROUND(2.15, 1) # Excel actually gives the more correct 2.2 2.1 >>> ROUND(2.149, 1) 2.1 >>> ROUND(-1.475, 2) -1.48 >>> ROUND(21.5, -1) 20.0 >>> ROUND(626.3,-3) 1000.0 >>> ROUND(1.98,-1) 0.0 >>> ROUND(-50.55,-2) -100.0 ROUNDDOWN (value, places=0) # ROUNDDOWN # Rounds a number to a certain number of decimal places, always rounding down towards zero. >>> ROUNDDOWN(3.2, 0) 3 >>> ROUNDDOWN(76.9,0) 76 >>> ROUNDDOWN(3.14159, 3) 3.141 >>> ROUNDDOWN(-3.14159, 1) -3.1 >>> ROUNDDOWN(31415.92654, -2) 31400 ROUNDUP (value, places=0) # ROUNDUP # Rounds a number to a certain number of decimal places, always rounding up away from zero. >>> ROUNDUP(3.2,0) 4 >>> ROUNDUP(76.9,0) 77 >>> ROUNDUP(3.14159, 3) 3.142 >>> ROUNDUP(-3.14159, 1) -3.2 >>> ROUNDUP(31415.92654, -2) 31500 SERIESSUM (x, n, m, a) # SERIESSUM # Given parameters x, n, m, and a, returns the power series sum a_1 x^n + a_2 x^(n+m) + \u2026 + a_i*x^(n+(i-1)m), where i is the number of entries in range a . >>> SERIESSUM(1,0,1,1) 1 >>> SERIESSUM(2,1,0,[1,2,3]) 12 >>> SERIESSUM(-3,1,1,[2,4,6]) -132 >>> round(SERIESSUM(PI()/4,0,2,[1,-1./FACT(2),1./FACT(4),-1./FACT(6)]), 6) 0.707103 SIGN (value) # SIGN # Given an input number, returns -1 if it is negative, 1 if positive, and 0 if it is zero. >>> SIGN(10) 1 >>> SIGN(4.0-4.0) 0 >>> SIGN(-0.00001) -1 SIN (angle) # SIN # Returns the sine of an angle provided in radians. >>> round(SIN(PI()), 10) 0.0 >>> SIN(PI()/2) 1.0 >>> round(SIN(30*PI()/180), 10) 0.5 >>> round(SIN(RADIANS(30)), 10) 0.5 SINH (value) # SINH # Returns the hyperbolic sine of any real number. >>> round(2.868*SINH(0.0342*1.03), 7) 0.1010491 SQRT (value) # SQRT # Returns the positive square root of a positive number. >>> SQRT(16) 4.0 >>> SQRT(-16) Traceback (most recent call last): ... ValueError: math domain error >>> SQRT(ABS(-16)) 4.0 SQRTPI (value) # SQRTPI # Returns the positive square root of the product of Pi and the given positive number. >>> round(SQRTPI(1), 6) 1.772454 >>> round(SQRTPI(2), 6) 2.506628 SUBTOTAL (function_code, range1, range2) # SUBTOTAL # Returns a subtotal for a vertical range of cells using a specified aggregation function. Note This function is not currently implemented in Grist. SUM (value1, *more_values) # SUM # Returns the sum of a series of numbers. Each argument may be a number or an array. Non-numeric values are ignored. >>> SUM([5,15,30]) 50 >>> SUM([5.,15,30], 2) 52.0 >>> SUM(5,15,[30],[2]) 52 SUMIF (records, criterion, sum_range) # SUMIF # Returns a conditional sum across a range. Note This function is not currently implemented in Grist. SUMIFS (sum_range, criteria_range1, criterion1, *args) # SUMIFS # Returns the sum of a range depending on multiple criteria. Note This function is not currently implemented in Grist. SUMPRODUCT (array1, *more_arrays) # SUMPRODUCT # Multiplies corresponding components in the given arrays, and returns the sum of those products. >>> SUMPRODUCT([3,8,1,4,6,9], [2,6,5,7,7,3]) 156 >>> SUMPRODUCT([], [], []) 0 >>> SUMPRODUCT([-0.25], [-2], [-3]) -1.5 >>> SUMPRODUCT([-0.25, -0.25], [-2, -2], [-3, -3]) -3.0 SUMSQ (value1, value2) # SUMSQ # Returns the sum of the squares of a series of numbers and/or cells. Note This function is not currently implemented in Grist. TAN (angle) # TAN # Returns the tangent of an angle provided in radians. >>> round(TAN(0.785), 8) 0.99920399 >>> round(TAN(45*PI()/180), 10) 1.0 >>> round(TAN(RADIANS(45)), 10) 1.0 TANH (value) # TANH # Returns the hyperbolic tangent of any real number. >>> round(TANH(-2), 6) -0.964028 >>> TANH(0) 0.0 >>> round(TANH(0.5), 6) 0.462117 TRUNC (value, places=0) # TRUNC # Truncates a number to a certain number of significant digits by omitting less significant digits. >>> TRUNC(8.9) 8 >>> TRUNC(-8.9) -8 >>> TRUNC(0.45) 0 Schedule # SCHEDULE (schedule, start=None, count=10, end=None) # SCHEDULE # Returns the list of datetime objects generated according to the schedule string. Starts at start , which defaults to NOW(). Generates at most count results (10 by default). If end is given, stops there. The schedule has the format \u201cINTERVAL: SLOTS, \u2026\u201d. For example: annual: Jan-15, Apr-15, Jul-15 -- Three times a year on given dates at midnight. annual: 1/15, 4/15, 7/15 -- Same as above. monthly: /1 2pm, /15 2pm -- The 1st and the 15th of each month, at 2pm. 3-months: /10, +1m /20 -- Every 3 months on the 10th of month 1, 20th of month 2. weekly: Mo 9am, Tu 9am, Fr 2pm -- Three times a week at specified times. 2-weeks: Mo, +1w Tu -- Every 2 weeks on Monday of week 1, Tuesday of week 2. daily: 07:30, 21:00 -- Twice a day at specified times. 2-day: 12am, 4pm, +1d 8am -- Three times every two days, evenly spaced. hourly: :15, :45 -- 15 minutes before and after each hour. 4-hour: :00, 1:20, 2:40 -- Three times every 4 hours, evenly spaced. 10-minute: +0s -- Every 10 minutes on the minute. INTERVAL must be either of the form N-unit where N is a number and unit is one of year , month , week , day , hour ; or one of the aliases: annual , monthly , weekly , daily , hourly , which mean 1-year , 1-month , etc. SLOTS support the following units: `Jan-15` or `1/15` -- Month and day of the month; available when INTERVAL is year-based. `/15` -- Day of the month, available when INTERVAL is month-based. `Mon`, `Mo`, `Friday` -- Day of the week (or abbreviation), when INTERVAL is week-based. 10am, 1:30pm, 15:45 -- Time of day, available for day-based or longer intervals. :45, :00 -- Minutes of the hour, available when INTERVAL is hour-based. +1d, +15d -- How many days to add to start of INTERVAL. +1w -- How many weeks to add to start of INTERVAL. +1m -- How many months to add to start of INTERVAL. The SLOTS are always relative to the INTERVAL rather than to start . Week-based intervals start on Sunday. E.g. weekly: +1d, +4d is the same as weekly: Mon, Thu , and generates times on Mondays and Thursdays regardless of start . The first generated time is determined by the unit of the INTERVAL without regard to the multiple. E.g. both \u201c2-week: Mon\u201d and \u201c3-week: Mon\u201d start on the first Monday after start , and then generate either every second or every third Monday after that. Similarly, 24-hour: :00 starts with the first top-of-the-hour after start (not with midnight), and then repeats every 24 hours. To start with the midnight after start , use daily: 0:00 . For interval units of a day or longer, if time-of-day is not specified, it defaults to midnight. The time zone of start determines the time zone of the generated times. >>> def show(dates): return [d.strftime(\"%Y-%m-%d %H:%M\") for d in dates] >>> start = datetime(2018, 9, 4, 14, 0); # 2pm on Tue, Sep 4 2018. >>> show(SCHEDULE('annual: Jan-15, Apr-15, Jul-15, Oct-15', start=start, count=4)) ['2018-10-15 00:00', '2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00'] >>> show(SCHEDULE('annual: 1/15, 4/15, 7/15', start=start, count=4)) ['2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00', '2020-01-15 00:00'] >>> show(SCHEDULE('monthly: /1 2pm, /15 5pm', start=start, count=4)) ['2018-09-15 17:00', '2018-10-01 14:00', '2018-10-15 17:00', '2018-11-01 14:00'] >>> show(SCHEDULE('3-months: /10, +1m /20', start=start, count=4)) ['2018-09-10 00:00', '2018-10-20 00:00', '2018-12-10 00:00', '2019-01-20 00:00'] >>> show(SCHEDULE('weekly: Mo 9am, Tu 9am, Fr 2pm', start=start, count=4)) ['2018-09-07 14:00', '2018-09-10 09:00', '2018-09-11 09:00', '2018-09-14 14:00'] >>> show(SCHEDULE('2-weeks: Mo, +1w Tu', start=start, count=4)) ['2018-09-11 00:00', '2018-09-17 00:00', '2018-09-25 00:00', '2018-10-01 00:00'] >>> show(SCHEDULE('daily: 07:30, 21:00', start=start, count=4)) ['2018-09-04 21:00', '2018-09-05 07:30', '2018-09-05 21:00', '2018-09-06 07:30'] >>> show(SCHEDULE('2-day: 12am, 4pm, +1d 8am', start=start, count=4)) ['2018-09-04 16:00', '2018-09-05 08:00', '2018-09-06 00:00', '2018-09-06 16:00'] >>> show(SCHEDULE('hourly: :15, :45', start=start, count=4)) ['2018-09-04 14:15', '2018-09-04 14:45', '2018-09-04 15:15', '2018-09-04 15:45'] >>> show(SCHEDULE('4-hour: :00, +1H :20, +2H :40', start=start, count=4)) ['2018-09-04 14:00', '2018-09-04 15:20', '2018-09-04 16:40', '2018-09-04 18:00'] Stats # AVEDEV (value1, value2) # AVEDEV # Calculates the average of the magnitudes of deviations of data from a dataset\u2019s mean. Note This function is not currently implemented in Grist. AVERAGE (value, *more_values) # AVERAGE # Returns the numerical average value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> AVERAGE([2, -1.0, 11]) 4.0 >>> AVERAGE([2, -1, 11, \"Hello\"]) 4.0 >>> AVERAGE([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11]) 4.0 >>> AVERAGE(False, True) Traceback (most recent call last): ... ZeroDivisionError: float division by zero AVERAGEA (value, *more_values) # AVERAGEA # Returns the numerical average value in a dataset, counting non-numerical values as 0. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. >>> AVERAGEA([2, -1.0, 11]) 4.0 >>> AVERAGEA([2, -1, 11, \"Hello\"]) 3.0 >>> AVERAGEA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 1.5 >>> AVERAGEA(False, True) 0.5 AVERAGEIF (criteria_range, criterion, average_range=None) # AVERAGEIF # Returns the average of a range depending on criteria. Note This function is not currently implemented in Grist. AVERAGEIFS (average_range, criteria_range1, criterion1, *args) # AVERAGEIFS # Returns the average of a range depending on multiple criteria. Note This function is not currently implemented in Grist. AVERAGE_WEIGHTED (pairs) # AVERAGE_WEIGHTED # Given a list of (value, weight) pairs, finds the average of the values weighted by the corresponding weights. Ignores any pairs with a non-numerical value or weight. If you have two lists, of values and weights, use the Python built-in zip() function to create a list of pairs. >>> AVERAGE_WEIGHTED(((95, .25), (90, .1), (\"X\", .5), (85, .15), (88, .2), (82, .3), (70, None))) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, \"X\", 85, 88, 82, 70], [25, 10, 50, 15, 20, 30, None])) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, False, 85, 88, 82, 70], [.25, .1, .5, .15, .2, .3, True])) 87.7 BINOMDIST (num_successes, num_trials, prob_success, cumulative) # BINOMDIST # Calculates the probability of drawing a certain number of successes (or a maximum number of successes) in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws. Note This function is not currently implemented in Grist. CONFIDENCE (alpha, standard_deviation, pop_size) # CONFIDENCE # Calculates the width of half the confidence interval for a normal distribution. Note This function is not currently implemented in Grist. CORREL (data_y, data_x) # CORREL # Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. COUNT (value, *more_values) # COUNT # Returns the count of numerical values in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> COUNT([2, -1.0, 11]) 3 >>> COUNT([2, -1, 11, \"Hello\"]) 3 >>> COUNT([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 3 >>> COUNT(False, True) 0 COUNTA (value, *more_values) # COUNTA # Returns the count of all values in a dataset, including non-numerical values. Each argument may be a value or an array. >>> COUNTA([2, -1.0, 11]) 3 >>> COUNTA([2, -1, 11, \"Hello\"]) 4 >>> COUNTA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 9 >>> COUNTA(False, True) 2 COVAR (data_y, data_x) # COVAR # Calculates the covariance of a dataset. Note This function is not currently implemented in Grist. CRITBINOM (num_trials, prob_success, target_prob) # CRITBINOM # Calculates the smallest value for which the cumulative binomial distribution is greater than or equal to a specified criteria. Note This function is not currently implemented in Grist. DEVSQ (value1, value2) # DEVSQ # Calculates the sum of squares of deviations based on a sample. Note This function is not currently implemented in Grist. EXPONDIST (x, lambda_, cumulative) # EXPONDIST # Returns the value of the exponential distribution function with a specified lambda at a specified value. Note This function is not currently implemented in Grist. FDIST (x, degrees_freedom1, degrees_freedom2) # FDIST # Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. FISHER (value) # FISHER # Returns the Fisher transformation of a specified value. Note This function is not currently implemented in Grist. FISHERINV (value) # FISHERINV # Returns the inverse Fisher transformation of a specified value. Note This function is not currently implemented in Grist. FORECAST (x, data_y, data_x) # FORECAST # Calculates the expected y-value for a specified x based on a linear regression of a dataset. Note This function is not currently implemented in Grist. F_DIST (x, degrees_freedom1, degrees_freedom2, cumulative) # F_DIST # Calculates the left-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. F_DIST_RT (x, degrees_freedom1, degrees_freedom2) # F_DIST_RT # Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. GEOMEAN (value1, value2) # GEOMEAN # Calculates the geometric mean of a dataset. Note This function is not currently implemented in Grist. HARMEAN (value1, value2) # HARMEAN # Calculates the harmonic mean of a dataset. Note This function is not currently implemented in Grist. HYPGEOMDIST (num_successes, num_draws, successes_in_pop, pop_size) # HYPGEOMDIST # Calculates the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws. Note This function is not currently implemented in Grist. INTERCEPT (data_y, data_x) # INTERCEPT # Calculates the y-value at which the line resulting from linear regression of a dataset will intersect the y-axis (x=0). Note This function is not currently implemented in Grist. KURT (value1, value2) # KURT # Calculates the kurtosis of a dataset, which describes the shape, and in particular the \u201cpeakedness\u201d of that dataset. Note This function is not currently implemented in Grist. LARGE (data, n) # LARGE # Returns the nth largest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist. LOGINV (x, mean, standard_deviation) # LOGINV # Returns the value of the inverse log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist. LOGNORMDIST (x, mean, standard_deviation) # LOGNORMDIST # Returns the value of the log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist. MAX (value, *more_values) # MAX # Returns the maximum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MAX([2, -1.5, 11.5]) 11.5 >>> MAX([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAX(True, -123) -123 >>> MAX(\"123\", -123) -123 >>> MAX(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MAXA (value, *more_values) # MAXA # Returns the maximum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MAXA([2, -1.5, 11.5]) 11.5 >>> MAXA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAXA(True, -123) 1 >>> MAXA(\"123\", -123) 0 >>> MAXA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MEDIAN (value, *more_values) # MEDIAN # Returns the median value in a numeric dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Produces an error if the arguments contain no numbers. The median is the middle number when all values are sorted. So half of the values in the dataset are less than the median, and half of the values are greater. If there is an even number of values in the dataset, returns the average of the two numbers in the middle. >>> MEDIAN(1, 2, 3, 4, 5) 3 >>> MEDIAN(3, 5, 1, 4, 2) 3 >>> MEDIAN(xrange(10)) 4.5 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1), 12.3) 12.3 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1)) Traceback (most recent call last): ... ValueError: MEDIAN requires at least one number MIN (value, *more_values) # MIN # Returns the minimum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MIN([2, -1.5, 11.5]) -1.5 >>> MIN([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MIN(True, 123) 123 >>> MIN(\"-123\", 123) 123 >>> MIN(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MINA (value, *more_values) # MINA # Returns the minimum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MINA([2, -1.5, 11.5]) -1.5 >>> MINA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MINA(True, 123) 1 >>> MINA(\"-123\", 123) 0 >>> MINA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MODE (value1, value2) # MODE # Returns the most commonly occurring value in a dataset. Note This function is not currently implemented in Grist. NEGBINOMDIST (num_failures, num_successes, prob_success) # NEGBINOMDIST # Calculates the probability of drawing a certain number of failures before a certain number of successes given a probability of success in independent trials. Note This function is not currently implemented in Grist. NORMDIST (x, mean, standard_deviation, cumulative) # NORMDIST # Returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist. NORMINV (x, mean, standard_deviation) # NORMINV # Returns the value of the inverse normal distribution function for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist. NORMSDIST (x) # NORMSDIST # Returns the value of the standard normal cumulative distribution function for a specified value. Note This function is not currently implemented in Grist. NORMSINV (x) # NORMSINV # Returns the value of the inverse standard normal distribution function for a specified value. Note This function is not currently implemented in Grist. PEARSON (data_y, data_x) # PEARSON # Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. PERCENTILE (data, percentile) # PERCENTILE # Returns the value at a given percentile of a dataset. Note This function is not currently implemented in Grist. PERCENTRANK (data, value, significant_digits=None) # PERCENTRANK # Returns the percentage rank (percentile) of a specified value in a dataset. Note This function is not currently implemented in Grist. PERCENTRANK_EXC (data, value, significant_digits=None) # PERCENTRANK_EXC # Returns the percentage rank (percentile) from 0 to 1 exclusive of a specified value in a dataset. Note This function is not currently implemented in Grist. PERCENTRANK_INC (data, value, significant_digits=None) # PERCENTRANK_INC # Returns the percentage rank (percentile) from 0 to 1 inclusive of a specified value in a dataset. Note This function is not currently implemented in Grist. PERMUT (n, k) # PERMUT # Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order. Note This function is not currently implemented in Grist. POISSON (x, mean, cumulative) # POISSON # Returns the value of the Poisson distribution function (or Poisson cumulative distribution function) for a specified value and mean. Note This function is not currently implemented in Grist. PROB (data, probabilities, low_limit, high_limit=None) # PROB # Given a set of values and corresponding probabilities, calculates the probability that a value chosen at random falls between two limits. Note This function is not currently implemented in Grist. QUARTILE (data, quartile_number) # QUARTILE # Returns a value nearest to a specified quartile of a dataset. Note This function is not currently implemented in Grist. RANK (value, data, is_ascending=None) # RANK # Returns the rank of a specified value in a dataset. Note This function is not currently implemented in Grist. RANK_AVG (value, data, is_ascending=None) # RANK_AVG # Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the average rank of the entries will be returned. Note This function is not currently implemented in Grist. RANK_EQ (value, data, is_ascending=None) # RANK_EQ # Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the top rank of the entries will be returned. Note This function is not currently implemented in Grist. RSQ (data_y, data_x) # RSQ # Calculates the square of r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. SKEW (value1, value2) # SKEW # Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean. Note This function is not currently implemented in Grist. SLOPE (data_y, data_x) # SLOPE # Calculates the slope of the line resulting from linear regression of a dataset. Note This function is not currently implemented in Grist. SMALL (data, n) # SMALL # Returns the nth smallest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist. STANDARDIZE (value, mean, standard_deviation) # STANDARDIZE # Calculates the normalized equivalent of a random variable given mean and standard deviation of the distribution. Note This function is not currently implemented in Grist. STDEV (value, *more_values) # STDEV # Calculates the standard deviation based on a sample, ignoring non-numerical values. >>> STDEV([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10], 3, 12, 15) 4.810702354423639 >>> STDEV([2, 5, 8, 13, 10], [3, 12, 15]) 4.810702354423639 >>> STDEV([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero STDEVA (value, *more_values) # STDEVA # Calculates the standard deviation based on a sample, setting text to the value 0 . >>> STDEVA([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEVA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], 1, 0, 0) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], [1, 0, 0]) 4.969550137731641 >>> STDEVA([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero STDEVP (value, *more_values) # STDEVP # Calculates the standard deviation based on an entire population, ignoring non-numerical values. >>> STDEVP([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10, True, False, \"Test\"]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10], 3, 12, 15) 4.5 >>> STDEVP([2, 5, 8, 13, 10], [3, 12, 15]) 4.5 >>> STDEVP([5]) 0.0 STDEVPA (value, *more_values) # STDEVPA # Calculates the standard deviation based on an entire population, setting text to the value 0 . >>> STDEVPA([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVPA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], 1, 0, 0) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], [1, 0, 0]) 4.648588495446763 >>> STDEVPA([5]) 0.0 STEYX (data_y, data_x) # STEYX # Calculates the standard error of the predicted y-value for each x in the regression of a dataset. Note This function is not currently implemented in Grist. TDIST (x, degrees_freedom, tails) # TDIST # Calculates the probability for Student\u2019s t-distribution with a given input (x). Note This function is not currently implemented in Grist. TINV (probability, degrees_freedom) # TINV # Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist. TRIMMEAN (data, exclude_proportion) # TRIMMEAN # Calculates the mean of a dataset excluding some proportion of data from the high and low ends of the dataset. Note This function is not currently implemented in Grist. TTEST (range1, range2, tails, type) # TTEST # Returns the probability associated with t-test. Determines whether two samples are likely to have come from the same two underlying populations that have the same mean. Note This function is not currently implemented in Grist. T_INV (probability, degrees_freedom) # T_INV # Calculates the negative inverse of the one-tailed TDIST function. Note This function is not currently implemented in Grist. T_INV_2T (probability, degrees_freedom) # T_INV_2T # Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist. VAR (value1, value2) # VAR # Calculates the variance based on a sample. Note This function is not currently implemented in Grist. VARA (value1, value2) # VARA # Calculates an estimate of variance based on a sample, setting text to the value 0 . Note This function is not currently implemented in Grist. VARP (value1, value2) # VARP # Calculates the variance based on an entire population. Note This function is not currently implemented in Grist. VARPA (value1, value2) # VARPA # Calculates the variance based on an entire population, setting text to the value 0 . Note This function is not currently implemented in Grist. WEIBULL (x, shape, scale, cumulative) # WEIBULL # Returns the value of the Weibull distribution function (or Weibull cumulative distribution function) for a specified shape and scale. Note This function is not currently implemented in Grist. ZTEST (data, value, standard_deviation) # ZTEST # Returns the two-tailed P-value of a Z-test with standard distribution. Note This function is not currently implemented in Grist. Text # CHAR (table_number) # CHAR # Convert a number into a character according to the current Unicode table. Same as unichr(number) . >>> CHAR(65) u'A' >>> CHAR(33) u'!' CLEAN (text) # CLEAN # Returns the text with the non-printable characters removed. This removes both characters with values 0 through 31, and other Unicode characters in the \u201ccontrol characters\u201d category. >>> CLEAN(CHAR(9) + \"Monthly report\" + CHAR(10)) u'Monthly report' CODE (string) # CODE # Returns the numeric Unicode map value of the first character in the string provided. Same as ord(string[0]) . >>> CODE(\"A\") 65 >>> CODE(\"!\") 33 >>> CODE(\"!A\") 33 CONCATENATE (string, *more_strings) # CONCATENATE # Joins together any number of text strings into one string. Also available under the name CONCAT . Same as the Python expression \"\".join(array_of_strings) . >>> CONCATENATE(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCATENATE(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCATENATE(\"abc\") u'abc' >>> CONCAT(0, \"abc\") u'0abc' CONCATENATE (string, *more_strings) # CONCATENATE # Joins together any number of text strings into one string. Also available under the name CONCAT . Same as the Python expression \"\".join(array_of_strings) . >>> CONCATENATE(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCATENATE(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCATENATE(\"abc\") u'abc' >>> CONCAT(0, \"abc\") u'0abc' DOLLAR (number, decimals=2) # DOLLAR # Formats a number into a formatted dollar amount, with decimals rounded to the specified place (. If decimals value is omitted, it defaults to 2. >>> DOLLAR(1234.567) '$1,234.57' >>> DOLLAR(1234.567, -2) '$1,200' >>> DOLLAR(-1234.567, -2) '($1,200)' >>> DOLLAR(-0.123, 4) '($0.1230)' >>> DOLLAR(99.888) '$99.89' >>> DOLLAR(0) '$0.00' >>> DOLLAR(10, 0) '$10' EXACT (string1, string2) # EXACT # Tests whether two strings are identical. Same as string2 == string2 . >>> EXACT(\"word\", \"word\") True >>> EXACT(\"Word\", \"word\") False >>> EXACT(\"w ord\", \"word\") False FIND (find_text, within_text, start_num=1) # FIND # Returns the position at which a string is first found within text. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> FIND(\"M\", \"Miriam McGovern\") 1 >>> FIND(\"m\", \"Miriam McGovern\") 6 >>> FIND(\"M\", \"Miriam McGovern\", 3) 8 >>> FIND(\" #\", \"Hello world # Test\") 12 >>> FIND(\"gle\", \"Google\", 1) 4 >>> FIND(\"GLE\", \"Google\", 1) Traceback (most recent call last): ... ValueError: substring not found >>> FIND(\"page\", \"homepage\") 5 >>> FIND(\"page\", \"homepage\", 6) Traceback (most recent call last): ... ValueError: substring not found FIXED (number, decimals=2, no_commas=False) # FIXED # Formats a number with a fixed number of decimal places (2 by default), and commas. If no_commas is True, then omits the commas. >>> FIXED(1234.567, 1) '1,234.6' >>> FIXED(1234.567, -1) '1,230' >>> FIXED(-1234.567, -1, True) '-1230' >>> FIXED(44.332) '44.33' >>> FIXED(3521.478, 2, False) '3,521.48' >>> FIXED(-3521.478, 1, True) '-3521.5' >>> FIXED(3521.478, 0, True) '3521' >>> FIXED(3521.478, -2, True) '3500' LEFT (string, num_chars=1) # LEFT # Returns a substring of length num_chars from the beginning of the given string. If num_chars is omitted, it is assumed to be 1. Same as string[:num_chars] . >>> LEFT(\"Sale Price\", 4) 'Sale' >>> LEFT('Swededn') 'S' >>> LEFT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid LEN (text) # LEN # Returns the number of characters in a text string. Same as len(text) . >>> LEN(\"Phoenix, AZ\") 11 >>> LEN(\"\") 0 >>> LEN(\" One \") 11 LOWER (text) # LOWER # Converts a specified string to lowercase. Same as text.lower() . >>> LOWER(\"E. E. Cummings\") 'e. e. cummings' >>> LOWER(\"Apt. 2B\") 'apt. 2b' MID (text, start_num, num_chars) # MID # Returns a segment of a string, starting at start_num. The first character in text has start_num 1. >>> MID(\"Fluid Flow\", 1, 5) 'Fluid' >>> MID(\"Fluid Flow\", 7, 20) 'Flow' >>> MID(\"Fluid Flow\", 20, 5) '' >>> MID(\"Fluid Flow\", 0, 5) Traceback (most recent call last): ... ValueError: start_num invalid PROPER (text) # PROPER # Capitalizes each word in a specified string. It converts the first letter of each word to uppercase, and all other letters to lowercase. Same as text.title() . >>> PROPER('this is a TITLE') 'This Is A Title' >>> PROPER('2-way street') '2-Way Street' >>> PROPER('76BudGet') '76Budget' REGEXEXTRACT (text, regular_expression) # REGEXEXTRACT # Extracts the first part of text that matches regular_expression. >>> REGEXEXTRACT(\"Google Doc 101\", \"[0-9]+\") '101' >>> REGEXEXTRACT(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") '826.25' If there is a parenthesized expression, it is returned instead of the whole match. >>> REGEXEXTRACT(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") 'Content' >>> REGEXEXTRACT(\"Foo\", \"Bar\") Traceback (most recent call last): ... ValueError: REGEXEXTRACT text does not match REGEXMATCH (text, regular_expression) # REGEXMATCH # Returns whether a piece of text matches a regular expression. >>> REGEXMATCH(\"Google Doc 101\", \"[0-9]+\") True >>> REGEXMATCH(\"Google Doc\", \"[0-9]+\") False >>> REGEXMATCH(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") True >>> REGEXMATCH(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") True >>> REGEXMATCH(\"Foo\", \"Bar\") False REGEXREPLACE (text, regular_expression, replacement) # REGEXREPLACE # Replaces all parts of text matching the given regular expression with replacement text. >>> REGEXREPLACE(\"Google Doc 101\", \"[0-9]+\", \"777\") 'Google Doc 777' >>> REGEXREPLACE(\"Google Doc\", \"[0-9]+\", \"777\") 'Google Doc' >>> REGEXREPLACE(\"The price is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\", \"315.75\") 'The price is $315.75' >>> REGEXREPLACE(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\", \"Word\") 'Word between brackets' >>> REGEXREPLACE(\"Foo\", \"Bar\", \"Baz\") 'Foo' REPLACE (old_text, start_num, num_chars, new_text) # REPLACE # Replaces part of a text string with a different text string. Start_num is counted from 1. >>> REPLACE(\"abcdefghijk\", 6, 5, \"*\") 'abcde*k' >>> REPLACE(\"2009\", 3, 2, \"10\") '2010' >>> REPLACE('123456', 1, 3, '@') '@456' >>> REPLACE('foo', 1, 0, 'bar') 'barfoo' >>> REPLACE('foo', 0, 1, 'bar') Traceback (most recent call last): ... ValueError: start_num invalid REPT (text, number_times) # REPT # Returns specified text repeated a number of times. Same as text * number_times . The result of the REPT function cannot be longer than 32767 characters, or it raises a ValueError. >>> REPT(\"*-\", 3) '*-*-*-' >>> REPT('-', 10) '----------' >>> REPT('-', 0) '' >>> len(REPT('---', 10000)) 30000 >>> REPT('---', 11000) Traceback (most recent call last): ... ValueError: number_times invalid >>> REPT('-', -1) Traceback (most recent call last): ... ValueError: number_times invalid RIGHT (string, num_chars=1) # RIGHT # Returns a substring of length num_chars from the end of a specified string. If num_chars is omitted, it is assumed to be 1. Same as string[-num_chars:] . >>> RIGHT(\"Sale Price\", 5) 'Price' >>> RIGHT('Stock Number') 'r' >>> RIGHT('Text', 100) 'Text' >>> RIGHT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid SEARCH (find_text, within_text, start_num=1) # SEARCH # Returns the position at which a string is first found within text, ignoring case. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> SEARCH(\"e\", \"Statements\", 6) 7 >>> SEARCH(\"margin\", \"Profit Margin\") 8 >>> SEARCH(\" \", \"Profit Margin\") 7 >>> SEARCH('\"', 'The \"boss\" is here.') 5 >>> SEARCH(\"gle\", \"Google\") 4 >>> SEARCH(\"GLE\", \"Google\") 4 SUBSTITUTE (text, old_text, new_text, instance_num=None) # SUBSTITUTE # Replaces existing text with new text in a string. It is useful when you know the substring of text to replace. Use REPLACE when you know the position of text to replace. If instance_num is given, it specifies which occurrence of old_text to replace. If omitted, all occurrences are replaced. Same as text.replace(old_text, new_text) when instance_num is omitted. >>> SUBSTITUTE(\"Sales Data\", \"Sales\", \"Cost\") 'Cost Data' >>> SUBSTITUTE(\"Quarter 1, 2008\", \"1\", \"2\", 1) 'Quarter 2, 2008' >>> SUBSTITUTE(\"Quarter 1, 2011\", \"1\", \"2\", 3) 'Quarter 1, 2012' T (value) # T # Returns value if value is text, or the empty string when value is not text. >>> T('Text') 'Text' >>> T(826) '' >>> T('826') '826' >>> T(False) '' >>> T('100 points') '100 points' >>> T(AltText('Text')) 'Text' >>> T(float('nan')) '' TEXT (number, format_type) # TEXT # Converts a number into text according to a specified format. It is not yet implemented in Grist. Note This function is not currently implemented in Grist. TRIM (text) # TRIM # Removes all spaces from text except for single spaces between words. Note that TRIM does not remove other whitespace such as tab or newline characters. >>> TRIM(\" First Quarter\\n Earnings \") 'First Quarter\\n Earnings' >>> TRIM(\"\") '' UPPER (text) # UPPER # Converts a specified string to uppercase. Same as text.lower() . >>> UPPER(\"e. e. cummings\") 'E. E. CUMMINGS' >>> UPPER(\"Apt. 2B\") 'APT. 2B' VALUE (text) # VALUE # Converts a string in accepted date, time or number formats into a number or date. >>> VALUE(\"$1,000\") 1000 >>> VALUE(\"16:48:00\") - VALUE(\"12:00:00\") datetime.timedelta(0, 17280) >>> VALUE(\"01/01/2012\") datetime.datetime(2012, 1, 1, 0, 0) >>> VALUE(\"\") 0 >>> VALUE(0) 0 >>> VALUE(\"826\") 826 >>> VALUE(\"-826.123123123\") -826.123123123 >>> VALUE(float('nan')) nan >>> VALUE(\"Invalid\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number >>> VALUE(\"13/13/13\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number","title":"Function reference"},{"location":"functions/#full-power-of-python","text":"Grist uses Python (version 2.7) for formulas. You can use nearly all features of Python and its standard library. See Python documentation . Grist code runs in a secure sandbox, so Python code cannot access anything other than your document. Note that Python is case-sensitive, which applies to all functions, as well as Grist table and column names. The table below lists Grist-specific functions for accessing your document data, as well as a suite of Excel-like functions provided by Grist. Don\u2019t forget also that the entire Python\u2019s standard library is available. Category Functions Grist Record or rec , $Field or rec.Field , $group or rec.group , RecordSet , UserTable , all , lookupOne , lookupRecords Date DATE , DATEADD , DATEDIF , DATEVALUE , DATE_TO_XL , DAY , DAYS , DTIME , EDATE , EOMONTH , HOUR , ISOWEEKNUM , MINUTE , MONTH , NOW , SECOND , TODAY , WEEKDAY , WEEKNUM , XL_TO_DATE , YEAR , YEARFRAC Info CELL , ISBLANK , ISEMAIL , ISERR , ISERROR , ISLOGICAL , ISNA , ISNONTEXT , ISNUMBER , ISREF , ISTEXT , ISURL , N , NA , TYPE Logical AND , FALSE , IF , IFERROR , NOT , OR , TRUE Lookup lookupOne , lookupRecords , ADDRESS , CHOOSE , COLUMN , COLUMNS , GETPIVOTDATA , HLOOKUP , HYPERLINK , INDEX , INDIRECT , LOOKUP , MATCH , OFFSET , ROW , ROWS , VLOOKUP Math ABS , ACOS , ACOSH , ARABIC , ASIN , ASINH , ATAN , ATAN2 , ATANH , CEILING , COMBIN , COS , COSH , DEGREES , EVEN , EXP , FACT , FACTDOUBLE , FLOOR , GCD , INT , LCM , LN , LOG , LOG10 , MOD , MROUND , MULTINOMIAL , ODD , PI , POWER , PRODUCT , QUOTIENT , RADIANS , RAND , RANDBETWEEN , ROMAN , ROUND , ROUNDDOWN , ROUNDUP , SERIESSUM , SIGN , SIN , SINH , SQRT , SQRTPI , SUBTOTAL , SUM , SUMIF , SUMIFS , SUMPRODUCT , SUMSQ , TAN , TANH , TRUNC Schedule SCHEDULE Stats AVEDEV , AVERAGE , AVERAGEA , AVERAGEIF , AVERAGEIFS , AVERAGE_WEIGHTED , BINOMDIST , CONFIDENCE , CORREL , COUNT , COUNTA , COVAR , CRITBINOM , DEVSQ , EXPONDIST , FDIST , FISHER , FISHERINV , FORECAST , F_DIST , F_DIST_RT , GEOMEAN , HARMEAN , HYPGEOMDIST , INTERCEPT , KURT , LARGE , LOGINV , LOGNORMDIST , MAX , MAXA , MEDIAN , MIN , MINA , MODE , NEGBINOMDIST , NORMDIST , NORMINV , NORMSDIST , NORMSINV , PEARSON , PERCENTILE , PERCENTRANK , PERCENTRANK_EXC , PERCENTRANK_INC , PERMUT , POISSON , PROB , QUARTILE , RANK , RANK_AVG , RANK_EQ , RSQ , SKEW , SLOPE , SMALL , STANDARDIZE , STDEV , STDEVA , STDEVP , STDEVPA , STEYX , TDIST , TINV , TRIMMEAN , TTEST , T_INV , T_INV_2T , VAR , VARA , VARP , VARPA , WEIBULL , ZTEST Text CHAR , CLEAN , CODE , CONCATENATE , CONCATENATE , DOLLAR , EXACT , FIND , FIXED , LEFT , LEN , LOWER , MID , PROPER , REGEXEXTRACT , REGEXMATCH , REGEXREPLACE , REPLACE , REPT , RIGHT , SEARCH , SUBSTITUTE , T , TEXT , TRIM , UPPER , VALUE","title":"Full power of Python"},{"location":"functions/#grist","text":"class Record #","title":"Grist"},{"location":"functions/#record","text":"A Record represents a record of data. It is the primary means of accessing values in formulas. A Record for a particular table has a property for each data and formula column in the table. In a formula, $field is translated to rec.field , where rec is the Record for which the formula is being evaluated. For example: def Full_Name(rec, table): return rec.First_Name + ' ' + rec.LastName def Name_Length(rec, table): return len(rec.Full_Name) $ Field or rec .Field #","title":"Record"},{"location":"functions/#field","text":"Access the field named \u201cField\u201d of the current record. E.g. $First_Name or rec.First_Name . $group #","title":"$Field"},{"location":"functions/#group","text":"In a summary view, $group is a special field containing the list of Records that are summarized by the current summary line. E.g. len($group) is the count of those records. See RecordSet for useful properties offered by the returned object. Examples: sum($group.Amount) # Sum of the Amount field in the matching records sum(r.Amount for r in $group) # Same as sum($group.Amount) sum(r.Amount for r in $group if r > 0) # Sum of only the positive amounts sum(r.Shares * r.Price for r in $group) # Sum of shares * price products class RecordSet #","title":"$group"},{"location":"functions/#recordset","text":"A RecordSet represents a collection of records, as returned by Table.lookupRecords() or $group property in summary views. A RecordSet allows iterating through the records: sum(r.Amount for r in Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\")) min(r.DueDate for r in Tasks.lookupRecords(Owner=\"Bob\")) RecordSets also provide a convenient way to access the list of values for a particular field for all the records, as record_set.Field . For example, the examples above are equivalent to: sum(Students.lookupRecords(First_Name=\"John\", Last_Name=\"Doe\").Amount) min(Tasks.lookupRecords(Owner=\"Bob\").DueDate) You can get the number of records in a RecordSet using len , e.g. len($group) . class UserTable #","title":"RecordSet"},{"location":"functions/#usertable","text":"Each data table in the document is represented in the code by an instance of UserTable class. These names are always capitalized. A UserTable provides access to all the records in the table, as well as methods to look up particular records. Every table in the document is available to all formulas. UserTable. all #","title":"UserTable"},{"location":"functions/#all","text":"The list of all the records in this table. For example, this evaluates to the number of records in the table Students . len(Students.all) This evaluates to the sum of the Population field for every record in the table Countries . sum(r.Population for r in Countries.all) UserTable. lookupOne (self, **field_value_pairs) #","title":"all"},{"location":"functions/#lookupone","text":"Returns a Record matching the given field=value arguments. If multiple records match, returns one of them. If none match, returns the special empty record. For example: People.lookupOne(First_Name=\"Lewis\", Last_Name=\"Carroll\") UserTable. lookupRecords (self, **field_value_pairs) #","title":"lookupOne"},{"location":"functions/#lookuprecords","text":"Returns the Records from this table that match the given field=value arguments. If sort_by=field is given, sort the results by that field. For example: People.lookupRecords(Last_Name=\"Johnson\", sort_by=\"First_Name\") People.lookupRecords(First_Name=\"George\", Last_Name=\"Washington\") See RecordSet for useful properties offered by the returned object.","title":"lookupRecords"},{"location":"functions/#date","text":"DATE (year, month, day) #","title":"Date"},{"location":"functions/#date_1","text":"Returns the datetime.datetime object that represents a particular date. The DATE function is most useful in formulas where year, month, and day are formulas, not constants. If year is between 0 and 1899 (inclusive), adds 1900 to calculate the year. >>> DATE(108, 1, 2) datetime.date(2008, 1, 2) >>> DATE(2008, 1, 2) datetime.date(2008, 1, 2) If month is greater than 12, rolls into the following year. >>> DATE(2008, 14, 2) datetime.date(2009, 2, 2) If month is less than 1, subtracts that many months plus 1, from the first month in the year. >>> DATE(2008, -3, 2) datetime.date(2007, 9, 2) If day is greater than the number of days in the given month, rolls into the following months. >>> DATE(2008, 1, 35) datetime.date(2008, 2, 4) If day is less than 1, subtracts that many days plus 1, from the first day of the given month. >>> DATE(2008, 1, -15) datetime.date(2007, 12, 16) DATEADD (start_date, days=0, months=0, years=0, weeks=0) #","title":"DATE"},{"location":"functions/#dateadd","text":"Returns the date a given number of days, months, years, or weeks away from start_date . You may specify arguments in any order if you specify argument names. Use negative values to subtract. For example, DATEADD(date, 1) is the same as DATEADD(date, days=1) , ands adds one day to date . DATEADD(date, years=1, days=-1) adds one year minus one day. >>> DATEADD(DATE(2011, 1, 15), 1) datetime.date(2011, 1, 16) >>> DATEADD(DATE(2011, 1, 15), months=1, days=-1) datetime.date(2011, 2, 14) >>> DATEADD(DATE(2011, 1, 15), years=-2, months=1, days=3, weeks=2) datetime.date(2009, 3, 4) >>> DATEADD(DATE(1975, 4, 30), years=50, weeks=-5) datetime.date(2025, 3, 26) DATEDIF (start_date, end_date, unit) #","title":"DATEADD"},{"location":"functions/#datedif","text":"Calculates the number of days, months, or years between two dates. Unit indicates the type of information that you want returned: \u201cY\u201d: The number of complete years in the period. \u201cM\u201d: The number of complete months in the period. \u201cD\u201d: The number of days in the period. \u201cMD\u201d: The difference between the days in start_date and end_date. The months and years of the dates are ignored. \u201cYM\u201d: The difference between the months in start_date and end_date. The days and years of the dates are ignored. \u201cYD\u201d: The difference between the days of start_date and end_date. The years of the dates are ignored. Two complete years in the period (2) >>> DATEDIF(DATE(2001, 1, 1), DATE(2003, 1, 1), \"Y\") 2 440 days between June 1, 2001, and August 15, 2002 (440) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"D\") 440 75 days between June 1 and August 15, ignoring the years of the dates (75) >>> DATEDIF(DATE(2001, 6, 1), DATE(2012, 8, 15), \"YD\") 75 The difference between 1 and 15, ignoring the months and the years of the dates (14) >>> DATEDIF(DATE(2001, 6, 1), DATE(2002, 8, 15), \"MD\") 14 DATEVALUE (date_string, tz=None) #","title":"DATEDIF"},{"location":"functions/#datevalue","text":"Converts a date that is stored as text to a datetime object. >>> DATEVALUE(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"30-Jan-2008\") datetime.datetime(2008, 1, 30, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"2008-12-11\") datetime.datetime(2008, 12, 11, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DATEVALUE(\"5-JUL\").replace(year=2000) datetime.datetime(2000, 7, 5, 0, 0, tzinfo=moment.tzinfo('America/New_York')) In case of ambiguity, prefer M/D/Y format. >>> DATEVALUE(\"1/2/3\") datetime.datetime(2003, 1, 2, 0, 0, tzinfo=moment.tzinfo('America/New_York')) DATE_TO_XL (date_value) #","title":"DATEVALUE"},{"location":"functions/#date_to_xl","text":"Converts a Python date or datetime object to the serial number as used by Excel, with December 30, 1899 as serial number 1. See XL_TO_DATE for more explanation. >>> DATE_TO_XL(datetime.date(2008, 1, 1)) 39448.0 >>> DATE_TO_XL(datetime.date(2012, 3, 14)) 40982.0 >>> DATE_TO_XL(datetime.datetime(2012, 3, 14, 1, 30)) 40982.0625 DAY (date) #","title":"DATE_TO_XL"},{"location":"functions/#day","text":"Returns the day of a date, as an integer ranging from 1 to 31. Same as date.day . >>> DAY(DATE(2011, 4, 15)) 15 >>> DAY(\"5/31/2012\") 31 >>> DAY(datetime.datetime(1900, 1, 1)) 1 DAYS (end_date, start_date) #","title":"DAY"},{"location":"functions/#days","text":"Returns the number of days between two dates. Same as (end_date - start_date).days . >>> DAYS(\"3/15/11\",\"2/1/11\") 42 >>> DAYS(DATE(2011, 12, 31), DATE(2011, 1, 1)) 364 >>> DAYS(\"2/1/11\", \"3/15/11\") -42 DTIME (value, tz=None) #","title":"DAYS"},{"location":"functions/#dtime","text":"Returns the value converted to a python datetime object. The value may be a string , date (interpreted as midnight on that day), time (interpreted as a time-of-day today), or an existing datetime . The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. If the input is itself a datetime with the timezone set, it is returned unchanged (no changes to its timezone). >>> DTIME(datetime.date(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.date(2017, 1, 1), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('Europe/Paris')) >>> DTIME(datetime.datetime(2017, 1, 1)) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC'))) datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(datetime.datetime(2017, 1, 1, tzinfo=moment.tzinfo('UTC')), 'Europe/Paris') datetime.datetime(2017, 1, 1, 0, 0, tzinfo=moment.tzinfo('UTC')) >>> DTIME(\"1/1/2008\") datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) EDATE (start_date, months) #","title":"DTIME"},{"location":"functions/#edate","text":"Returns the date that is the given number of months before or after start_date . Use EDATE to calculate maturity dates or due dates that fall on the same day of the month as the date of issue. >>> EDATE(DATE(2011, 1, 15), 1) datetime.date(2011, 2, 15) >>> EDATE(DATE(2011, 1, 15), -1) datetime.date(2010, 12, 15) >>> EDATE(DATE(2011, 1, 15), 2) datetime.date(2011, 3, 15) >>> EDATE(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 1) >>> EDATE(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 1) EOMONTH (start_date, months) #","title":"EDATE"},{"location":"functions/#eomonth","text":"Returns the date for the last day of the month that is the indicated number of months before or after start_date. Use EOMONTH to calculate maturity dates or due dates that fall on the last day of the month. >>> EOMONTH(DATE(2011, 1, 1), 1) datetime.date(2011, 2, 28) >>> EOMONTH(DATE(2011, 1, 15), -3) datetime.date(2010, 10, 31) >>> EOMONTH(DATE(2012, 3, 1), 10) datetime.date(2013, 1, 31) >>> EOMONTH(DATE(2012, 5, 1), -2) datetime.date(2012, 3, 31) HOUR (time) #","title":"EOMONTH"},{"location":"functions/#hour","text":"Same as time.hour . >>> HOUR(XL_TO_DATE(0.75)) 18 >>> HOUR(\"7/18/2011 7:45\") 7 >>> HOUR(\"4/21/2012\") 0 ISOWEEKNUM (date) #","title":"HOUR"},{"location":"functions/#isoweeknum","text":"Returns the ISO week number of the year for a given date. >>> ISOWEEKNUM(\"3/9/2012\") 10 >>> [ISOWEEKNUM(DATE(2000 + y, 1, 1)) for y in [0,1,2,3,4,5,6,7,8]] [52, 1, 1, 1, 1, 53, 52, 1, 1] MINUTE (time) #","title":"ISOWEEKNUM"},{"location":"functions/#minute","text":"Returns the minutes of datetime , as an integer from 0 to 59. Same as time.minute . >>> MINUTE(XL_TO_DATE(0.75)) 0 >>> MINUTE(\"7/18/2011 7:45\") 45 >>> MINUTE(\"12:59:00 PM\") 59 >>> MINUTE(datetime.time(12, 58, 59)) 58 MONTH (date) #","title":"MINUTE"},{"location":"functions/#month","text":"Returns the month of a date represented, as an integer from from 1 (January) to 12 (December). Same as date.month . >>> MONTH(DATE(2011, 4, 15)) 4 >>> MONTH(\"5/31/2012\") 5 >>> MONTH(datetime.datetime(1900, 1, 1)) 1 NOW (tz=None) #","title":"MONTH"},{"location":"functions/#now","text":"Returns the datetime object for the current time. SECOND (time) #","title":"NOW"},{"location":"functions/#second","text":"Returns the seconds of datetime , as an integer from 0 to 59. Same as time.second . >>> SECOND(XL_TO_DATE(0.75)) 0 >>> SECOND(\"7/18/2011 7:45:13\") 13 >>> SECOND(datetime.time(12, 58, 59)) 59 TODAY () #","title":"SECOND"},{"location":"functions/#today","text":"Returns the date object for the current date. WEEKDAY (date, return_type=1) #","title":"TODAY"},{"location":"functions/#weekday","text":"Returns the day of the week corresponding to a date. The day is given as an integer, ranging from 1 (Sunday) to 7 (Saturday), by default. Return_type determines the type of the returned value. 1 (default) - Returns 1 (Sunday) through 7 (Saturday). 2 - Returns 1 (Monday) through 7 (Sunday). 3 - Returns 0 (Monday) through 6 (Sunday). 11 - Returns 1 (Monday) through 7 (Sunday). 12 - Returns 1 (Tuesday) through 7 (Monday). 13 - Returns 1 (Wednesday) through 7 (Tuesday). 14 - Returns 1 (Thursday) through 7 (Wednesday). 15 - Returns 1 (Friday) through 7 (Thursday). 16 - Returns 1 (Saturday) through 7 (Friday). 17 - Returns 1 (Sunday) through 7 (Saturday). >>> WEEKDAY(DATE(2008, 2, 14)) 5 >>> WEEKDAY(DATE(2012, 3, 1)) 5 >>> WEEKDAY(DATE(2012, 3, 1), 1) 5 >>> WEEKDAY(DATE(2012, 3, 1), 2) 4 >>> WEEKDAY(\"3/1/2012\", 3) 3 WEEKNUM (date, return_type=1) #","title":"WEEKDAY"},{"location":"functions/#weeknum","text":"Returns the week number of a specific date. For example, the week containing January 1 is the first week of the year, and is numbered week 1. Return_type determines which week is considered the first week of the year. 1 (default) - Week 1 is the first week starting Sunday that contains January 1. 2 - Week 1 is the first week starting Monday that contains January 1. 11 - Week 1 is the first week starting Monday that contains January 1. 12 - Week 1 is the first week starting Tuesday that contains January 1. 13 - Week 1 is the first week starting Wednesday that contains January 1. 14 - Week 1 is the first week starting Thursday that contains January 1. 15 - Week 1 is the first week starting Friday that contains January 1. 16 - Week 1 is the first week starting Saturday that contains January 1. 17 - Week 1 is the first week starting Sunday that contains January 1. 21 - ISO 8601 Approach: Week 1 is the first week starting Monday that contains January 4. Equivalently, it is the week that contains the first Thursday of the year. >>> WEEKNUM(DATE(2012, 3, 9)) 10 >>> WEEKNUM(DATE(2012, 3, 9), 2) 11 >>> WEEKNUM('1/1/1900') 1 >>> WEEKNUM('2/1/1900') 5 XL_TO_DATE (value, tz=None) #","title":"WEEKNUM"},{"location":"functions/#xl_to_date","text":"Converts a provided Excel serial number representing a date into a datetime object. Value is interpreted as the number of days since December 30, 1899. (This corresponds to Google Sheets interpretation. Excel starts with Dec. 31, 1899 but wrongly considers 1900 to be a leap year. Excel for Mac should be configured to use 1900 date system, i.e. uncheck \u201cUse the 1904 date system\u201d option.) The returned datetime will have its timezone set to the tz argument, or the document\u2019s default timezone when tz is omitted or None. >>> XL_TO_DATE(41100.1875) datetime.datetime(2012, 7, 10, 4, 30, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(39448) datetime.datetime(2008, 1, 1, 0, 0, tzinfo=moment.tzinfo('America/New_York')) >>> XL_TO_DATE(40982.0625) datetime.datetime(2012, 3, 14, 1, 30, tzinfo=moment.tzinfo('America/New_York')) YEAR (date) #","title":"XL_TO_DATE"},{"location":"functions/#year","text":"Returns the year corresponding to a date as an integer. Same as date.year . >>> YEAR(DATE(2011, 4, 15)) 2011 >>> YEAR(\"5/31/2030\") 2030 >>> YEAR(datetime.datetime(1900, 1, 1)) 1900 YEARFRAC (start_date, end_date, basis=0) #","title":"YEAR"},{"location":"functions/#yearfrac","text":"Calculates the fraction of the year represented by the number of whole days between two dates. Basis is the type of day count basis to use. 0 (default) - US (NASD) 30/360 1 - Actual/actual 2 - Actual/360 3 - Actual/365 4 - European 30/360 -1 - Actual/actual (Google Sheets variation) This function is useful for financial calculations. For compatibility with Excel, it defaults to using the NASD standard calendar. For use in non-financial settings, option -1 is likely the best choice. See https://en.wikipedia.org/wiki/360-day_calendar for explanation of the US 30/360 and European 30/360 methods. See http://www.dwheeler.com/yearfrac/ for analysis of Excel\u2019s particular implementation. Basis -1 is similar to 1 , but differs from Excel when dates span both leap and non-leap years. It matches the calculation in Google Sheets, counting the days in each year as a fraction of that year\u2019s length. Fraction of the year between 1/1/2012 and 7/30/12, omitting the Basis argument. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30)) '0.58055556' Fraction between same dates, using the Actual/Actual basis argument. Because 2012 is a Leap year, it has a 366 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 1) '0.57650273' Fraction between same dates, using the Actual/365 basis argument. Uses a 365 day basis. >>> \"%.8f\" % YEARFRAC(DATE(2012, 1, 1), DATE(2012, 7, 30), 3) '0.57808219'","title":"YEARFRAC"},{"location":"functions/#info","text":"CELL (info_type, reference) #","title":"Info"},{"location":"functions/#cell","text":"Returns the requested information about the specified cell. This is not implemented in Grist Note This function is not currently implemented in Grist. ISBLANK (value) #","title":"CELL"},{"location":"functions/#isblank","text":"Returns whether a value refers to an empty cell. It isn\u2019t implemented in Grist. To check for an empty string, use value == \"\" . Note This function is not currently implemented in Grist. ISEMAIL (value) #","title":"ISBLANK"},{"location":"functions/#isemail","text":"Returns whether a value is a valid email address. Note that checking email validity is not an exact science. The technical standard considers many email addresses valid that are not used in practice, and would not be considered valid by most users. Instead, we follow Google Sheets implementation, with some differences, noted below. >>> ISEMAIL(\"Abc.123@example.com\") True >>> ISEMAIL(\"Bob_O-Reilly+tag@example.com\") True >>> ISEMAIL(\"John Doe\") False >>> ISEMAIL(\"john@aol...com\") False ISERR (value) #","title":"ISEMAIL"},{"location":"functions/#iserr","text":"Checks whether a value is an error. In other words, it returns true if using value directly would raise an exception. NOTE: Grist implements this by automatically wrapping the argument to use lazy evaluation. A more Pythonic approach to checking for errors is: try: ... value ... except Exception, err: ... do something about the error ... For example: >>> ISERR(\"Hello\") False ISERROR (value) #","title":"ISERR"},{"location":"functions/#iserror","text":"Checks whether a value is an error or an invalid value. It is similar to ISERR , but also returns true for an invalid value such as NaN or a text value in a Numeric column. NOTE: Grist implements this by automatically wrapping the argument to use lazy evaluation. >>> ISERROR(\"Hello\") False >>> ISERROR(AltText(\"fail\")) True >>> ISERROR(float('nan')) True ISLOGICAL (value) #","title":"ISERROR"},{"location":"functions/#islogical","text":"Checks whether a value is True or False . >>> ISLOGICAL(True) True >>> ISLOGICAL(False) True >>> ISLOGICAL(0) False >>> ISLOGICAL(None) False >>> ISLOGICAL(\"Test\") False ISNA (value) #","title":"ISLOGICAL"},{"location":"functions/#isna","text":"Checks whether a value is the error #N/A . >>> ISNA(float('nan')) True >>> ISNA(0.0) False >>> ISNA('text') False >>> ISNA(float('-inf')) False ISNONTEXT (value) #","title":"ISNA"},{"location":"functions/#isnontext","text":"Checks whether a value is non-textual. >>> ISNONTEXT(\"asdf\") False >>> ISNONTEXT(\"\") False >>> ISNONTEXT(AltText(\"text\")) False >>> ISNONTEXT(17.0) True >>> ISNONTEXT(None) True >>> ISNONTEXT(datetime.date(2011, 1, 1)) True ISNUMBER (value) #","title":"ISNONTEXT"},{"location":"functions/#isnumber","text":"Checks whether a value is a number. >>> ISNUMBER(17) True >>> ISNUMBER(-123.123423) True >>> ISNUMBER(False) True >>> ISNUMBER(float('nan')) True >>> ISNUMBER(float('inf')) True >>> ISNUMBER('17') False >>> ISNUMBER(None) False >>> ISNUMBER(datetime.date(2011, 1, 1)) False ISREF (value) #","title":"ISNUMBER"},{"location":"functions/#isref","text":"Checks whether a value is a table record. For example, if a column person is of type Reference to the People table, then ISREF($person) is True. Similarly, ISREF(People.lookupOne(name=$name)) is True. For any other type of value, ISREF() would evaluate to False. >>> ISREF(17) False >>> ISREF(\"Roger\") False ISTEXT (value) #","title":"ISREF"},{"location":"functions/#istext","text":"Checks whether a value is text. >>> ISTEXT(\"asdf\") True >>> ISTEXT(\"\") True >>> ISTEXT(AltText(\"text\")) True >>> ISTEXT(17.0) False >>> ISTEXT(None) False >>> ISTEXT(datetime.date(2011, 1, 1)) False ISURL (value) #","title":"ISTEXT"},{"location":"functions/#isurl","text":"Checks whether a value is a valid URL. It does not need to be fully qualified, or to include \u201chttp://\u201d and \u201cwww\u201d. It does not follow a standard, but attempts to work similarly to ISURL in Google Sheets, and to return True for text that is likely a URL. Valid protocols include ftp, http, https, gopher, mailto, news, telnet, and aim. >>> ISURL(\"http://www.getgrist.com\") True >>> ISURL(\"https://foo.com/test_(wikipedia)#cite-1\") True >>> ISURL(\"mailto://user@example.com\") True >>> ISURL(\"http:///a\") False N (value) #","title":"ISURL"},{"location":"functions/#n","text":"Returns the value converted to a number. True/False are converted to 1/0. A date is converted to Excel-style serial number of the date. Anything else is converted to 0. >>> N(7) 7 >>> N(7.1) 7.1 >>> N(\"Even\") 0 >>> N(\"7\") 0 >>> N(True) 1 >>> N(datetime.datetime(2011, 4, 17)) 40650.0 NA () #","title":"N"},{"location":"functions/#na","text":"Returns the \u201cvalue not available\u201d error, #N/A . >>> math.isnan(NA()) True TYPE (value) #","title":"NA"},{"location":"functions/#type","text":"Returns a number associated with the type of data passed into the function. This is not implemented in Grist. Use isinstance(value, type) or type(value) . Note This function is not currently implemented in Grist.","title":"TYPE"},{"location":"functions/#logical","text":"AND (logical_expression, *logical_expressions) #","title":"Logical"},{"location":"functions/#and","text":"Returns True if all of the arguments are logically true, and False if any are false. Same as all([value1, value2, ...]) . >>> AND(1) True >>> AND(0) False >>> AND(1, 1) True >>> AND(1,2,3,4) True >>> AND(1,2,3,4,0) False FALSE () #","title":"AND"},{"location":"functions/#false","text":"Returns the logical value False . You may also use the value False directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> FALSE() False IF (logical_expression, value_if_true, value_if_false) #","title":"FALSE"},{"location":"functions/#if","text":"Returns one value if a logical expression is True and another if it is False . The equivalent Python expression is: value_if_true if logical_expression else value_if_false Since Grist supports multi-line formulas, you may also use Python blocks such as: if logical_expression: return value_if_true else: return value_if_false NOTE: Grist follows Excel model by only evaluating one of the value expressions, by automatically wrapping the expressions to use lazy evaluation. This allows IF(False, 1/0, 1) to evaluate to 1 rather than raise an exception. >>> IF(12, \"Yes\", \"No\") 'Yes' >>> IF(None, \"Yes\", \"No\") 'No' >>> IF(True, 0.85, 0.0) 0.85 >>> IF(False, 0.85, 0.0) 0.0 IFERROR (value, value_if_error=\u201d\u201c) #","title":"IF"},{"location":"functions/#iferror","text":"Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent. NOTE: Grist handles values that raise an exception by wrapping them to use lazy evaluation. >>> IFERROR(float('nan'), \"**NAN**\") '**NAN**' >>> IFERROR(17.17, \"**NAN**\") 17.17 >>> IFERROR(\"Text\") 'Text' >>> IFERROR(AltText(\"hello\")) '' NOT (logical_expression) #","title":"IFERROR"},{"location":"functions/#not","text":"True . Same as not logical_expression . >>> NOT(123) False >>> NOT(0) True OR (logical_expression, *logical_expressions) #","title":"NOT"},{"location":"functions/#or","text":"Returns True if any of the arguments is logically true, and false if all of the arguments are false. Same as any([value1, value2, ...]) . >>> OR(1) True >>> OR(0) False >>> OR(1, 1) True >>> OR(0, 1) True >>> OR(0, 0) False >>> OR(0,False,0.0,\"\",None) False >>> OR(0,None,3,0) True TRUE () #","title":"OR"},{"location":"functions/#true","text":"Returns the logical value True . You may also use the value True directly. This function is provided primarily for compatibility with other spreadsheet programs. >>> TRUE() True","title":"TRUE"},{"location":"functions/#lookup","text":"UserTable. lookupOne (self, **field_value_pairs) #","title":"Lookup"},{"location":"functions/#lookupone_1","text":"Returns a Record matching the given field=value arguments. If multiple records match, returns one of them. If none match, returns the special empty record. For example: People.lookupOne(First_Name=\"Lewis\", Last_Name=\"Carroll\") UserTable. lookupRecords (self, **field_value_pairs) #","title":"lookupOne"},{"location":"functions/#lookuprecords_1","text":"Returns the Records from this table that match the given field=value arguments. If sort_by=field is given, sort the results by that field. For example: People.lookupRecords(Last_Name=\"Johnson\", sort_by=\"First_Name\") People.lookupRecords(First_Name=\"George\", Last_Name=\"Washington\") See RecordSet for useful properties offered by the returned object. ADDRESS (row, column, absolute_relative_mode, use_a1_notation, sheet) #","title":"lookupRecords"},{"location":"functions/#address","text":"Returns a cell reference as a string. Note This function is not currently implemented in Grist. CHOOSE (index, choice1, choice2) #","title":"ADDRESS"},{"location":"functions/#choose","text":"Returns an element from a list of choices based on index. Note This function is not currently implemented in Grist. COLUMN (cell_reference=None) #","title":"CHOOSE"},{"location":"functions/#column","text":"Returns the column number of a specified cell, with A=1 . Note This function is not currently implemented in Grist. COLUMNS (range) #","title":"COLUMN"},{"location":"functions/#columns","text":"Returns the number of columns in a specified array or range. Note This function is not currently implemented in Grist. GETPIVOTDATA (value_name, any_pivot_table_cell, original_column_1, pivot_item_1=None, *args) #","title":"COLUMNS"},{"location":"functions/#getpivotdata","text":"Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings. Note This function is not currently implemented in Grist. HLOOKUP (search_key, range, index, is_sorted) #","title":"GETPIVOTDATA"},{"location":"functions/#hlookup","text":"Horizontal lookup. Searches across the first row of a range for a key and returns the value of a specified cell in the column found. Note This function is not currently implemented in Grist. HYPERLINK (url, link_label) #","title":"HLOOKUP"},{"location":"functions/#hyperlink","text":"Creates a hyperlink inside a cell. Note This function is not currently implemented in Grist. INDEX (reference, row, column) #","title":"HYPERLINK"},{"location":"functions/#index","text":"Returns the content of a cell, specified by row and column offset. Note This function is not currently implemented in Grist. INDIRECT (cell_reference_as_string) #","title":"INDEX"},{"location":"functions/#indirect","text":"Returns a cell reference specified by a string. Note This function is not currently implemented in Grist. LOOKUP (search_key, search_range_or_search_result_array, result_range=None) #","title":"INDIRECT"},{"location":"functions/#lookup_1","text":"Looks through a row or column for a key and returns the value of the cell in a result range located in the same position as the search row or column. Note This function is not currently implemented in Grist. MATCH (search_key, range, search_type) #","title":"LOOKUP"},{"location":"functions/#match","text":"Returns the relative position of an item in a range that matches a specified value. Note This function is not currently implemented in Grist. OFFSET (cell_reference, offset_rows, offset_columns, height, width) #","title":"MATCH"},{"location":"functions/#offset","text":"Returns a range reference shifted a specified number of rows and columns from a starting cell reference. Note This function is not currently implemented in Grist. ROW (cell_reference) #","title":"OFFSET"},{"location":"functions/#row","text":"Returns the row number of a specified cell. Note This function is not currently implemented in Grist. ROWS (range) #","title":"ROW"},{"location":"functions/#rows","text":"Returns the number of rows in a specified array or range. Note This function is not currently implemented in Grist. VLOOKUP (table, **field_value_pairs) #","title":"ROWS"},{"location":"functions/#vlookup","text":"Vertical lookup. Searches the given table for a record matching the given field=value arguments. If multiple records match, returns one of them. If none match, returns the special empty record. The returned object is a record whose fields are available using .field syntax. For example, VLOOKUP(Employees, EmployeeID=$EmpID).Salary . Note that VLOOKUP isn\u2019t commonly needed in Grist, since Reference columns are the best way to link data between tables, and allow simple efficient usage such as $Person.Age . VLOOKUP is exactly quivalent to table.lookupOne(**field_value_pairs) . See lookupOne . For example: VLOOKUP(People, First_Name=\"Lewis\", Last_Name=\"Carroll\") VLOOKUP(People, First_Name=\"Lewis\", Last_Name=\"Carroll\").Age","title":"VLOOKUP"},{"location":"functions/#math","text":"ABS (value) #","title":"Math"},{"location":"functions/#abs","text":"Returns the absolute value of a number. >>> ABS(2) 2 >>> ABS(-2) 2 >>> ABS(-4) 4 ACOS (value) #","title":"ABS"},{"location":"functions/#acos","text":"Returns the inverse cosine of a value, in radians. >>> round(ACOS(-0.5), 9) 2.094395102 >>> round(ACOS(-0.5)*180/PI(), 10) 120.0 ACOSH (value) #","title":"ACOS"},{"location":"functions/#acosh","text":"Returns the inverse hyperbolic cosine of a number. >>> ACOSH(1) 0.0 >>> round(ACOSH(10), 7) 2.9932228 ARABIC (roman_numeral) #","title":"ACOSH"},{"location":"functions/#arabic","text":"Computes the value of a Roman numeral. >>> ARABIC(\"LVII\") 57 >>> ARABIC('mcmxii') 1912 ASIN (value) #","title":"ARABIC"},{"location":"functions/#asin","text":"Returns the inverse sine of a value, in radians. >>> round(ASIN(-0.5), 9) -0.523598776 >>> round(ASIN(-0.5)*180/PI(), 10) -30.0 >>> round(DEGREES(ASIN(-0.5)), 10) -30.0 ASINH (value) #","title":"ASIN"},{"location":"functions/#asinh","text":"Returns the inverse hyperbolic sine of a number. >>> round(ASINH(-2.5), 9) -1.647231146 >>> round(ASINH(10), 9) 2.99822295 ATAN (value) #","title":"ASINH"},{"location":"functions/#atan","text":"Returns the inverse tangent of a value, in radians. >>> round(ATAN(1), 9) 0.785398163 >>> ATAN(1)*180/PI() 45.0 >>> DEGREES(ATAN(1)) 45.0 ATAN2 (x, y) #","title":"ATAN"},{"location":"functions/#atan2","text":"Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair ( x , y ), in radians. >>> round(ATAN2(1, 1), 9) 0.785398163 >>> round(ATAN2(-1, -1), 9) -2.35619449 >>> ATAN2(-1, -1)*180/PI() -135.0 >>> DEGREES(ATAN2(-1, -1)) -135.0 >>> round(ATAN2(1,2), 9) 1.107148718 ATANH (value) #","title":"ATAN2"},{"location":"functions/#atanh","text":"Returns the inverse hyperbolic tangent of a number. >>> round(ATANH(0.76159416), 9) 1.00000001 >>> round(ATANH(-0.1), 9) -0.100335348 CEILING (value, factor=1) #","title":"ATANH"},{"location":"functions/#ceiling","text":"Rounds a number up to the nearest multiple of factor, or the nearest integer if the factor is omitted or 1. >>> CEILING(2.5, 1) 3 >>> CEILING(-2.5, -2) -4 >>> CEILING(-2.5, 2) -2 >>> CEILING(1.5, 0.1) 1.5 >>> CEILING(0.234, 0.01) 0.24 COMBIN (n, k) #","title":"CEILING"},{"location":"functions/#combin","text":"Returns the number of ways to choose some number of objects from a pool of a given size of objects. >>> COMBIN(8,2) 28 >>> COMBIN(4,2) 6 >>> COMBIN(10,7) 120 COS (angle) #","title":"COMBIN"},{"location":"functions/#cos","text":"Returns the cosine of an angle provided in radians. >>> round(COS(1.047), 7) 0.5001711 >>> round(COS(60*PI()/180), 10) 0.5 >>> round(COS(RADIANS(60)), 10) 0.5 COSH (value) #","title":"COS"},{"location":"functions/#cosh","text":"Returns the hyperbolic cosine of any real number. >>> round(COSH(4), 6) 27.308233 >>> round(COSH(EXP(1)), 7) 7.6101251 DEGREES (angle) #","title":"COSH"},{"location":"functions/#degrees","text":"Converts an angle value in radians to degrees. >>> round(DEGREES(ACOS(-0.5)), 10) 120.0 >>> DEGREES(PI()) 180.0 EVEN (value) #","title":"DEGREES"},{"location":"functions/#even","text":"Rounds a number up to the nearest even integer, rounding away from zero. >>> EVEN(1.5) 2 >>> EVEN(3) 4 >>> EVEN(2) 2 >>> EVEN(-1) -2 EXP (exponent) #","title":"EVEN"},{"location":"functions/#exp","text":"Returns Euler\u2019s number, e (~2.718) raised to a power. >>> round(EXP(1), 8) 2.71828183 >>> round(EXP(2), 7) 7.3890561 FACT (value) #","title":"EXP"},{"location":"functions/#fact","text":"Returns the factorial of a number. >>> FACT(5) 120 >>> FACT(1.9) 1 >>> FACT(0) 1 >>> FACT(1) 1 >>> FACT(-1) Traceback (most recent call last): ... ValueError: factorial() not defined for negative values FACTDOUBLE (value) #","title":"FACT"},{"location":"functions/#factdouble","text":"Returns the \u201cdouble factorial\u201d of a number. >>> FACTDOUBLE(6) 48 >>> FACTDOUBLE(7) 105 >>> FACTDOUBLE(3) 3 >>> FACTDOUBLE(4) 8 FLOOR (value, factor=1) #","title":"FACTDOUBLE"},{"location":"functions/#floor","text":"Rounds a number down to the nearest integer multiple of specified significance. >>> FLOOR(3.7,2) 2 >>> FLOOR(-2.5,-2) -2 >>> FLOOR(2.5,-2) Traceback (most recent call last): ... ValueError: factor argument invalid >>> FLOOR(1.58,0.1) 1.5 >>> FLOOR(0.234,0.01) 0.23 GCD (value1, *more_values) #","title":"FLOOR"},{"location":"functions/#gcd","text":"Returns the greatest common divisor of one or more integers. >>> GCD(5, 2) 1 >>> GCD(24, 36) 12 >>> GCD(7, 1) 1 >>> GCD(5, 0) 5 >>> GCD(0, 5) 5 >>> GCD(5) 5 >>> GCD(14, 42, 21) 7 INT (value) #","title":"GCD"},{"location":"functions/#int","text":"Rounds a number down to the nearest integer that is less than or equal to it. >>> INT(8.9) 8 >>> INT(-8.9) -9 >>> 19.5-INT(19.5) 0.5 LCM (value1, *more_values) #","title":"INT"},{"location":"functions/#lcm","text":"Returns the least common multiple of one or more integers. >>> LCM(5, 2) 10 >>> LCM(24, 36) 72 >>> LCM(0, 5) 0 >>> LCM(5) 5 >>> LCM(10, 100) 100 >>> LCM(12, 18) 36 >>> LCM(12, 18, 24) 72 LN (value) #","title":"LCM"},{"location":"functions/#ln","text":"Returns the the logarithm of a number, base e (Euler\u2019s number). >>> round(LN(86), 7) 4.4543473 >>> round(LN(2.7182818), 7) 1.0 >>> round(LN(EXP(3)), 10) 3.0 LOG (value, base=10) #","title":"LN"},{"location":"functions/#log","text":"Returns the the logarithm of a number given a base. >>> LOG(10) 1.0 >>> LOG(8, 2) 3.0 >>> round(LOG(86, 2.7182818), 7) 4.4543473 LOG10 (value) #","title":"LOG"},{"location":"functions/#log10","text":"Returns the the logarithm of a number, base 10. >>> round(LOG10(86), 9) 1.934498451 >>> LOG10(10) 1.0 >>> LOG10(100000) 5.0 >>> LOG10(10**5) 5.0 MOD (dividend, divisor) #","title":"LOG10"},{"location":"functions/#mod","text":"Returns the result of the modulo operator, the remainder after a division operation. >>> MOD(3, 2) 1 >>> MOD(-3, 2) 1 >>> MOD(3, -2) -1 >>> MOD(-3, -2) -1 MROUND (value, factor) #","title":"MOD"},{"location":"functions/#mround","text":"Rounds one number to the nearest integer multiple of another. >>> MROUND(10, 3) 9 >>> MROUND(-10, -3) -9 >>> round(MROUND(1.3, 0.2), 10) 1.4 >>> MROUND(5, -2) Traceback (most recent call last): ... ValueError: factor argument invalid MULTINOMIAL (value1, *more_values) #","title":"MROUND"},{"location":"functions/#multinomial","text":"Returns the factorial of the sum of values divided by the product of the values\u2019 factorials. >>> MULTINOMIAL(2, 3, 4) 1260 >>> MULTINOMIAL(3) 1 >>> MULTINOMIAL(1,2,3) 60 >>> MULTINOMIAL(0,2,4,6) 13860 ODD (value) #","title":"MULTINOMIAL"},{"location":"functions/#odd","text":"Rounds a number up to the nearest odd integer. >>> ODD(1.5) 3 >>> ODD(3) 3 >>> ODD(2) 3 >>> ODD(-1) -1 >>> ODD(-2) -3 PI () #","title":"ODD"},{"location":"functions/#pi","text":"Returns the value of Pi to 14 decimal places. >>> round(PI(), 9) 3.141592654 >>> round(PI()/2, 9) 1.570796327 >>> round(PI()*9, 8) 28.27433388 POWER (base, exponent) #","title":"PI"},{"location":"functions/#power","text":"Returns a number raised to a power. >>> POWER(5,2) 25.0 >>> round(POWER(98.6,3.2), 3) 2401077.222 >>> round(POWER(4,5.0/4), 9) 5.656854249 PRODUCT (factor1, *more_factors) #","title":"POWER"},{"location":"functions/#product","text":"Returns the result of multiplying a series of numbers together. Each argument may be a number or an array. >>> PRODUCT([5,15,30]) 2250 >>> PRODUCT([5,15,30], 2) 4500 >>> PRODUCT(5,15,[30],[2]) 4500 QUOTIENT (dividend, divisor) #","title":"PRODUCT"},{"location":"functions/#quotient","text":"Returns one number divided by another. >>> QUOTIENT(5, 2) 2 >>> QUOTIENT(4.5, 3.1) 1 >>> QUOTIENT(-10, 3) -3 RADIANS (angle) #","title":"QUOTIENT"},{"location":"functions/#radians","text":"Converts an angle value in degrees to radians. >>> round(RADIANS(270), 6) 4.712389 RAND () #","title":"RADIANS"},{"location":"functions/#rand","text":"Returns a random number between 0 inclusive and 1 exclusive. RANDBETWEEN (low, high) #","title":"RAND"},{"location":"functions/#randbetween","text":"Returns a uniformly random integer between two values, inclusive. ROMAN (number, form_unused=None) #","title":"RANDBETWEEN"},{"location":"functions/#roman","text":"Formats a number in Roman numerals. The second argument is ignored in this implementation. >>> ROMAN(499,0) 'CDXCIX' >>> ROMAN(499.2,0) 'CDXCIX' >>> ROMAN(57) 'LVII' >>> ROMAN(1912) 'MCMXII' ROUND (value, places=0) #","title":"ROMAN"},{"location":"functions/#round","text":"Rounds a number to a certain number of decimal places according to standard rules. >>> ROUND(2.15, 1) # Excel actually gives the more correct 2.2 2.1 >>> ROUND(2.149, 1) 2.1 >>> ROUND(-1.475, 2) -1.48 >>> ROUND(21.5, -1) 20.0 >>> ROUND(626.3,-3) 1000.0 >>> ROUND(1.98,-1) 0.0 >>> ROUND(-50.55,-2) -100.0 ROUNDDOWN (value, places=0) #","title":"ROUND"},{"location":"functions/#rounddown","text":"Rounds a number to a certain number of decimal places, always rounding down towards zero. >>> ROUNDDOWN(3.2, 0) 3 >>> ROUNDDOWN(76.9,0) 76 >>> ROUNDDOWN(3.14159, 3) 3.141 >>> ROUNDDOWN(-3.14159, 1) -3.1 >>> ROUNDDOWN(31415.92654, -2) 31400 ROUNDUP (value, places=0) #","title":"ROUNDDOWN"},{"location":"functions/#roundup","text":"Rounds a number to a certain number of decimal places, always rounding up away from zero. >>> ROUNDUP(3.2,0) 4 >>> ROUNDUP(76.9,0) 77 >>> ROUNDUP(3.14159, 3) 3.142 >>> ROUNDUP(-3.14159, 1) -3.2 >>> ROUNDUP(31415.92654, -2) 31500 SERIESSUM (x, n, m, a) #","title":"ROUNDUP"},{"location":"functions/#seriessum","text":"Given parameters x, n, m, and a, returns the power series sum a_1 x^n + a_2 x^(n+m) + \u2026 + a_i*x^(n+(i-1)m), where i is the number of entries in range a . >>> SERIESSUM(1,0,1,1) 1 >>> SERIESSUM(2,1,0,[1,2,3]) 12 >>> SERIESSUM(-3,1,1,[2,4,6]) -132 >>> round(SERIESSUM(PI()/4,0,2,[1,-1./FACT(2),1./FACT(4),-1./FACT(6)]), 6) 0.707103 SIGN (value) #","title":"SERIESSUM"},{"location":"functions/#sign","text":"Given an input number, returns -1 if it is negative, 1 if positive, and 0 if it is zero. >>> SIGN(10) 1 >>> SIGN(4.0-4.0) 0 >>> SIGN(-0.00001) -1 SIN (angle) #","title":"SIGN"},{"location":"functions/#sin","text":"Returns the sine of an angle provided in radians. >>> round(SIN(PI()), 10) 0.0 >>> SIN(PI()/2) 1.0 >>> round(SIN(30*PI()/180), 10) 0.5 >>> round(SIN(RADIANS(30)), 10) 0.5 SINH (value) #","title":"SIN"},{"location":"functions/#sinh","text":"Returns the hyperbolic sine of any real number. >>> round(2.868*SINH(0.0342*1.03), 7) 0.1010491 SQRT (value) #","title":"SINH"},{"location":"functions/#sqrt","text":"Returns the positive square root of a positive number. >>> SQRT(16) 4.0 >>> SQRT(-16) Traceback (most recent call last): ... ValueError: math domain error >>> SQRT(ABS(-16)) 4.0 SQRTPI (value) #","title":"SQRT"},{"location":"functions/#sqrtpi","text":"Returns the positive square root of the product of Pi and the given positive number. >>> round(SQRTPI(1), 6) 1.772454 >>> round(SQRTPI(2), 6) 2.506628 SUBTOTAL (function_code, range1, range2) #","title":"SQRTPI"},{"location":"functions/#subtotal","text":"Returns a subtotal for a vertical range of cells using a specified aggregation function. Note This function is not currently implemented in Grist. SUM (value1, *more_values) #","title":"SUBTOTAL"},{"location":"functions/#sum","text":"Returns the sum of a series of numbers. Each argument may be a number or an array. Non-numeric values are ignored. >>> SUM([5,15,30]) 50 >>> SUM([5.,15,30], 2) 52.0 >>> SUM(5,15,[30],[2]) 52 SUMIF (records, criterion, sum_range) #","title":"SUM"},{"location":"functions/#sumif","text":"Returns a conditional sum across a range. Note This function is not currently implemented in Grist. SUMIFS (sum_range, criteria_range1, criterion1, *args) #","title":"SUMIF"},{"location":"functions/#sumifs","text":"Returns the sum of a range depending on multiple criteria. Note This function is not currently implemented in Grist. SUMPRODUCT (array1, *more_arrays) #","title":"SUMIFS"},{"location":"functions/#sumproduct","text":"Multiplies corresponding components in the given arrays, and returns the sum of those products. >>> SUMPRODUCT([3,8,1,4,6,9], [2,6,5,7,7,3]) 156 >>> SUMPRODUCT([], [], []) 0 >>> SUMPRODUCT([-0.25], [-2], [-3]) -1.5 >>> SUMPRODUCT([-0.25, -0.25], [-2, -2], [-3, -3]) -3.0 SUMSQ (value1, value2) #","title":"SUMPRODUCT"},{"location":"functions/#sumsq","text":"Returns the sum of the squares of a series of numbers and/or cells. Note This function is not currently implemented in Grist. TAN (angle) #","title":"SUMSQ"},{"location":"functions/#tan","text":"Returns the tangent of an angle provided in radians. >>> round(TAN(0.785), 8) 0.99920399 >>> round(TAN(45*PI()/180), 10) 1.0 >>> round(TAN(RADIANS(45)), 10) 1.0 TANH (value) #","title":"TAN"},{"location":"functions/#tanh","text":"Returns the hyperbolic tangent of any real number. >>> round(TANH(-2), 6) -0.964028 >>> TANH(0) 0.0 >>> round(TANH(0.5), 6) 0.462117 TRUNC (value, places=0) #","title":"TANH"},{"location":"functions/#trunc","text":"Truncates a number to a certain number of significant digits by omitting less significant digits. >>> TRUNC(8.9) 8 >>> TRUNC(-8.9) -8 >>> TRUNC(0.45) 0","title":"TRUNC"},{"location":"functions/#schedule","text":"SCHEDULE (schedule, start=None, count=10, end=None) #","title":"Schedule"},{"location":"functions/#schedule_1","text":"Returns the list of datetime objects generated according to the schedule string. Starts at start , which defaults to NOW(). Generates at most count results (10 by default). If end is given, stops there. The schedule has the format \u201cINTERVAL: SLOTS, \u2026\u201d. For example: annual: Jan-15, Apr-15, Jul-15 -- Three times a year on given dates at midnight. annual: 1/15, 4/15, 7/15 -- Same as above. monthly: /1 2pm, /15 2pm -- The 1st and the 15th of each month, at 2pm. 3-months: /10, +1m /20 -- Every 3 months on the 10th of month 1, 20th of month 2. weekly: Mo 9am, Tu 9am, Fr 2pm -- Three times a week at specified times. 2-weeks: Mo, +1w Tu -- Every 2 weeks on Monday of week 1, Tuesday of week 2. daily: 07:30, 21:00 -- Twice a day at specified times. 2-day: 12am, 4pm, +1d 8am -- Three times every two days, evenly spaced. hourly: :15, :45 -- 15 minutes before and after each hour. 4-hour: :00, 1:20, 2:40 -- Three times every 4 hours, evenly spaced. 10-minute: +0s -- Every 10 minutes on the minute. INTERVAL must be either of the form N-unit where N is a number and unit is one of year , month , week , day , hour ; or one of the aliases: annual , monthly , weekly , daily , hourly , which mean 1-year , 1-month , etc. SLOTS support the following units: `Jan-15` or `1/15` -- Month and day of the month; available when INTERVAL is year-based. `/15` -- Day of the month, available when INTERVAL is month-based. `Mon`, `Mo`, `Friday` -- Day of the week (or abbreviation), when INTERVAL is week-based. 10am, 1:30pm, 15:45 -- Time of day, available for day-based or longer intervals. :45, :00 -- Minutes of the hour, available when INTERVAL is hour-based. +1d, +15d -- How many days to add to start of INTERVAL. +1w -- How many weeks to add to start of INTERVAL. +1m -- How many months to add to start of INTERVAL. The SLOTS are always relative to the INTERVAL rather than to start . Week-based intervals start on Sunday. E.g. weekly: +1d, +4d is the same as weekly: Mon, Thu , and generates times on Mondays and Thursdays regardless of start . The first generated time is determined by the unit of the INTERVAL without regard to the multiple. E.g. both \u201c2-week: Mon\u201d and \u201c3-week: Mon\u201d start on the first Monday after start , and then generate either every second or every third Monday after that. Similarly, 24-hour: :00 starts with the first top-of-the-hour after start (not with midnight), and then repeats every 24 hours. To start with the midnight after start , use daily: 0:00 . For interval units of a day or longer, if time-of-day is not specified, it defaults to midnight. The time zone of start determines the time zone of the generated times. >>> def show(dates): return [d.strftime(\"%Y-%m-%d %H:%M\") for d in dates] >>> start = datetime(2018, 9, 4, 14, 0); # 2pm on Tue, Sep 4 2018. >>> show(SCHEDULE('annual: Jan-15, Apr-15, Jul-15, Oct-15', start=start, count=4)) ['2018-10-15 00:00', '2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00'] >>> show(SCHEDULE('annual: 1/15, 4/15, 7/15', start=start, count=4)) ['2019-01-15 00:00', '2019-04-15 00:00', '2019-07-15 00:00', '2020-01-15 00:00'] >>> show(SCHEDULE('monthly: /1 2pm, /15 5pm', start=start, count=4)) ['2018-09-15 17:00', '2018-10-01 14:00', '2018-10-15 17:00', '2018-11-01 14:00'] >>> show(SCHEDULE('3-months: /10, +1m /20', start=start, count=4)) ['2018-09-10 00:00', '2018-10-20 00:00', '2018-12-10 00:00', '2019-01-20 00:00'] >>> show(SCHEDULE('weekly: Mo 9am, Tu 9am, Fr 2pm', start=start, count=4)) ['2018-09-07 14:00', '2018-09-10 09:00', '2018-09-11 09:00', '2018-09-14 14:00'] >>> show(SCHEDULE('2-weeks: Mo, +1w Tu', start=start, count=4)) ['2018-09-11 00:00', '2018-09-17 00:00', '2018-09-25 00:00', '2018-10-01 00:00'] >>> show(SCHEDULE('daily: 07:30, 21:00', start=start, count=4)) ['2018-09-04 21:00', '2018-09-05 07:30', '2018-09-05 21:00', '2018-09-06 07:30'] >>> show(SCHEDULE('2-day: 12am, 4pm, +1d 8am', start=start, count=4)) ['2018-09-04 16:00', '2018-09-05 08:00', '2018-09-06 00:00', '2018-09-06 16:00'] >>> show(SCHEDULE('hourly: :15, :45', start=start, count=4)) ['2018-09-04 14:15', '2018-09-04 14:45', '2018-09-04 15:15', '2018-09-04 15:45'] >>> show(SCHEDULE('4-hour: :00, +1H :20, +2H :40', start=start, count=4)) ['2018-09-04 14:00', '2018-09-04 15:20', '2018-09-04 16:40', '2018-09-04 18:00']","title":"SCHEDULE"},{"location":"functions/#stats","text":"AVEDEV (value1, value2) #","title":"Stats"},{"location":"functions/#avedev","text":"Calculates the average of the magnitudes of deviations of data from a dataset\u2019s mean. Note This function is not currently implemented in Grist. AVERAGE (value, *more_values) #","title":"AVEDEV"},{"location":"functions/#average","text":"Returns the numerical average value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> AVERAGE([2, -1.0, 11]) 4.0 >>> AVERAGE([2, -1, 11, \"Hello\"]) 4.0 >>> AVERAGE([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11]) 4.0 >>> AVERAGE(False, True) Traceback (most recent call last): ... ZeroDivisionError: float division by zero AVERAGEA (value, *more_values) #","title":"AVERAGE"},{"location":"functions/#averagea","text":"Returns the numerical average value in a dataset, counting non-numerical values as 0. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. >>> AVERAGEA([2, -1.0, 11]) 4.0 >>> AVERAGEA([2, -1, 11, \"Hello\"]) 3.0 >>> AVERAGEA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 1.5 >>> AVERAGEA(False, True) 0.5 AVERAGEIF (criteria_range, criterion, average_range=None) #","title":"AVERAGEA"},{"location":"functions/#averageif","text":"Returns the average of a range depending on criteria. Note This function is not currently implemented in Grist. AVERAGEIFS (average_range, criteria_range1, criterion1, *args) #","title":"AVERAGEIF"},{"location":"functions/#averageifs","text":"Returns the average of a range depending on multiple criteria. Note This function is not currently implemented in Grist. AVERAGE_WEIGHTED (pairs) #","title":"AVERAGEIFS"},{"location":"functions/#average_weighted","text":"Given a list of (value, weight) pairs, finds the average of the values weighted by the corresponding weights. Ignores any pairs with a non-numerical value or weight. If you have two lists, of values and weights, use the Python built-in zip() function to create a list of pairs. >>> AVERAGE_WEIGHTED(((95, .25), (90, .1), (\"X\", .5), (85, .15), (88, .2), (82, .3), (70, None))) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, \"X\", 85, 88, 82, 70], [25, 10, 50, 15, 20, 30, None])) 87.7 >>> AVERAGE_WEIGHTED(zip([95, 90, False, 85, 88, 82, 70], [.25, .1, .5, .15, .2, .3, True])) 87.7 BINOMDIST (num_successes, num_trials, prob_success, cumulative) #","title":"AVERAGE_WEIGHTED"},{"location":"functions/#binomdist","text":"Calculates the probability of drawing a certain number of successes (or a maximum number of successes) in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws. Note This function is not currently implemented in Grist. CONFIDENCE (alpha, standard_deviation, pop_size) #","title":"BINOMDIST"},{"location":"functions/#confidence","text":"Calculates the width of half the confidence interval for a normal distribution. Note This function is not currently implemented in Grist. CORREL (data_y, data_x) #","title":"CONFIDENCE"},{"location":"functions/#correl","text":"Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. COUNT (value, *more_values) #","title":"CORREL"},{"location":"functions/#count","text":"Returns the count of numerical values in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. >>> COUNT([2, -1.0, 11]) 3 >>> COUNT([2, -1, 11, \"Hello\"]) 3 >>> COUNT([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 3 >>> COUNT(False, True) 0 COUNTA (value, *more_values) #","title":"COUNT"},{"location":"functions/#counta","text":"Returns the count of all values in a dataset, including non-numerical values. Each argument may be a value or an array. >>> COUNTA([2, -1.0, 11]) 3 >>> COUNTA([2, -1, 11, \"Hello\"]) 4 >>> COUNTA([2, -1, \"Hello\", DATE(2015,1,1)], True, [False, \"123\", \"\", 11.5]) 9 >>> COUNTA(False, True) 2 COVAR (data_y, data_x) #","title":"COUNTA"},{"location":"functions/#covar","text":"Calculates the covariance of a dataset. Note This function is not currently implemented in Grist. CRITBINOM (num_trials, prob_success, target_prob) #","title":"COVAR"},{"location":"functions/#critbinom","text":"Calculates the smallest value for which the cumulative binomial distribution is greater than or equal to a specified criteria. Note This function is not currently implemented in Grist. DEVSQ (value1, value2) #","title":"CRITBINOM"},{"location":"functions/#devsq","text":"Calculates the sum of squares of deviations based on a sample. Note This function is not currently implemented in Grist. EXPONDIST (x, lambda_, cumulative) #","title":"DEVSQ"},{"location":"functions/#expondist","text":"Returns the value of the exponential distribution function with a specified lambda at a specified value. Note This function is not currently implemented in Grist. FDIST (x, degrees_freedom1, degrees_freedom2) #","title":"EXPONDIST"},{"location":"functions/#fdist","text":"Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. FISHER (value) #","title":"FDIST"},{"location":"functions/#fisher","text":"Returns the Fisher transformation of a specified value. Note This function is not currently implemented in Grist. FISHERINV (value) #","title":"FISHER"},{"location":"functions/#fisherinv","text":"Returns the inverse Fisher transformation of a specified value. Note This function is not currently implemented in Grist. FORECAST (x, data_y, data_x) #","title":"FISHERINV"},{"location":"functions/#forecast","text":"Calculates the expected y-value for a specified x based on a linear regression of a dataset. Note This function is not currently implemented in Grist. F_DIST (x, degrees_freedom1, degrees_freedom2, cumulative) #","title":"FORECAST"},{"location":"functions/#f_dist","text":"Calculates the left-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. F_DIST_RT (x, degrees_freedom1, degrees_freedom2) #","title":"F_DIST"},{"location":"functions/#f_dist_rt","text":"Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor\u2019s F distribution. Note This function is not currently implemented in Grist. GEOMEAN (value1, value2) #","title":"F_DIST_RT"},{"location":"functions/#geomean","text":"Calculates the geometric mean of a dataset. Note This function is not currently implemented in Grist. HARMEAN (value1, value2) #","title":"GEOMEAN"},{"location":"functions/#harmean","text":"Calculates the harmonic mean of a dataset. Note This function is not currently implemented in Grist. HYPGEOMDIST (num_successes, num_draws, successes_in_pop, pop_size) #","title":"HARMEAN"},{"location":"functions/#hypgeomdist","text":"Calculates the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws. Note This function is not currently implemented in Grist. INTERCEPT (data_y, data_x) #","title":"HYPGEOMDIST"},{"location":"functions/#intercept","text":"Calculates the y-value at which the line resulting from linear regression of a dataset will intersect the y-axis (x=0). Note This function is not currently implemented in Grist. KURT (value1, value2) #","title":"INTERCEPT"},{"location":"functions/#kurt","text":"Calculates the kurtosis of a dataset, which describes the shape, and in particular the \u201cpeakedness\u201d of that dataset. Note This function is not currently implemented in Grist. LARGE (data, n) #","title":"KURT"},{"location":"functions/#large","text":"Returns the nth largest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist. LOGINV (x, mean, standard_deviation) #","title":"LARGE"},{"location":"functions/#loginv","text":"Returns the value of the inverse log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist. LOGNORMDIST (x, mean, standard_deviation) #","title":"LOGINV"},{"location":"functions/#lognormdist","text":"Returns the value of the log-normal cumulative distribution with given mean and standard deviation at a specified value. Note This function is not currently implemented in Grist. MAX (value, *more_values) #","title":"LOGNORMDIST"},{"location":"functions/#max","text":"Returns the maximum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MAX([2, -1.5, 11.5]) 11.5 >>> MAX([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAX(True, -123) -123 >>> MAX(\"123\", -123) -123 >>> MAX(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MAXA (value, *more_values) #","title":"MAX"},{"location":"functions/#maxa","text":"Returns the maximum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MAXA([2, -1.5, 11.5]) 11.5 >>> MAXA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) 11.5 >>> MAXA(True, -123) 1 >>> MAXA(\"123\", -123) 0 >>> MAXA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MEDIAN (value, *more_values) #","title":"MAXA"},{"location":"functions/#median","text":"Returns the median value in a numeric dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Produces an error if the arguments contain no numbers. The median is the middle number when all values are sorted. So half of the values in the dataset are less than the median, and half of the values are greater. If there is an even number of values in the dataset, returns the average of the two numbers in the middle. >>> MEDIAN(1, 2, 3, 4, 5) 3 >>> MEDIAN(3, 5, 1, 4, 2) 3 >>> MEDIAN(xrange(10)) 4.5 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1), 12.3) 12.3 >>> MEDIAN(\"Hello\", \"123\", DATE(2015, 1, 1)) Traceback (most recent call last): ... ValueError: MEDIAN requires at least one number MIN (value, *more_values) #","title":"MEDIAN"},{"location":"functions/#min","text":"Returns the minimum value in a dataset, ignoring non-numerical values. Each argument may be a value or an array. Values that are not numbers, including logical and blank values, and text representations of numbers, are ignored. Returns 0 if the arguments contain no numbers. >>> MIN([2, -1.5, 11.5]) -1.5 >>> MIN([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MIN(True, 123) 123 >>> MIN(\"-123\", 123) 123 >>> MIN(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MINA (value, *more_values) #","title":"MIN"},{"location":"functions/#mina","text":"Returns the minimum numeric value in a dataset. Each argument may be a value of an array. Values that are not numbers, including dates and text representations of numbers, are counted as 0 (zero). Logical value of True is counted as 1, and False as 0. Returns 0 if the arguments contain no numbers. >>> MINA([2, -1.5, 11.5]) -1.5 >>> MINA([2, -1.5, \"Hello\", DATE(2015, 1, 1)], True, [False, \"123\", \"\", 11.5]) -1.5 >>> MINA(True, 123) 1 >>> MINA(\"-123\", 123) 0 >>> MINA(\"Hello\", \"123\", DATE(2015, 1, 1)) 0 MODE (value1, value2) #","title":"MINA"},{"location":"functions/#mode","text":"Returns the most commonly occurring value in a dataset. Note This function is not currently implemented in Grist. NEGBINOMDIST (num_failures, num_successes, prob_success) #","title":"MODE"},{"location":"functions/#negbinomdist","text":"Calculates the probability of drawing a certain number of failures before a certain number of successes given a probability of success in independent trials. Note This function is not currently implemented in Grist. NORMDIST (x, mean, standard_deviation, cumulative) #","title":"NEGBINOMDIST"},{"location":"functions/#normdist","text":"Returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist. NORMINV (x, mean, standard_deviation) #","title":"NORMDIST"},{"location":"functions/#norminv","text":"Returns the value of the inverse normal distribution function for a specified value, mean, and standard deviation. Note This function is not currently implemented in Grist. NORMSDIST (x) #","title":"NORMINV"},{"location":"functions/#normsdist","text":"Returns the value of the standard normal cumulative distribution function for a specified value. Note This function is not currently implemented in Grist. NORMSINV (x) #","title":"NORMSDIST"},{"location":"functions/#normsinv","text":"Returns the value of the inverse standard normal distribution function for a specified value. Note This function is not currently implemented in Grist. PEARSON (data_y, data_x) #","title":"NORMSINV"},{"location":"functions/#pearson","text":"Calculates r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. PERCENTILE (data, percentile) #","title":"PEARSON"},{"location":"functions/#percentile","text":"Returns the value at a given percentile of a dataset. Note This function is not currently implemented in Grist. PERCENTRANK (data, value, significant_digits=None) #","title":"PERCENTILE"},{"location":"functions/#percentrank","text":"Returns the percentage rank (percentile) of a specified value in a dataset. Note This function is not currently implemented in Grist. PERCENTRANK_EXC (data, value, significant_digits=None) #","title":"PERCENTRANK"},{"location":"functions/#percentrank_exc","text":"Returns the percentage rank (percentile) from 0 to 1 exclusive of a specified value in a dataset. Note This function is not currently implemented in Grist. PERCENTRANK_INC (data, value, significant_digits=None) #","title":"PERCENTRANK_EXC"},{"location":"functions/#percentrank_inc","text":"Returns the percentage rank (percentile) from 0 to 1 inclusive of a specified value in a dataset. Note This function is not currently implemented in Grist. PERMUT (n, k) #","title":"PERCENTRANK_INC"},{"location":"functions/#permut","text":"Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order. Note This function is not currently implemented in Grist. POISSON (x, mean, cumulative) #","title":"PERMUT"},{"location":"functions/#poisson","text":"Returns the value of the Poisson distribution function (or Poisson cumulative distribution function) for a specified value and mean. Note This function is not currently implemented in Grist. PROB (data, probabilities, low_limit, high_limit=None) #","title":"POISSON"},{"location":"functions/#prob","text":"Given a set of values and corresponding probabilities, calculates the probability that a value chosen at random falls between two limits. Note This function is not currently implemented in Grist. QUARTILE (data, quartile_number) #","title":"PROB"},{"location":"functions/#quartile","text":"Returns a value nearest to a specified quartile of a dataset. Note This function is not currently implemented in Grist. RANK (value, data, is_ascending=None) #","title":"QUARTILE"},{"location":"functions/#rank","text":"Returns the rank of a specified value in a dataset. Note This function is not currently implemented in Grist. RANK_AVG (value, data, is_ascending=None) #","title":"RANK"},{"location":"functions/#rank_avg","text":"Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the average rank of the entries will be returned. Note This function is not currently implemented in Grist. RANK_EQ (value, data, is_ascending=None) #","title":"RANK_AVG"},{"location":"functions/#rank_eq","text":"Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the top rank of the entries will be returned. Note This function is not currently implemented in Grist. RSQ (data_y, data_x) #","title":"RANK_EQ"},{"location":"functions/#rsq","text":"Calculates the square of r, the Pearson product-moment correlation coefficient of a dataset. Note This function is not currently implemented in Grist. SKEW (value1, value2) #","title":"RSQ"},{"location":"functions/#skew","text":"Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean. Note This function is not currently implemented in Grist. SLOPE (data_y, data_x) #","title":"SKEW"},{"location":"functions/#slope","text":"Calculates the slope of the line resulting from linear regression of a dataset. Note This function is not currently implemented in Grist. SMALL (data, n) #","title":"SLOPE"},{"location":"functions/#small","text":"Returns the nth smallest element from a data set, where n is user-defined. Note This function is not currently implemented in Grist. STANDARDIZE (value, mean, standard_deviation) #","title":"SMALL"},{"location":"functions/#standardize","text":"Calculates the normalized equivalent of a random variable given mean and standard deviation of the distribution. Note This function is not currently implemented in Grist. STDEV (value, *more_values) #","title":"STANDARDIZE"},{"location":"functions/#stdev","text":"Calculates the standard deviation based on a sample, ignoring non-numerical values. >>> STDEV([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.277849927241488 >>> STDEV([2, 5, 8, 13, 10], 3, 12, 15) 4.810702354423639 >>> STDEV([2, 5, 8, 13, 10], [3, 12, 15]) 4.810702354423639 >>> STDEV([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero STDEVA (value, *more_values) #","title":"STDEV"},{"location":"functions/#stdeva","text":"Calculates the standard deviation based on a sample, setting text to the value 0 . >>> STDEVA([2, 5, 8, 13, 10]) 4.277849927241488 >>> STDEVA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], 1, 0, 0) 4.969550137731641 >>> STDEVA([2, 5, 8, 13, 10], [1, 0, 0]) 4.969550137731641 >>> STDEVA([5]) Traceback (most recent call last): ... ZeroDivisionError: float division by zero STDEVP (value, *more_values) #","title":"STDEVA"},{"location":"functions/#stdevp","text":"Calculates the standard deviation based on an entire population, ignoring non-numerical values. >>> STDEVP([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10, True, False, \"Test\"]) 3.8262252939417984 >>> STDEVP([2, 5, 8, 13, 10], 3, 12, 15) 4.5 >>> STDEVP([2, 5, 8, 13, 10], [3, 12, 15]) 4.5 >>> STDEVP([5]) 0.0 STDEVPA (value, *more_values) #","title":"STDEVP"},{"location":"functions/#stdevpa","text":"Calculates the standard deviation based on an entire population, setting text to the value 0 . >>> STDEVPA([2, 5, 8, 13, 10]) 3.8262252939417984 >>> STDEVPA([2, 5, 8, 13, 10, True, False, \"Test\"]) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], 1, 0, 0) 4.648588495446763 >>> STDEVPA([2, 5, 8, 13, 10], [1, 0, 0]) 4.648588495446763 >>> STDEVPA([5]) 0.0 STEYX (data_y, data_x) #","title":"STDEVPA"},{"location":"functions/#steyx","text":"Calculates the standard error of the predicted y-value for each x in the regression of a dataset. Note This function is not currently implemented in Grist. TDIST (x, degrees_freedom, tails) #","title":"STEYX"},{"location":"functions/#tdist","text":"Calculates the probability for Student\u2019s t-distribution with a given input (x). Note This function is not currently implemented in Grist. TINV (probability, degrees_freedom) #","title":"TDIST"},{"location":"functions/#tinv","text":"Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist. TRIMMEAN (data, exclude_proportion) #","title":"TINV"},{"location":"functions/#trimmean","text":"Calculates the mean of a dataset excluding some proportion of data from the high and low ends of the dataset. Note This function is not currently implemented in Grist. TTEST (range1, range2, tails, type) #","title":"TRIMMEAN"},{"location":"functions/#ttest","text":"Returns the probability associated with t-test. Determines whether two samples are likely to have come from the same two underlying populations that have the same mean. Note This function is not currently implemented in Grist. T_INV (probability, degrees_freedom) #","title":"TTEST"},{"location":"functions/#t_inv","text":"Calculates the negative inverse of the one-tailed TDIST function. Note This function is not currently implemented in Grist. T_INV_2T (probability, degrees_freedom) #","title":"T_INV"},{"location":"functions/#t_inv_2t","text":"Calculates the inverse of the two-tailed TDIST function. Note This function is not currently implemented in Grist. VAR (value1, value2) #","title":"T_INV_2T"},{"location":"functions/#var","text":"Calculates the variance based on a sample. Note This function is not currently implemented in Grist. VARA (value1, value2) #","title":"VAR"},{"location":"functions/#vara","text":"Calculates an estimate of variance based on a sample, setting text to the value 0 . Note This function is not currently implemented in Grist. VARP (value1, value2) #","title":"VARA"},{"location":"functions/#varp","text":"Calculates the variance based on an entire population. Note This function is not currently implemented in Grist. VARPA (value1, value2) #","title":"VARP"},{"location":"functions/#varpa","text":"Calculates the variance based on an entire population, setting text to the value 0 . Note This function is not currently implemented in Grist. WEIBULL (x, shape, scale, cumulative) #","title":"VARPA"},{"location":"functions/#weibull","text":"Returns the value of the Weibull distribution function (or Weibull cumulative distribution function) for a specified shape and scale. Note This function is not currently implemented in Grist. ZTEST (data, value, standard_deviation) #","title":"WEIBULL"},{"location":"functions/#ztest","text":"Returns the two-tailed P-value of a Z-test with standard distribution. Note This function is not currently implemented in Grist.","title":"ZTEST"},{"location":"functions/#text","text":"CHAR (table_number) #","title":"Text"},{"location":"functions/#char","text":"Convert a number into a character according to the current Unicode table. Same as unichr(number) . >>> CHAR(65) u'A' >>> CHAR(33) u'!' CLEAN (text) #","title":"CHAR"},{"location":"functions/#clean","text":"Returns the text with the non-printable characters removed. This removes both characters with values 0 through 31, and other Unicode characters in the \u201ccontrol characters\u201d category. >>> CLEAN(CHAR(9) + \"Monthly report\" + CHAR(10)) u'Monthly report' CODE (string) #","title":"CLEAN"},{"location":"functions/#code","text":"Returns the numeric Unicode map value of the first character in the string provided. Same as ord(string[0]) . >>> CODE(\"A\") 65 >>> CODE(\"!\") 33 >>> CODE(\"!A\") 33 CONCATENATE (string, *more_strings) #","title":"CODE"},{"location":"functions/#concatenate","text":"Joins together any number of text strings into one string. Also available under the name CONCAT . Same as the Python expression \"\".join(array_of_strings) . >>> CONCATENATE(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCATENATE(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCATENATE(\"abc\") u'abc' >>> CONCAT(0, \"abc\") u'0abc' CONCATENATE (string, *more_strings) #","title":"CONCATENATE"},{"location":"functions/#concatenate_1","text":"Joins together any number of text strings into one string. Also available under the name CONCAT . Same as the Python expression \"\".join(array_of_strings) . >>> CONCATENATE(\"Stream population for \", \"trout\", \" \", \"species\", \" is \", 32, \"/mile.\") u'Stream population for trout species is 32/mile.' >>> CONCATENATE(\"In \", 4, \" days it is \", datetime.date(2016,1,1)) u'In 4 days it is 2016-01-01' >>> CONCATENATE(\"abc\") u'abc' >>> CONCAT(0, \"abc\") u'0abc' DOLLAR (number, decimals=2) #","title":"CONCATENATE"},{"location":"functions/#dollar","text":"Formats a number into a formatted dollar amount, with decimals rounded to the specified place (. If decimals value is omitted, it defaults to 2. >>> DOLLAR(1234.567) '$1,234.57' >>> DOLLAR(1234.567, -2) '$1,200' >>> DOLLAR(-1234.567, -2) '($1,200)' >>> DOLLAR(-0.123, 4) '($0.1230)' >>> DOLLAR(99.888) '$99.89' >>> DOLLAR(0) '$0.00' >>> DOLLAR(10, 0) '$10' EXACT (string1, string2) #","title":"DOLLAR"},{"location":"functions/#exact","text":"Tests whether two strings are identical. Same as string2 == string2 . >>> EXACT(\"word\", \"word\") True >>> EXACT(\"Word\", \"word\") False >>> EXACT(\"w ord\", \"word\") False FIND (find_text, within_text, start_num=1) #","title":"EXACT"},{"location":"functions/#find","text":"Returns the position at which a string is first found within text. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> FIND(\"M\", \"Miriam McGovern\") 1 >>> FIND(\"m\", \"Miriam McGovern\") 6 >>> FIND(\"M\", \"Miriam McGovern\", 3) 8 >>> FIND(\" #\", \"Hello world # Test\") 12 >>> FIND(\"gle\", \"Google\", 1) 4 >>> FIND(\"GLE\", \"Google\", 1) Traceback (most recent call last): ... ValueError: substring not found >>> FIND(\"page\", \"homepage\") 5 >>> FIND(\"page\", \"homepage\", 6) Traceback (most recent call last): ... ValueError: substring not found FIXED (number, decimals=2, no_commas=False) #","title":"FIND"},{"location":"functions/#fixed","text":"Formats a number with a fixed number of decimal places (2 by default), and commas. If no_commas is True, then omits the commas. >>> FIXED(1234.567, 1) '1,234.6' >>> FIXED(1234.567, -1) '1,230' >>> FIXED(-1234.567, -1, True) '-1230' >>> FIXED(44.332) '44.33' >>> FIXED(3521.478, 2, False) '3,521.48' >>> FIXED(-3521.478, 1, True) '-3521.5' >>> FIXED(3521.478, 0, True) '3521' >>> FIXED(3521.478, -2, True) '3500' LEFT (string, num_chars=1) #","title":"FIXED"},{"location":"functions/#left","text":"Returns a substring of length num_chars from the beginning of the given string. If num_chars is omitted, it is assumed to be 1. Same as string[:num_chars] . >>> LEFT(\"Sale Price\", 4) 'Sale' >>> LEFT('Swededn') 'S' >>> LEFT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid LEN (text) #","title":"LEFT"},{"location":"functions/#len","text":"Returns the number of characters in a text string. Same as len(text) . >>> LEN(\"Phoenix, AZ\") 11 >>> LEN(\"\") 0 >>> LEN(\" One \") 11 LOWER (text) #","title":"LEN"},{"location":"functions/#lower","text":"Converts a specified string to lowercase. Same as text.lower() . >>> LOWER(\"E. E. Cummings\") 'e. e. cummings' >>> LOWER(\"Apt. 2B\") 'apt. 2b' MID (text, start_num, num_chars) #","title":"LOWER"},{"location":"functions/#mid","text":"Returns a segment of a string, starting at start_num. The first character in text has start_num 1. >>> MID(\"Fluid Flow\", 1, 5) 'Fluid' >>> MID(\"Fluid Flow\", 7, 20) 'Flow' >>> MID(\"Fluid Flow\", 20, 5) '' >>> MID(\"Fluid Flow\", 0, 5) Traceback (most recent call last): ... ValueError: start_num invalid PROPER (text) #","title":"MID"},{"location":"functions/#proper","text":"Capitalizes each word in a specified string. It converts the first letter of each word to uppercase, and all other letters to lowercase. Same as text.title() . >>> PROPER('this is a TITLE') 'This Is A Title' >>> PROPER('2-way street') '2-Way Street' >>> PROPER('76BudGet') '76Budget' REGEXEXTRACT (text, regular_expression) #","title":"PROPER"},{"location":"functions/#regexextract","text":"Extracts the first part of text that matches regular_expression. >>> REGEXEXTRACT(\"Google Doc 101\", \"[0-9]+\") '101' >>> REGEXEXTRACT(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") '826.25' If there is a parenthesized expression, it is returned instead of the whole match. >>> REGEXEXTRACT(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") 'Content' >>> REGEXEXTRACT(\"Foo\", \"Bar\") Traceback (most recent call last): ... ValueError: REGEXEXTRACT text does not match REGEXMATCH (text, regular_expression) #","title":"REGEXEXTRACT"},{"location":"functions/#regexmatch","text":"Returns whether a piece of text matches a regular expression. >>> REGEXMATCH(\"Google Doc 101\", \"[0-9]+\") True >>> REGEXMATCH(\"Google Doc\", \"[0-9]+\") False >>> REGEXMATCH(\"The price today is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\") True >>> REGEXMATCH(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\") True >>> REGEXMATCH(\"Foo\", \"Bar\") False REGEXREPLACE (text, regular_expression, replacement) #","title":"REGEXMATCH"},{"location":"functions/#regexreplace","text":"Replaces all parts of text matching the given regular expression with replacement text. >>> REGEXREPLACE(\"Google Doc 101\", \"[0-9]+\", \"777\") 'Google Doc 777' >>> REGEXREPLACE(\"Google Doc\", \"[0-9]+\", \"777\") 'Google Doc' >>> REGEXREPLACE(\"The price is $826.25\", \"[0-9]*\\.[0-9]+[0-9]+\", \"315.75\") 'The price is $315.75' >>> REGEXREPLACE(\"(Content) between brackets\", \"\\(([A-Za-z]+)\\)\", \"Word\") 'Word between brackets' >>> REGEXREPLACE(\"Foo\", \"Bar\", \"Baz\") 'Foo' REPLACE (old_text, start_num, num_chars, new_text) #","title":"REGEXREPLACE"},{"location":"functions/#replace","text":"Replaces part of a text string with a different text string. Start_num is counted from 1. >>> REPLACE(\"abcdefghijk\", 6, 5, \"*\") 'abcde*k' >>> REPLACE(\"2009\", 3, 2, \"10\") '2010' >>> REPLACE('123456', 1, 3, '@') '@456' >>> REPLACE('foo', 1, 0, 'bar') 'barfoo' >>> REPLACE('foo', 0, 1, 'bar') Traceback (most recent call last): ... ValueError: start_num invalid REPT (text, number_times) #","title":"REPLACE"},{"location":"functions/#rept","text":"Returns specified text repeated a number of times. Same as text * number_times . The result of the REPT function cannot be longer than 32767 characters, or it raises a ValueError. >>> REPT(\"*-\", 3) '*-*-*-' >>> REPT('-', 10) '----------' >>> REPT('-', 0) '' >>> len(REPT('---', 10000)) 30000 >>> REPT('---', 11000) Traceback (most recent call last): ... ValueError: number_times invalid >>> REPT('-', -1) Traceback (most recent call last): ... ValueError: number_times invalid RIGHT (string, num_chars=1) #","title":"REPT"},{"location":"functions/#right","text":"Returns a substring of length num_chars from the end of a specified string. If num_chars is omitted, it is assumed to be 1. Same as string[-num_chars:] . >>> RIGHT(\"Sale Price\", 5) 'Price' >>> RIGHT('Stock Number') 'r' >>> RIGHT('Text', 100) 'Text' >>> RIGHT('Text', -1) Traceback (most recent call last): ... ValueError: num_chars invalid SEARCH (find_text, within_text, start_num=1) #","title":"RIGHT"},{"location":"functions/#search","text":"Returns the position at which a string is first found within text, ignoring case. Find is case-sensitive. The returned position is 1 if within_text starts with find_text. Start_num specifies the character at which to start the search, defaulting to 1 (the first character of within_text). If find_text is not found, or start_num is invalid, raises ValueError. >>> SEARCH(\"e\", \"Statements\", 6) 7 >>> SEARCH(\"margin\", \"Profit Margin\") 8 >>> SEARCH(\" \", \"Profit Margin\") 7 >>> SEARCH('\"', 'The \"boss\" is here.') 5 >>> SEARCH(\"gle\", \"Google\") 4 >>> SEARCH(\"GLE\", \"Google\") 4 SUBSTITUTE (text, old_text, new_text, instance_num=None) #","title":"SEARCH"},{"location":"functions/#substitute","text":"Replaces existing text with new text in a string. It is useful when you know the substring of text to replace. Use REPLACE when you know the position of text to replace. If instance_num is given, it specifies which occurrence of old_text to replace. If omitted, all occurrences are replaced. Same as text.replace(old_text, new_text) when instance_num is omitted. >>> SUBSTITUTE(\"Sales Data\", \"Sales\", \"Cost\") 'Cost Data' >>> SUBSTITUTE(\"Quarter 1, 2008\", \"1\", \"2\", 1) 'Quarter 2, 2008' >>> SUBSTITUTE(\"Quarter 1, 2011\", \"1\", \"2\", 3) 'Quarter 1, 2012' T (value) #","title":"SUBSTITUTE"},{"location":"functions/#t","text":"Returns value if value is text, or the empty string when value is not text. >>> T('Text') 'Text' >>> T(826) '' >>> T('826') '826' >>> T(False) '' >>> T('100 points') '100 points' >>> T(AltText('Text')) 'Text' >>> T(float('nan')) '' TEXT (number, format_type) #","title":"T"},{"location":"functions/#text_1","text":"Converts a number into text according to a specified format. It is not yet implemented in Grist. Note This function is not currently implemented in Grist. TRIM (text) #","title":"TEXT"},{"location":"functions/#trim","text":"Removes all spaces from text except for single spaces between words. Note that TRIM does not remove other whitespace such as tab or newline characters. >>> TRIM(\" First Quarter\\n Earnings \") 'First Quarter\\n Earnings' >>> TRIM(\"\") '' UPPER (text) #","title":"TRIM"},{"location":"functions/#upper","text":"Converts a specified string to uppercase. Same as text.lower() . >>> UPPER(\"e. e. cummings\") 'E. E. CUMMINGS' >>> UPPER(\"Apt. 2B\") 'APT. 2B' VALUE (text) #","title":"UPPER"},{"location":"functions/#value","text":"Converts a string in accepted date, time or number formats into a number or date. >>> VALUE(\"$1,000\") 1000 >>> VALUE(\"16:48:00\") - VALUE(\"12:00:00\") datetime.timedelta(0, 17280) >>> VALUE(\"01/01/2012\") datetime.datetime(2012, 1, 1, 0, 0) >>> VALUE(\"\") 0 >>> VALUE(0) 0 >>> VALUE(\"826\") 826 >>> VALUE(\"-826.123123123\") -826.123123123 >>> VALUE(float('nan')) nan >>> VALUE(\"Invalid\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number >>> VALUE(\"13/13/13\") Traceback (most recent call last): ... ValueError: text cannot be parsed to a number","title":"VALUE"},{"location":"glossary/","text":"Glossary # Document # A Grist document is a collection of related data. If you work with databases, think of it as a single database. If you work with spreadsheets, think of it as a single spreadsheet. Like databases and spreadsheets, the data in a Grist document is organized as a set of tables. How this data is viewed and edited is unusually flexible. Grist documents are organized visually into pages. Pages contain widgets that offer different ways to view and edit tables. To work with Grist, the first step is typically to create a document . Page # Grist documents are organized visually into pages. Each page allows you to view or edit one or more tables. The nature of these viewers and editors (called \u201cpage widgets\u201d) is flexible, as is their layout. A single table can be viewed (or edited) from multiple widgets in one or many pages. And a single page can contain widgets for viewing (or editing) many tables. Pages are listed in the document ( in the panel on the left ). In this list, they may be rearranged and grouped, with several \u201csubpages\u201d nested within a single page. Widget # A page contains sections, such as table grids or charts, which we call \u201cpage widgets\u201d. They are used for viewing or editing data in tables. Types of page widgets include cards and charts as well as the classic spreadsheet-style table grid . Table # Data is stored in tables. Tables have named columns , and a sequence of rows containing values for those columns. Every row has a numeric id (available as $id in formulas) that is unique within that table.","title":"Glossary"},{"location":"glossary/#glossary","text":"","title":"Glossary"},{"location":"glossary/#document","text":"A Grist document is a collection of related data. If you work with databases, think of it as a single database. If you work with spreadsheets, think of it as a single spreadsheet. Like databases and spreadsheets, the data in a Grist document is organized as a set of tables. How this data is viewed and edited is unusually flexible. Grist documents are organized visually into pages. Pages contain widgets that offer different ways to view and edit tables. To work with Grist, the first step is typically to create a document .","title":"Document"},{"location":"glossary/#page","text":"Grist documents are organized visually into pages. Each page allows you to view or edit one or more tables. The nature of these viewers and editors (called \u201cpage widgets\u201d) is flexible, as is their layout. A single table can be viewed (or edited) from multiple widgets in one or many pages. And a single page can contain widgets for viewing (or editing) many tables. Pages are listed in the document ( in the panel on the left ). In this list, they may be rearranged and grouped, with several \u201csubpages\u201d nested within a single page.","title":"Page"},{"location":"glossary/#widget","text":"A page contains sections, such as table grids or charts, which we call \u201cpage widgets\u201d. They are used for viewing or editing data in tables. Types of page widgets include cards and charts as well as the classic spreadsheet-style table grid .","title":"Widget"},{"location":"glossary/#table","text":"Data is stored in tables. Tables have named columns , and a sequence of rows containing values for those columns. Every row has a numeric id (available as $id in formulas) that is unique within that table.","title":"Table"},{"location":"imports/","text":"Importing more data # You can import a file to start a new Grist document , or to add data to an existing document. Grist supports imports of Excel, CSV, JSON, and tab-separated files. You can also import any of these formats from a URL, using the \u201cImport from URL\u201d option. The Import dialog # When you import data into an existing document, Grist opens an import dialog to show you what will be imported. This dialog offers available import options, lets you choose whether to create a new table or add to an existing one, and shows a preview of the data. The \u201cImport options\u201d link on the top right is sometimes useful when importing delimited files. Grist guesses the settings to parse the data (such as the field delimiter), but if it guesses incorrectly, you can adjust the settings. Guessing data structure # In all cases, when you import a file, Grist makes guesses about the structure of the file. For Excel files, Grist treats each sheet as a separated table. For CSV and other delimited formats, one file becomes one table. For both Excel and delimited files, Grist tries to detect whether the headers are included and which line they occur in. If Grist detects there are no headers, it will name columns as \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, etc. Grist automatically tries to parse numbers, dates, and boolean fields to detect the most suitable type for each column. It tries to be lossless: e.g. if it marks a column as numeric, any text values in it (such as \u201cN/A\u201d) will remain in the imported table, but will be highlighted due to the type mismatch. You can always rename tables and columns after an import, as well as convert types. Import to an existing table # By default, Grist imports new data as new tables, but the Import dialog allows you to change the destination and import data into an existing table. To import cleanly into an existing table, the new data must have column names that exactly match the column names in the destination table. This is best suited for importing multiple datasets in the same format. For instance, you could import a bank statement as a new table, then import more statements from other months into the same table. For developers, the Grist API offers a more powerful way to add data to a Grist document.","title":"Importing more data"},{"location":"imports/#importing-more-data","text":"You can import a file to start a new Grist document , or to add data to an existing document. Grist supports imports of Excel, CSV, JSON, and tab-separated files. You can also import any of these formats from a URL, using the \u201cImport from URL\u201d option.","title":"Importing more data"},{"location":"imports/#the-import-dialog","text":"When you import data into an existing document, Grist opens an import dialog to show you what will be imported. This dialog offers available import options, lets you choose whether to create a new table or add to an existing one, and shows a preview of the data. The \u201cImport options\u201d link on the top right is sometimes useful when importing delimited files. Grist guesses the settings to parse the data (such as the field delimiter), but if it guesses incorrectly, you can adjust the settings.","title":"The Import dialog"},{"location":"imports/#guessing-data-structure","text":"In all cases, when you import a file, Grist makes guesses about the structure of the file. For Excel files, Grist treats each sheet as a separated table. For CSV and other delimited formats, one file becomes one table. For both Excel and delimited files, Grist tries to detect whether the headers are included and which line they occur in. If Grist detects there are no headers, it will name columns as \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, etc. Grist automatically tries to parse numbers, dates, and boolean fields to detect the most suitable type for each column. It tries to be lossless: e.g. if it marks a column as numeric, any text values in it (such as \u201cN/A\u201d) will remain in the imported table, but will be highlighted due to the type mismatch. You can always rename tables and columns after an import, as well as convert types.","title":"Guessing data structure"},{"location":"imports/#import-to-an-existing-table","text":"By default, Grist imports new data as new tables, but the Import dialog allows you to change the destination and import data into an existing table. To import cleanly into an existing table, the new data must have column names that exactly match the column names in the destination table. This is best suited for importing multiple datasets in the same format. For instance, you could import a bank statement as a new table, then import more statements from other months into the same table. For developers, the Grist API offers a more powerful way to add data to a Grist document.","title":"Import to an existing table"},{"location":"investment-research/","text":"How to analyze and visualize data # Grist offers several powerful ways to analyze and visualize data. In this tutorial, you\u2019ll learn how to: Create summary tables Create and configure charts Link charts dynamically To explain these features, we\u2019ll use the sample document \u201cInvestment Research\u201d 1 . The dataset comes from Kaggle , and includes companies and investments in them up to 2013. Let\u2019s take a look at the sample document and then we\u2019ll talk about how to build it so that you can apply these tools to your own data. Exploring the example # Open the document \u201cInvestment Research\u201d, found in Examples & Templates in your Grist home page. The first thing you\u2019ll see is \u201cOverview\u201d. This page contains two charts next to two tables. The top left has a pie chart showing the distribution of investments by category. The table next to it has the same data in tabular form. Below the pie chart is a bar graph showing the total investments raised by year. It is also accompanied by the same data in the table next to it in tabular form. All these charts and tables are examples of \u201csummary tables\u201d, which we\u2019ll describe below. The next page, \u201cBreakdowns\u201d, also contains two tables and two charts, but these are linked dynamically and offer much more detailed insight into the data. On the top left is a table showing the total funding by year (the same table as we saw on the previous page). This table serves as a driver for the chart next to it. When you click on a year in the table, the pie chart updates to show the distribution of investments in that year. Similarly, the bottom table shows investments by category. When you click on any category, the line chart next to it updates to show the history of funding in that category over the years. Note how powerful this is, and how much insight you can gain from it. For instance, you can see that Advertising category has been getting a lot of investment in NY since 2007, but was overtaken by E-commerce in 2012-2013, while the Fashion category had a major spike in 2011. On the next page, \u201cCompany Details\u201d, we get to see the granular data of this dataset. Here, we see a list of companies and the categories they fall into. Each company shown has a link pointing to its listing on the Crunchbase website. Selecting a company shows a card with its details, as well as a list of all the investments it has received. This is where we begin to see the power of Grist. The original dataset is a flat spreadsheet of companies, and an even bigger spreadsheet of investments. By displaying the data graphically, the data comes alive, making it powerful and useful. How can I make this? # With Grist, presenting your own data in graphic form is a few easy steps away. Let\u2019s begin with the first step. Get the data # Let\u2019s import the raw data. We\u2019ll import two CSV files, where each will become its own table. To follow along, save the files from crunchbase_companies_ny.csv and crunchbase_investments_ny.csv to your computer first. Then, create a Grist document by importing the first file from the home page. Next, import the second table using the \u201cAdd New\u201d button and the \u201cImport from file\u201d option. In the import dialog box, finish by clicking \u201cImport\u201d on the bottom left. The tables you\u2019ve imported will be named \u201ccrunchbase_companies_ny\u201d and \u201ccrunchbase_investments_ny\u201d. Use the page menu (click on the three dots beside the file name) to rename them \u201cCompanies\u201d and \u201cInvestments\u201d. Make it relational # The power of Grist comes from giving structure to the data. Take a look at the \u201cInvestments\u201d table. Sort by the first column and you\u2019ll notice how much repetition there is: each row contains the complete company info, which both duplicates the data in the \u201cCompanies\u201d table, and is repeated multiple times when multiple investments apply to the same company. 2 The reality is that each investment applies to a single company. Each investment row only needs to contain a reference to a company, and the data specific to that investment. To make it so, find a column that identifies a company uniquely. In this dataset, the first column, \u201ccompany_permalink\u201d, does it best 3 . Click on the arrow in the column header and click \u201cColumn Options\u201d. Click on the arrow beside \u201cText\u201d under the \u201cColumn Type\u201d in the dialogue box at the right of the screen and select \u201cReference\u201d from the list. Grist will automatically suggest to make it a \u201cReference\u201d to the \u201cCompanies\u201d table, and to show the referenced company\u2019s \u201cpermalink\u201d. Click \u201cApply\u201d to save this conversion. Let\u2019s also rename this column to \u201cCompany\u201d. In Grist, duplicated data is not needed and we recommend removing it. Using the Option-Minus (Mac) or Alt-Minus (Windows) shortcut is a quick way to remove columns. After removing the columns from \u201ccompany_name\u201d to \u201ccompany_city\u201d, here\u2019s what\u2019s left: The data you\u2019ve deleted isn\u2019t lost since it was duplicated \u2013 it\u2019s still available in the \u201cCompanies\u201d table and can be used in an Investment record\u2019s formula as, e.g. $Company.company_xxx . In fact, there\u2019s a handy way to create this kind of formula. Let\u2019s create one that we\u2019ll need later. Click the header of the \u201cCompany\u201d column. In the right panel\u2019s Column tab, you\u2019ll see a section \u2018Add Referenced Columns\u2019. Click \u2018Add Column\u2019 to add the \u201ccategory_code\u201d column. A new column will be added to the table with the formula $Company.category_code . For each investment, it shows the \u201ccategory_code\u201d of the company linked to its investment record. Summarize # The powerful feature you\u2019ve been waiting for is the one that summarizes the data. To utilize this, let\u2019s add a table showing companies grouped by \u201ccategory_code\u201d. In the \u201cAdd New\u201d menu at the top left, select \u201cAdd Page\u201d. In the dialog box, select \u201cTable\u201d and \u201cCompanies\u201d, and then use the summation icon ( ) to select the \u201cGroup By\u201d columns \u2013 i.e. the columns by which to summarize. If you don\u2019t select any columns, you\u2019ll just get a single row of totals. If you summarize by \u201ccategory_code\u201d, you\u2019ll get a row for each distinct value of \u201ccategory_code\u201d. Let\u2019s do that and then click \u201cAdd Page\u201d. This is similar to Excel\u2019s pivot tables. Each row represents the group of records from the source table (\u201cCompanies\u201d) that have a particular value of \u201ccategory_code\u201d. There is a reminder of that in the table\u2019s title (\u201cCOMPANIES [by category_code]\u201d). Such summary tables can (and should!) use formulas. The columns you choose when creating the table are the identifiers of the groups. All other columns are formula columns \u2013 they are calculated. In formulas, the group of source records summarized by one row is available as the value \u201c$group\u201d. For example, you\u2019ll see a column created automatically called \u201ccount\u201d. If you hit \u201cEnter\u201d, you\u2019ll see the formula in it \u2013 len($group) \u2013 that\u2019s just the number of records in that group of records, i.e. the number of companies in that category. For numeric columns in the source table, summary tables automatically get a same-named numeric column containing a sum, with a formula such as SUM($group.funding_total_usd) . Side note for Python fans. $group is a special Python object. It\u2019s an iterable collection of records. Using an attribute like $group.A is a shorthand for the list of values in the A column of all the records in the group, i.e. it\u2019s roughly equivalent to [r.A for r in $group] . Sometimes, adding the values doesn\u2019t make sense. E.g. the sum of \u201cfounded_year\u201d is meaningless. It\u2019s best to delete this and any other column we don\u2019t need, which leaves us with the \u201cfunding_total_usd\u201d column. Let\u2019s add a second summary table. Select \u201cAdd New\u201d again to \u201cAdd Widget to Page\u201d. To get a summary by year, select the \u201cInvestments\u201d table under \u201cSelect Data\u201d, and again use its sum symbol (\u2211) to select the column by which to summarize: \u201cfunded_year\u201d and then click \u201cAdd to page\u201d. This produces a second summary table that shows a record for each year, with each representing a group of \u201cInvestments\u201d rows for that year. The most useful column is \u201craised_amount_usd\u201d, adding all investments made in that year. Let\u2019s delete the unneeded columns. You\u2019ll notice pink values in \u201craised_amount_usd\u201d. That\u2019s because Grist guesses the column type to be an integer.The pink sums are instances where the numbers exceed Javascript\u2019s ability to handle large integers. To correct for this, the type of the column should be switched to \u201cNumeric\u201d (which trades off precision for the ability to represent very large and very small numbers). Change the type to \u201cNumeric\u201c under \u201cColumn options\u201d. Chart, graph, plot # You can make a chart of any data. To this page, we want to add a graphic version of each summary table. Select the \u201cAdd New\u201d button again, pick \u201cAdd Widget to Page\u201d, select \u201cChart\u201d as the widget, and the same table (Companies) and summary column (category_code) as before. Then click \u201cAdd to Page\u201d. For a chart, you\u2019ll always follow up by customizing it. Open the right panel, and select \u201cChart\u201d tab / \u201cWidget\u201d subtab. The \u201cVisible Series\u201d section in the subtab determines which columns of data will be used as the series in the chart. Their exact meaning depends on the chart type. For this first chart, under \u201cChart type, select \u201cPie Chart\u201d. To construct this chart, two \u201cVisible Series\u201d are required: the first one will be used as labels, and the second as values. Since we want the chart to show \u201ccategory_code\u201d as labels, and \u201cfunding_total_usd\u201d as values, those should be the two items in the \u201cVisible Series\u201d list in the configuration panel. As you move your mouse over the items in that list, use the \u201ceye\u201d icon that shows up to remove the other series from the list. Alternatively, you can select the unneeded columns using checkboxes, and click \u201cHide Series\u201d. Now add a chart showing a trend by year. Add another \u201cWidget to page\u201d, select \u201cChart\u201d under \u201cWidget\u201d, select \u201cInvestments\u201d under \u201cSelect Data\u201d, click summation ( ) to group by \u201cfunded_year\u201d, and click \u201cAdd to Page\u201d. To customize this chart, stick with the chart type \u201cBar Chart\u201d. The list of \u201cVisible Series\u201d in the \u201cChart\u201d tab should now be adjusted: the first series will be the values for the X (horizontal) axis, and second (and possible additional) series will be the values for the Y (vertical) axis. So hide the unwanted columns (\u201ccount\u201d), and leave the \u201cfunded_year\u201d first (to serve as the X-values), and \u201craised_amount_usd\u201d second (to serve as the Y-values). Drag and drop the sections into a configuration you\u2019d like to see for a dashboard, and then rename the page \u201cOverview\u201d. You can rearrange the sections on the screen into a configuration you\u2019d like to see for a dashboard. Move your mouse to the top left of each section until you see a \u201cdrag handle\u201d icon. Use that icon to drag each section into the desired spot relative to other sections. Once you\u2019re finished, rename the page \u201cOverview\u201d. Dynamic charts # If you\u2019ve read our other tutorials on linking data, this will come naturally. Charts are simply a different way to show data, and they can be linked in the same way as tables. For our example, we\u2019ll add a new page with a summary table: select widget \u201cTable\u201d, data \u201cInvestments\u201d, group by \u201cfunded_year\u201d, click \u201cAdd to Page\u201d. Let\u2019s rename this new page \u201cBreakdowns\u201d. Next, add a widget to this page, selecting widget \u201cChart\u201d, data \u201cInvestments\u201d. For \u201cGroup By\u201d, we pick two columns: \u201cCompany_category_code\u201d and \u201cfunded_year\u201d. Note: This is why we added the \u201cCompany_category_code\u201d column earlier. We can only group investment records by the category code if we have this code for each investment. The \u201cSelect By\u201d dropdown at the bottom left of the dialog box lists widgets already on the screen that can control the selection of data in the chart we are adding. In \u201cSelect By\u201d, choose \u201cINVESTMENTS [by funded_year]\u201d, and click \u201cAdd to Page\u201d. Note: If you need to make changes to a widget you already added, such as change its type, \u201cGroup By\u201d, or \u201cSelect By\u201d settings, you can always do so from the \u201cData\u201d subtab in the widget settings, using the \u201cEdit Data Selection\u201d button. We want to be able to select a year, and then show a pie chart for that year that displays the total for each category code. The \u201cSelect By\u201d option we chose ensures that only the selected year\u2019s data is used. All that\u2019s left is to change the chart type to \u201cPie Chart\u201d, and set \u201cVisible Series\u201d to only \u201ccategory_code\u201d and \u201craised_amount_usd\u201d and hide the other data series. Note: Graphs need more screenspace, so our small screenshots will look better if we close the side panels by clicking on the opener icons ( , ). Let\u2019s also sort the table by \u201cfunded_year\u201d. As far as sorting, the highlighted button above the table reminds you that sort settings aren\u2019t saved automatically. Click the green button and select \u201cSave\u201d to do that. What\u2019s the result? We can click through the years (or use arrow keys), and see the distribution by category change. Note: If clicking through the years does not affect the chart, the chart must not be linked. You can check and correct it by using the \u201cthree dots\u201d menu on top right of the chart, clicking \u201cData selection\u201d, and ensuring that \u201cSelect By\u201d dropdown is showing \u201cINVESTMENTS [by funded_year]\u201d. To complete the example, we will add two more sections to this \u201cBreakdowns\u201d page. One will be a table listing company categories, and linked to it will be a chart showing the amount of investment in that category over the years. To add the table of categories, use \u201cAdd Widget to Page\u201d, and select \u201cTable\u201d widget, \u201cInvestments\u201d data, grouped by \u201cCompany_category_code\u201d. The \u201cfunded_year\u201d column in the resulting table is meaningless, and should be deleted. For the last step, we add another chart. We need to remember to group by both \u201cCompany_category_code\u201d \u201cfunded_year\u201d, and to set a suitable \u201cSelect By\u201d widget for it. Since there are two tables on this page, you have a choice of which one will drive the data in this chart. In this case, pick the widget that we just added: \u201cINVESTMENTS [by Company_category_code]\u201d. As in the previous section, we configure the chart by selecting \u201cChart Type\u201d as \u201cBar Chart\u201d, and in the \u201cVisible Series\u201d list, leaving the series \u201cfunded_year\u201d (the x-axis) and \u201craised_amount_usd\u201d (the y-axis), and hiding the rest. We can now click through the categories, and see the history of investment into each one. Next steps # If you\u2019re unfamiliar with how we created the \u201cCompany Details\u201d page that\u2019s present in the example, visit one of these earlier tutorials to learn how: \u2018How to build a Lightweight CRM\u2019, or \u2018Managing your Business in Grist\u2019. That\u2019s it! Now go analyze some data! The sample document includes only the \u201ccompanies\u201d and \u201cinvestments\u201d data, and includes only New York companies to keep it smaller and faster. \u21a9 Such duplication is commonly seen in spreadsheets. Data in this form is called \u201cdenormalized\u201d. \u21a9 If you don\u2019t have a single identifying column, you can construct one with a formula. \u21a9","title":"Analyze and visualize"},{"location":"investment-research/#exploring-the-example","text":"Open the document \u201cInvestment Research\u201d, found in Examples & Templates in your Grist home page. The first thing you\u2019ll see is \u201cOverview\u201d. This page contains two charts next to two tables. The top left has a pie chart showing the distribution of investments by category. The table next to it has the same data in tabular form. Below the pie chart is a bar graph showing the total investments raised by year. It is also accompanied by the same data in the table next to it in tabular form. All these charts and tables are examples of \u201csummary tables\u201d, which we\u2019ll describe below. The next page, \u201cBreakdowns\u201d, also contains two tables and two charts, but these are linked dynamically and offer much more detailed insight into the data. On the top left is a table showing the total funding by year (the same table as we saw on the previous page). This table serves as a driver for the chart next to it. When you click on a year in the table, the pie chart updates to show the distribution of investments in that year. Similarly, the bottom table shows investments by category. When you click on any category, the line chart next to it updates to show the history of funding in that category over the years. Note how powerful this is, and how much insight you can gain from it. For instance, you can see that Advertising category has been getting a lot of investment in NY since 2007, but was overtaken by E-commerce in 2012-2013, while the Fashion category had a major spike in 2011. On the next page, \u201cCompany Details\u201d, we get to see the granular data of this dataset. Here, we see a list of companies and the categories they fall into. Each company shown has a link pointing to its listing on the Crunchbase website. Selecting a company shows a card with its details, as well as a list of all the investments it has received. This is where we begin to see the power of Grist. The original dataset is a flat spreadsheet of companies, and an even bigger spreadsheet of investments. By displaying the data graphically, the data comes alive, making it powerful and useful.","title":"Exploring the example"},{"location":"investment-research/#get-the-data","text":"Let\u2019s import the raw data. We\u2019ll import two CSV files, where each will become its own table. To follow along, save the files from crunchbase_companies_ny.csv and crunchbase_investments_ny.csv to your computer first. Then, create a Grist document by importing the first file from the home page. Next, import the second table using the \u201cAdd New\u201d button and the \u201cImport from file\u201d option. In the import dialog box, finish by clicking \u201cImport\u201d on the bottom left. The tables you\u2019ve imported will be named \u201ccrunchbase_companies_ny\u201d and \u201ccrunchbase_investments_ny\u201d. Use the page menu (click on the three dots beside the file name) to rename them \u201cCompanies\u201d and \u201cInvestments\u201d.","title":"Get the data"},{"location":"investment-research/#make-it-relational","text":"The power of Grist comes from giving structure to the data. Take a look at the \u201cInvestments\u201d table. Sort by the first column and you\u2019ll notice how much repetition there is: each row contains the complete company info, which both duplicates the data in the \u201cCompanies\u201d table, and is repeated multiple times when multiple investments apply to the same company. 2 The reality is that each investment applies to a single company. Each investment row only needs to contain a reference to a company, and the data specific to that investment. To make it so, find a column that identifies a company uniquely. In this dataset, the first column, \u201ccompany_permalink\u201d, does it best 3 . Click on the arrow in the column header and click \u201cColumn Options\u201d. Click on the arrow beside \u201cText\u201d under the \u201cColumn Type\u201d in the dialogue box at the right of the screen and select \u201cReference\u201d from the list. Grist will automatically suggest to make it a \u201cReference\u201d to the \u201cCompanies\u201d table, and to show the referenced company\u2019s \u201cpermalink\u201d. Click \u201cApply\u201d to save this conversion. Let\u2019s also rename this column to \u201cCompany\u201d. In Grist, duplicated data is not needed and we recommend removing it. Using the Option-Minus (Mac) or Alt-Minus (Windows) shortcut is a quick way to remove columns. After removing the columns from \u201ccompany_name\u201d to \u201ccompany_city\u201d, here\u2019s what\u2019s left: The data you\u2019ve deleted isn\u2019t lost since it was duplicated \u2013 it\u2019s still available in the \u201cCompanies\u201d table and can be used in an Investment record\u2019s formula as, e.g. $Company.company_xxx . In fact, there\u2019s a handy way to create this kind of formula. Let\u2019s create one that we\u2019ll need later. Click the header of the \u201cCompany\u201d column. In the right panel\u2019s Column tab, you\u2019ll see a section \u2018Add Referenced Columns\u2019. Click \u2018Add Column\u2019 to add the \u201ccategory_code\u201d column. A new column will be added to the table with the formula $Company.category_code . For each investment, it shows the \u201ccategory_code\u201d of the company linked to its investment record.","title":"Make it relational"},{"location":"investment-research/#summarize","text":"The powerful feature you\u2019ve been waiting for is the one that summarizes the data. To utilize this, let\u2019s add a table showing companies grouped by \u201ccategory_code\u201d. In the \u201cAdd New\u201d menu at the top left, select \u201cAdd Page\u201d. In the dialog box, select \u201cTable\u201d and \u201cCompanies\u201d, and then use the summation icon ( ) to select the \u201cGroup By\u201d columns \u2013 i.e. the columns by which to summarize. If you don\u2019t select any columns, you\u2019ll just get a single row of totals. If you summarize by \u201ccategory_code\u201d, you\u2019ll get a row for each distinct value of \u201ccategory_code\u201d. Let\u2019s do that and then click \u201cAdd Page\u201d. This is similar to Excel\u2019s pivot tables. Each row represents the group of records from the source table (\u201cCompanies\u201d) that have a particular value of \u201ccategory_code\u201d. There is a reminder of that in the table\u2019s title (\u201cCOMPANIES [by category_code]\u201d). Such summary tables can (and should!) use formulas. The columns you choose when creating the table are the identifiers of the groups. All other columns are formula columns \u2013 they are calculated. In formulas, the group of source records summarized by one row is available as the value \u201c$group\u201d. For example, you\u2019ll see a column created automatically called \u201ccount\u201d. If you hit \u201cEnter\u201d, you\u2019ll see the formula in it \u2013 len($group) \u2013 that\u2019s just the number of records in that group of records, i.e. the number of companies in that category. For numeric columns in the source table, summary tables automatically get a same-named numeric column containing a sum, with a formula such as SUM($group.funding_total_usd) . Side note for Python fans. $group is a special Python object. It\u2019s an iterable collection of records. Using an attribute like $group.A is a shorthand for the list of values in the A column of all the records in the group, i.e. it\u2019s roughly equivalent to [r.A for r in $group] . Sometimes, adding the values doesn\u2019t make sense. E.g. the sum of \u201cfounded_year\u201d is meaningless. It\u2019s best to delete this and any other column we don\u2019t need, which leaves us with the \u201cfunding_total_usd\u201d column. Let\u2019s add a second summary table. Select \u201cAdd New\u201d again to \u201cAdd Widget to Page\u201d. To get a summary by year, select the \u201cInvestments\u201d table under \u201cSelect Data\u201d, and again use its sum symbol (\u2211) to select the column by which to summarize: \u201cfunded_year\u201d and then click \u201cAdd to page\u201d. This produces a second summary table that shows a record for each year, with each representing a group of \u201cInvestments\u201d rows for that year. The most useful column is \u201craised_amount_usd\u201d, adding all investments made in that year. Let\u2019s delete the unneeded columns. You\u2019ll notice pink values in \u201craised_amount_usd\u201d. That\u2019s because Grist guesses the column type to be an integer.The pink sums are instances where the numbers exceed Javascript\u2019s ability to handle large integers. To correct for this, the type of the column should be switched to \u201cNumeric\u201d (which trades off precision for the ability to represent very large and very small numbers). Change the type to \u201cNumeric\u201c under \u201cColumn options\u201d.","title":"Summarize"},{"location":"investment-research/#chart-graph-plot","text":"You can make a chart of any data. To this page, we want to add a graphic version of each summary table. Select the \u201cAdd New\u201d button again, pick \u201cAdd Widget to Page\u201d, select \u201cChart\u201d as the widget, and the same table (Companies) and summary column (category_code) as before. Then click \u201cAdd to Page\u201d. For a chart, you\u2019ll always follow up by customizing it. Open the right panel, and select \u201cChart\u201d tab / \u201cWidget\u201d subtab. The \u201cVisible Series\u201d section in the subtab determines which columns of data will be used as the series in the chart. Their exact meaning depends on the chart type. For this first chart, under \u201cChart type, select \u201cPie Chart\u201d. To construct this chart, two \u201cVisible Series\u201d are required: the first one will be used as labels, and the second as values. Since we want the chart to show \u201ccategory_code\u201d as labels, and \u201cfunding_total_usd\u201d as values, those should be the two items in the \u201cVisible Series\u201d list in the configuration panel. As you move your mouse over the items in that list, use the \u201ceye\u201d icon that shows up to remove the other series from the list. Alternatively, you can select the unneeded columns using checkboxes, and click \u201cHide Series\u201d. Now add a chart showing a trend by year. Add another \u201cWidget to page\u201d, select \u201cChart\u201d under \u201cWidget\u201d, select \u201cInvestments\u201d under \u201cSelect Data\u201d, click summation ( ) to group by \u201cfunded_year\u201d, and click \u201cAdd to Page\u201d. To customize this chart, stick with the chart type \u201cBar Chart\u201d. The list of \u201cVisible Series\u201d in the \u201cChart\u201d tab should now be adjusted: the first series will be the values for the X (horizontal) axis, and second (and possible additional) series will be the values for the Y (vertical) axis. So hide the unwanted columns (\u201ccount\u201d), and leave the \u201cfunded_year\u201d first (to serve as the X-values), and \u201craised_amount_usd\u201d second (to serve as the Y-values). Drag and drop the sections into a configuration you\u2019d like to see for a dashboard, and then rename the page \u201cOverview\u201d. You can rearrange the sections on the screen into a configuration you\u2019d like to see for a dashboard. Move your mouse to the top left of each section until you see a \u201cdrag handle\u201d icon. Use that icon to drag each section into the desired spot relative to other sections. Once you\u2019re finished, rename the page \u201cOverview\u201d.","title":"Chart, graph, plot"},{"location":"investment-research/#dynamic-charts","text":"If you\u2019ve read our other tutorials on linking data, this will come naturally. Charts are simply a different way to show data, and they can be linked in the same way as tables. For our example, we\u2019ll add a new page with a summary table: select widget \u201cTable\u201d, data \u201cInvestments\u201d, group by \u201cfunded_year\u201d, click \u201cAdd to Page\u201d. Let\u2019s rename this new page \u201cBreakdowns\u201d. Next, add a widget to this page, selecting widget \u201cChart\u201d, data \u201cInvestments\u201d. For \u201cGroup By\u201d, we pick two columns: \u201cCompany_category_code\u201d and \u201cfunded_year\u201d. Note: This is why we added the \u201cCompany_category_code\u201d column earlier. We can only group investment records by the category code if we have this code for each investment. The \u201cSelect By\u201d dropdown at the bottom left of the dialog box lists widgets already on the screen that can control the selection of data in the chart we are adding. In \u201cSelect By\u201d, choose \u201cINVESTMENTS [by funded_year]\u201d, and click \u201cAdd to Page\u201d. Note: If you need to make changes to a widget you already added, such as change its type, \u201cGroup By\u201d, or \u201cSelect By\u201d settings, you can always do so from the \u201cData\u201d subtab in the widget settings, using the \u201cEdit Data Selection\u201d button. We want to be able to select a year, and then show a pie chart for that year that displays the total for each category code. The \u201cSelect By\u201d option we chose ensures that only the selected year\u2019s data is used. All that\u2019s left is to change the chart type to \u201cPie Chart\u201d, and set \u201cVisible Series\u201d to only \u201ccategory_code\u201d and \u201craised_amount_usd\u201d and hide the other data series. Note: Graphs need more screenspace, so our small screenshots will look better if we close the side panels by clicking on the opener icons ( , ). Let\u2019s also sort the table by \u201cfunded_year\u201d. As far as sorting, the highlighted button above the table reminds you that sort settings aren\u2019t saved automatically. Click the green button and select \u201cSave\u201d to do that. What\u2019s the result? We can click through the years (or use arrow keys), and see the distribution by category change. Note: If clicking through the years does not affect the chart, the chart must not be linked. You can check and correct it by using the \u201cthree dots\u201d menu on top right of the chart, clicking \u201cData selection\u201d, and ensuring that \u201cSelect By\u201d dropdown is showing \u201cINVESTMENTS [by funded_year]\u201d. To complete the example, we will add two more sections to this \u201cBreakdowns\u201d page. One will be a table listing company categories, and linked to it will be a chart showing the amount of investment in that category over the years. To add the table of categories, use \u201cAdd Widget to Page\u201d, and select \u201cTable\u201d widget, \u201cInvestments\u201d data, grouped by \u201cCompany_category_code\u201d. The \u201cfunded_year\u201d column in the resulting table is meaningless, and should be deleted. For the last step, we add another chart. We need to remember to group by both \u201cCompany_category_code\u201d \u201cfunded_year\u201d, and to set a suitable \u201cSelect By\u201d widget for it. Since there are two tables on this page, you have a choice of which one will drive the data in this chart. In this case, pick the widget that we just added: \u201cINVESTMENTS [by Company_category_code]\u201d. As in the previous section, we configure the chart by selecting \u201cChart Type\u201d as \u201cBar Chart\u201d, and in the \u201cVisible Series\u201d list, leaving the series \u201cfunded_year\u201d (the x-axis) and \u201craised_amount_usd\u201d (the y-axis), and hiding the rest. We can now click through the categories, and see the history of investment into each one.","title":"Dynamic charts"},{"location":"investment-research/#next-steps","text":"If you\u2019re unfamiliar with how we created the \u201cCompany Details\u201d page that\u2019s present in the example, visit one of these earlier tutorials to learn how: \u2018How to build a Lightweight CRM\u2019, or \u2018Managing your Business in Grist\u2019. That\u2019s it! Now go analyze some data! The sample document includes only the \u201ccompanies\u201d and \u201cinvestments\u201d data, and includes only New York companies to keep it smaller and faster. \u21a9 Such duplication is commonly seen in spreadsheets. Data in this form is called \u201cdenormalized\u201d. \u21a9 If you don\u2019t have a single identifying column, you can construct one with a formula. \u21a9","title":"Next steps"},{"location":"keyboard-shortcuts/","text":"Grist Shortcuts # General # Key (Mac) Key (Windows) Description F1 , \u2318 / F1 , Ctrl + / Display shortcuts pane \u2318 Z Ctrl + Z Undo last action \u2318 \u21e7 Z , \u2303 Y Ctrl + Shift + Z , Ctrl + Y Redo last action \u2318 F Ctrl + F Find \u2318 G Ctrl + G Find next occurrence \u2318 \u21e7 G Ctrl + Shift + G Find previous occurrence Navigation # Key (Mac) Key (Windows) Description \u2193 \u2193 Move downward to next record or field \u2191 \u2191 Move upward to previous record or field \u2192 \u2192 Move right to the next field \u2190 \u2190 Move left to the previous field Tab Tab Move to the next field, saving changes if editing a value \u21e7 Tab Shift + Tab Move to the previous field, saving changes if editing a value PageDown PageDown Move down one page of records, or to next record in a card list PageUp PageUp Move up one page of records, or to previous record in a card list \u2318 \u2191 Ctrl + \u2191 Move up to the first record \u2318 \u2193 Ctrl + \u2193 Move down to the last record Home Home Move to the first field or the beginning of a row End End Move to the last field or the end of a row \u2325 \u2193 Alt + \u2193 Open next page \u2325 \u2191 Alt + \u2191 Open previous page \u2318 O Ctrl + O Activate next page widget \u2318 \u21e7 O Ctrl + Shift + O Activate previous page widget Selection # Key (Mac) Key (Windows) Description \u21e7 \u2193 Shift + \u2193 Adds the element below the cursor to the selected range \u21e7 \u2191 Shift + \u2191 Adds the element above the cursor to the selected range \u21e7 \u2192 Shift + \u2192 Adds the element to the right of the cursor to the selected range \u21e7 \u2190 Shift + \u2190 Adds the element to the left of the cursor to the selected range \u2318 A Ctrl + A Selects all currently displayed cells \u2318 \u21e7 A Ctrl + Shift + A Copy anchor link Editing # Key (Mac) Key (Windows) Description Enter , F2 Enter , F2 Start editing the currently-selected cell Enter Enter Finish editing a cell, saving the value Escape Escape Discard changes to a cell value \u2318 D Ctrl + D Fills current selection with the contents of the top row in the selection Backspace , Del Backspace , Del Clears the currently selected cells Enter , Space Enter , Space Toggles the value of checkbox cells = = When typed at the start of a cell, make this a formula column \u2318 ; Ctrl + ; Insert the current date \u2318 \u21e7 ; Ctrl + Shift + ; Insert the current date and time Data manipulation # Key (Mac) Key (Windows) Description \u2318 \u21e7 = Ctrl + Shift + = Insert a new record, before the currently selected one in an unsorted table \u2318 = Ctrl + = Insert a new record, after the currently selected one in an unsorted table \u2318 - Ctrl + - Delete the currently selected record \u2325 \u21e7 = Alt + Shift + = Insert a new column, before the currently selected one \u2325 = Alt + = Insert a new column, after the currently selected one \u2303 M Ctrl + M Rename the currently selected column \u2325 \u21e7 - Alt + Shift + - Hide the currently selected column \u2325 - Alt + - Delete the currently selected columns","title":"Shortcuts"},{"location":"keyboard-shortcuts/#grist-shortcuts","text":"","title":"Grist Shortcuts"},{"location":"keyboard-shortcuts/#general","text":"Key (Mac) Key (Windows) Description F1 , \u2318 / F1 , Ctrl + / Display shortcuts pane \u2318 Z Ctrl + Z Undo last action \u2318 \u21e7 Z , \u2303 Y Ctrl + Shift + Z , Ctrl + Y Redo last action \u2318 F Ctrl + F Find \u2318 G Ctrl + G Find next occurrence \u2318 \u21e7 G Ctrl + Shift + G Find previous occurrence","title":"General"},{"location":"keyboard-shortcuts/#navigation","text":"Key (Mac) Key (Windows) Description \u2193 \u2193 Move downward to next record or field \u2191 \u2191 Move upward to previous record or field \u2192 \u2192 Move right to the next field \u2190 \u2190 Move left to the previous field Tab Tab Move to the next field, saving changes if editing a value \u21e7 Tab Shift + Tab Move to the previous field, saving changes if editing a value PageDown PageDown Move down one page of records, or to next record in a card list PageUp PageUp Move up one page of records, or to previous record in a card list \u2318 \u2191 Ctrl + \u2191 Move up to the first record \u2318 \u2193 Ctrl + \u2193 Move down to the last record Home Home Move to the first field or the beginning of a row End End Move to the last field or the end of a row \u2325 \u2193 Alt + \u2193 Open next page \u2325 \u2191 Alt + \u2191 Open previous page \u2318 O Ctrl + O Activate next page widget \u2318 \u21e7 O Ctrl + Shift + O Activate previous page widget","title":"Navigation"},{"location":"keyboard-shortcuts/#selection","text":"Key (Mac) Key (Windows) Description \u21e7 \u2193 Shift + \u2193 Adds the element below the cursor to the selected range \u21e7 \u2191 Shift + \u2191 Adds the element above the cursor to the selected range \u21e7 \u2192 Shift + \u2192 Adds the element to the right of the cursor to the selected range \u21e7 \u2190 Shift + \u2190 Adds the element to the left of the cursor to the selected range \u2318 A Ctrl + A Selects all currently displayed cells \u2318 \u21e7 A Ctrl + Shift + A Copy anchor link","title":"Selection"},{"location":"keyboard-shortcuts/#editing","text":"Key (Mac) Key (Windows) Description Enter , F2 Enter , F2 Start editing the currently-selected cell Enter Enter Finish editing a cell, saving the value Escape Escape Discard changes to a cell value \u2318 D Ctrl + D Fills current selection with the contents of the top row in the selection Backspace , Del Backspace , Del Clears the currently selected cells Enter , Space Enter , Space Toggles the value of checkbox cells = = When typed at the start of a cell, make this a formula column \u2318 ; Ctrl + ; Insert the current date \u2318 \u21e7 ; Ctrl + Shift + ; Insert the current date and time","title":"Editing"},{"location":"keyboard-shortcuts/#data-manipulation","text":"Key (Mac) Key (Windows) Description \u2318 \u21e7 = Ctrl + Shift + = Insert a new record, before the currently selected one in an unsorted table \u2318 = Ctrl + = Insert a new record, after the currently selected one in an unsorted table \u2318 - Ctrl + - Delete the currently selected record \u2325 \u21e7 = Alt + Shift + = Insert a new column, before the currently selected one \u2325 = Alt + = Insert a new column, after the currently selected one \u2303 M Ctrl + M Rename the currently selected column \u2325 \u21e7 - Alt + Shift + - Hide the currently selected column \u2325 - Alt + - Delete the currently selected columns","title":"Data manipulation"},{"location":"lightweight-crm/","text":"How to create a custom CRM # Grist is as easy to use as a spreadsheet, but gives you new powers when data doesn\u2019t fit in a simple grid. A good example is keeping track of contacts and our conversations with them. For a business, this could be customers, sales leads, or job candidates. For an individual, it could be companies they have applied to in a job search. In this tutorial, we\u2019ll explain the \u201cLightweight CRM\u201d example, which you can use as a template for your own contacts, and then show how to build it from scratch. You\u2019ll learn how to: Add tables Link data Set column types Create custom layouts Exploring the example # Open the document \u201cLightweight CRM\u201d, found in Examples & Templates in your Grist home page. You\u2019ll see the \u201cContacts\u201d page, listing contacts on the left of the screen. Click on any contact to select it. The two sections on the right show the details and the history of interactions with the selected contact. How does this compare to a spreadsheet? These screenshots show the Lightweight CRM example on the left, and a regular spreadsheet with the same data on the right. Previous Next Previous Next The difficulty is in the history of notes for a contact. In a two-dimensional grid, you have few options for where to include multiple notes. If you include them as multiple columns, it quickly makes the spreadsheet unwieldy and difficult to navigate. Grist feels more like an application, but it\u2019s still as versatile as a spreadsheet. The \u201cLightweight CRM\u201d example can be used immediately as-is (with the sample data), or as a template (just the structure without the data). Here are a few more points on using it as a CRM: To add a new contact, click the blank row at the bottom of the contacts list, then fill in the blank \u201cCONTACTS Card\u201d section that shows on the right. To add a new conversation, select a contact, then click the blank line at the end of the Interactions table. You can enter today\u2019s date using the shortcut \u2318 + ; (semicolon) (Mac) or Ctrl + ; (semicolon) (Windows). Then select the type of interaction using auto-complete, and type in your notes. You can add To-Do items for a contact: in the Interactions list, select \u201cTo-Do\u201d in the \u201cType\u201d column as a special type of interaction. Think of the associated date as the due date for this task. The Contacts table shows the list of coming up To-Do items, sorted by their due date. If you use Gmail, the handy \u201cGmail search\u201d link in the \u201cCONTACTS Card\u201d section will open a browser window with the Gmail search results for this contact\u2019s email address. You can use this example as a template for your own contacts. With the \u201cLightweight CRM\u201d example open, click the drop-down arrow beside the \u201cSave Copy\u201d button in in the top bar, and select \u201cCopy as Template\u201d. You\u2019ll get an empty document with the same layout, and can start filling it in with your own data. If you aren\u2019t signed in, you will need to sign in to make a copy of the example. Creating your own # The rest of this tutorial will show you how to create such a document on your own. It\u2019s a great exercise that will teach you some of the key features of Grist. To start, we\u2019ll import a file with sample contacts from the Grist home page. First, save this file to your desktop: lightweight-crm-contacts.csv . Then click the \u201cAdd New\u201d button on the top left of your Grist home page, click \u201cImport document\u201d, and select the file on your desktop. You\u2019ll see a table of contacts with sample data. Note that in Grist columns have names. Rename this table to \u201cContacts\u201d by clicking its name in the top bar, and typing the new name. That\u2019s all you need for a simple table of contacts. You can add rows here, or add new columns to associate more data with each contact. Adding another table # For our next step, we want to be able to select a contact, and see the list of conversations with that contact. These conversations should be a new table of data. The cue is that it has a different number of rows from the table of contacts. Create the new table using the green \u201cAdd New\u201d button on the top left of your screen, and click \u201cAdd Empty Table\u201d in the menu. This table will represent interactions with our contacts, so let\u2019s rename it \u201cInteractions\u201d by clicking its default name (\u201cTable1\u201d) on top of the screen, as before. It\u2019s a good idea to give meaningful names to columns. In this case, for each interaction, we need to know which Contact it refers to, the date, type, and conversation notes. To rename a column, click its header to select the column, and click the header again to edit its name. You can hit the Tab key to continue to renaming the next column. Finally, hit the \u201c+\u201d button to the right of the last column to create one more column, and name it \u201cNotes\u201d. Linking data records # Every record in this table will belong to a particular contact. You set it up by turning the \u201cContact\u201d column into a reference to the table \u201cContacts\u201d. Using the triangle in the header of the column \u201cContact\u201d, open the menu and select \u201cColumn Options\u201d. In the right panel, use the \u201cColumn Type\u201d dropdown to select \u201cReference\u201d, then under \u201cData from table\u201d, select \u201cContacts\u201d. Each cell in this column will hold a pointer to a row in the \u201cContacts\u201d table 1 . While it refers to an entire row, it\u2019s useful to see some particular identifier of that row, so under \u201cShow column\u201d, select \u201cCompany\u201d. You\u2019ll see this in action shortly. Setting other types # In Grist, every columns has a types. Often the default of Text or Numeric is correct. For our \u201cDate\u201d column, a better type is Date. Click any cell in the \u201cDate\u201d column, and in the right panel, click into the \u201cColumn Type\u201d dropdown and select \u201cDate\u201d. If you\u2019d like, you can also choose a different date format right below the type. Now, if you click on a cell in the \u201cDate\u201d column and hit Enter, you have a convenient date picker. Another useful column type for us is \u201cChoice\u201d. Our interactions will be either \u201cPhone\u201d, \u201cEmail\u201d, or \u201cIn-person\u201d, and it\u2019s useful to list these options. Click into the \u201cType\u201d column, and in the right panel, set \u201cColumn Type\u201d to \u201cChoice\u201d. You\u2019ll see \u201cChoice Values\u201d textbox below. Click it, and enter your choices there, one per line: \u201cPhone\u201d, \u201cEmail\u201d, \u201cIn-person\u201d. Now, if you click on a cell in the \u201cType\u201d column and hit Enter, you can now choose from among the choices you set, or start typing and use auto-complete. Linking tables visually # The next step is to link the two tables visually. Open the \u201cContacts\u201d page, click \u201cAdd Widget to Page\u201d, select widget \u201cTable\u201d and data \u201cInteractions\u201d. In the \u201cSelect By\u201d dropdown at the bottom of the dialog, select \u201cCONTACTS\u201d. This means that choosing a contact will display only the interactions with that contact. Click \u201cAdd to Page\u201d to finish. Next, let\u2019s select a contact (let\u2019s use \u201cDouglas LLC\u201d in the fourth row) and add some notes. Type in a date (hint: the shortcut \u2318 + ; (semicolon) on Mac or Ctrl + ; (semicolon) on Windows inserts today\u2019s date), select a type, and enter a note. As soon as that row is created, the \u201cContact\u201d column is automatically filled with \u201cDouglas LLC\u201d, thanks to the sections being linked. The note we added is shown only when \u201cDouglas LLC\u201d is selected. We can add more notes for \u201cDouglas LLC\u201d, or add notes for any of the other contacts. We can now hide the \u201cContact\u201d column in the \u201cInteractions\u201d table: using the menu in the column\u2019s header, select \u201cHide Column\u201d. Because the tables are linked, we already see who the notes are for. For longer notes to be convenient, resize the \u201cNotes\u201d column by dragging the right edge of its header. To wrap long notes, open the Column Options, and click the line-wrapping icon. Customizing layout # Once you have multiple tables on one screen, the layout of the screen may become an issue. Having many columns in the Contacts table may no longer be convenient. It\u2019s better to lay it out like a custom application: select a contact from a list on the left and see that contact\u2019s details and interactions. This can be done by using \u201cAdd Widget to Page\u201d again. This time, we\u2019ll select the widget \u201cCard\u201d for the table \u201cContacts\u201d, and for \u201cSelect By\u201d will again use \u201cCONTACTS\u201d. You can move the resulting sections around to create a convenient layout. Move your mouse to the top left of each section until you see a \u201cdrag handle\u201d icon. Use that icon to drag each section into the desired spot relative to other sections. You can also resize sections by moving the mouse between them to find a dotted line. Drag this line to resize. Note how the same personal data is now shown in two places on the screen. These are not copies of data, but different presentations of the same data. Changing the data in one place will change it in the other. Customizing fields # At this point, we may do some cleanup: hide unneeded columns in the main \u201cContacts\u201d table and rearrange fields in the Card widget. A quick way to hide columns is using the right panel. Using the three-dot menu on the top right of the \u201cContacts\u201d table, select \u201cWidget options\u201d. In the panel that opens, find a list of \u201cVisible columns\u201d. Move the mouse over each column to reveal the \u201ceye\u201d icon. Click it to hide all columns except \u201cCompany\u201d. To customize the Card widget, click it. The right panel will show the relevant options. You can select a different Theme, e.g. \u201cCompact\u201d. The rearrange fields, click \u201cEdit Layout\u201d in the right panel. You can now drag-and-drop fields in the card, resize them, or remove them. Click \u201cSave\u201d once you are done. In a few short steps, we have gone from a clunky, unwieldy spreadsheet to a concise, elegant record of your interactions in a simple, effective custom application. To-Do Tasks for Contacts # The \u201cLightweight CRM\u201d example has another trick up its sleeve. The \u201cType\u201d column in the interactions table has an extra choice, \u201cTo-Do\u201d. After you talk to a contact, you can add an extra note about what you need to do for the next conversation, and the date when it\u2019s due. The \u201cContacts\u201d table makes these To-Do items visible, and sortable by due date. This way you can see at a glance what\u2019s coming up next. If you are interested in the details of setting it up, expand the section below. For your first introduction to Grist, you are welcome to skip it. > Setting up To-Do tasks # To set up To-Do items as in the example, select Column Options for the \u201cType\u201d column in the Interactions table, and add another choice (\u201cTo-Do\u201d) to the list of choices: Let\u2019s pick our contact \u201cDouglas LLC\u201d and add a To-Do item: In the \u201cContacts\u201d table, add two new columns: Rename them to \u201cDue\u201d and \u201cTo-Do Items\u201d. Both these columns are calculated using formulas. Grist has great support for formulas, allowing full Python syntax and many Excel functions. In Grist, a formula always applies to the entire column of data. To enter a formula, click on a cell in the \u201cDue\u201d column, and hit \u201c=\u201d key: In this formula, we want to look up all Interactions for the current Contact whose Type is \u201cTo-Do\u201d, then select the one with the earliest Date. Using Python syntax, the formula is: items = Interactions.lookupRecords(Contact=$id, Type=\"To-Do\") return min(items.Date) if items else None Paste it in, or type in. When typing in multi-line formulas, use Shift+Enter to add new lines, and Enter to save. It\u2019s also a good time to change the type of this column to \u201cDate\u201d. Open Column Options, and select \u201cDate\u201d for the type. You can choose the Date Format right below the type. For the \u201cTo-Do Items\u201d, enter a formula similarly. In case of multiple To-Do items, this formula will concatenate them, separated by line breaks. Click into the \u201cTo-Do Items\u201d column, hit \u201c=\u201d to start typing the formula, and enter items = Interactions.lookupRecords(Contact=$id, Type=\"To-Do\") return \"\\n\".join(items.Notes) Now the To-Do item we entered earlier is visible in the main Contacts table. Note that the values in these columns are read-only, since they are calculated. To change the due date, find the To-Do item in the Interactions table where you created it. Sorting tables # We\u2019ll want contacts with To-Do items to show up first, in order of the Due date. Click the triangle in the header of the \u201cDue\u201d column, and select \u201cSort A-Z\u201d. By default, sorting settings are not saved. The highlighted green button in the top right of the \u201cContacts\u201d table reminds us of that. To keep this sort order when you reopen the document, save it by clicking that green button and selecting \u201cSave\u201d. Other features # Grist has more great features, some of which are used in the \u201cLightweight CRM\u201d example document. To read more about those, follow the links to their documentation. Any text column may be shown as a hyperlink. Lightweight CRM example uses it twice: for the \u201cwebsite\u201d field, and for a formula-constructed hyperlink to a Gmail search page for the given contact\u2019s email. The latter is handy if you use Gmail. Grist supports attachments. In the example, there is an \u201cAttachments\u201d field for each contact that may be used to store an image of a business card, for example. In an actual business, you\u2019ll need more. Specialized CRM products have tons of features. Their problem is complexity: trying to satisfy the needs of many different clients makes for a complicated product to use. The beauty of Grist is that you can start simple and add only the level of complexity you need, and nothing more. Other tutorials show how to model more complex data, analyze and chart data, and more. In the database world, this kind of reference or pointer is known as a \u201cforeign key\u201d. \u21a9","title":"Create your own CRM"},{"location":"lightweight-crm/#how-to-create-a-custom-crm","text":"Grist is as easy to use as a spreadsheet, but gives you new powers when data doesn\u2019t fit in a simple grid. A good example is keeping track of contacts and our conversations with them. For a business, this could be customers, sales leads, or job candidates. For an individual, it could be companies they have applied to in a job search. In this tutorial, we\u2019ll explain the \u201cLightweight CRM\u201d example, which you can use as a template for your own contacts, and then show how to build it from scratch. You\u2019ll learn how to: Add tables Link data Set column types Create custom layouts","title":"Intro"},{"location":"lightweight-crm/#exploring-the-example","text":"Open the document \u201cLightweight CRM\u201d, found in Examples & Templates in your Grist home page. You\u2019ll see the \u201cContacts\u201d page, listing contacts on the left of the screen. Click on any contact to select it. The two sections on the right show the details and the history of interactions with the selected contact. How does this compare to a spreadsheet? These screenshots show the Lightweight CRM example on the left, and a regular spreadsheet with the same data on the right. Previous Next Previous Next The difficulty is in the history of notes for a contact. In a two-dimensional grid, you have few options for where to include multiple notes. If you include them as multiple columns, it quickly makes the spreadsheet unwieldy and difficult to navigate. Grist feels more like an application, but it\u2019s still as versatile as a spreadsheet. The \u201cLightweight CRM\u201d example can be used immediately as-is (with the sample data), or as a template (just the structure without the data). Here are a few more points on using it as a CRM: To add a new contact, click the blank row at the bottom of the contacts list, then fill in the blank \u201cCONTACTS Card\u201d section that shows on the right. To add a new conversation, select a contact, then click the blank line at the end of the Interactions table. You can enter today\u2019s date using the shortcut \u2318 + ; (semicolon) (Mac) or Ctrl + ; (semicolon) (Windows). Then select the type of interaction using auto-complete, and type in your notes. You can add To-Do items for a contact: in the Interactions list, select \u201cTo-Do\u201d in the \u201cType\u201d column as a special type of interaction. Think of the associated date as the due date for this task. The Contacts table shows the list of coming up To-Do items, sorted by their due date. If you use Gmail, the handy \u201cGmail search\u201d link in the \u201cCONTACTS Card\u201d section will open a browser window with the Gmail search results for this contact\u2019s email address. You can use this example as a template for your own contacts. With the \u201cLightweight CRM\u201d example open, click the drop-down arrow beside the \u201cSave Copy\u201d button in in the top bar, and select \u201cCopy as Template\u201d. You\u2019ll get an empty document with the same layout, and can start filling it in with your own data. If you aren\u2019t signed in, you will need to sign in to make a copy of the example.","title":"Exploring the example"},{"location":"lightweight-crm/#creating-your-own","text":"The rest of this tutorial will show you how to create such a document on your own. It\u2019s a great exercise that will teach you some of the key features of Grist. To start, we\u2019ll import a file with sample contacts from the Grist home page. First, save this file to your desktop: lightweight-crm-contacts.csv . Then click the \u201cAdd New\u201d button on the top left of your Grist home page, click \u201cImport document\u201d, and select the file on your desktop. You\u2019ll see a table of contacts with sample data. Note that in Grist columns have names. Rename this table to \u201cContacts\u201d by clicking its name in the top bar, and typing the new name. That\u2019s all you need for a simple table of contacts. You can add rows here, or add new columns to associate more data with each contact.","title":"Creating your own"},{"location":"lightweight-crm/#adding-another-table","text":"For our next step, we want to be able to select a contact, and see the list of conversations with that contact. These conversations should be a new table of data. The cue is that it has a different number of rows from the table of contacts. Create the new table using the green \u201cAdd New\u201d button on the top left of your screen, and click \u201cAdd Empty Table\u201d in the menu. This table will represent interactions with our contacts, so let\u2019s rename it \u201cInteractions\u201d by clicking its default name (\u201cTable1\u201d) on top of the screen, as before. It\u2019s a good idea to give meaningful names to columns. In this case, for each interaction, we need to know which Contact it refers to, the date, type, and conversation notes. To rename a column, click its header to select the column, and click the header again to edit its name. You can hit the Tab key to continue to renaming the next column. Finally, hit the \u201c+\u201d button to the right of the last column to create one more column, and name it \u201cNotes\u201d.","title":"Adding another table"},{"location":"lightweight-crm/#linking-data-records","text":"Every record in this table will belong to a particular contact. You set it up by turning the \u201cContact\u201d column into a reference to the table \u201cContacts\u201d. Using the triangle in the header of the column \u201cContact\u201d, open the menu and select \u201cColumn Options\u201d. In the right panel, use the \u201cColumn Type\u201d dropdown to select \u201cReference\u201d, then under \u201cData from table\u201d, select \u201cContacts\u201d. Each cell in this column will hold a pointer to a row in the \u201cContacts\u201d table 1 . While it refers to an entire row, it\u2019s useful to see some particular identifier of that row, so under \u201cShow column\u201d, select \u201cCompany\u201d. You\u2019ll see this in action shortly.","title":"Linking data records"},{"location":"lightweight-crm/#setting-other-types","text":"In Grist, every columns has a types. Often the default of Text or Numeric is correct. For our \u201cDate\u201d column, a better type is Date. Click any cell in the \u201cDate\u201d column, and in the right panel, click into the \u201cColumn Type\u201d dropdown and select \u201cDate\u201d. If you\u2019d like, you can also choose a different date format right below the type. Now, if you click on a cell in the \u201cDate\u201d column and hit Enter, you have a convenient date picker. Another useful column type for us is \u201cChoice\u201d. Our interactions will be either \u201cPhone\u201d, \u201cEmail\u201d, or \u201cIn-person\u201d, and it\u2019s useful to list these options. Click into the \u201cType\u201d column, and in the right panel, set \u201cColumn Type\u201d to \u201cChoice\u201d. You\u2019ll see \u201cChoice Values\u201d textbox below. Click it, and enter your choices there, one per line: \u201cPhone\u201d, \u201cEmail\u201d, \u201cIn-person\u201d. Now, if you click on a cell in the \u201cType\u201d column and hit Enter, you can now choose from among the choices you set, or start typing and use auto-complete.","title":"Setting other types"},{"location":"lightweight-crm/#linking-tables-visually","text":"The next step is to link the two tables visually. Open the \u201cContacts\u201d page, click \u201cAdd Widget to Page\u201d, select widget \u201cTable\u201d and data \u201cInteractions\u201d. In the \u201cSelect By\u201d dropdown at the bottom of the dialog, select \u201cCONTACTS\u201d. This means that choosing a contact will display only the interactions with that contact. Click \u201cAdd to Page\u201d to finish. Next, let\u2019s select a contact (let\u2019s use \u201cDouglas LLC\u201d in the fourth row) and add some notes. Type in a date (hint: the shortcut \u2318 + ; (semicolon) on Mac or Ctrl + ; (semicolon) on Windows inserts today\u2019s date), select a type, and enter a note. As soon as that row is created, the \u201cContact\u201d column is automatically filled with \u201cDouglas LLC\u201d, thanks to the sections being linked. The note we added is shown only when \u201cDouglas LLC\u201d is selected. We can add more notes for \u201cDouglas LLC\u201d, or add notes for any of the other contacts. We can now hide the \u201cContact\u201d column in the \u201cInteractions\u201d table: using the menu in the column\u2019s header, select \u201cHide Column\u201d. Because the tables are linked, we already see who the notes are for. For longer notes to be convenient, resize the \u201cNotes\u201d column by dragging the right edge of its header. To wrap long notes, open the Column Options, and click the line-wrapping icon.","title":"Linking tables visually"},{"location":"lightweight-crm/#customizing-layout","text":"Once you have multiple tables on one screen, the layout of the screen may become an issue. Having many columns in the Contacts table may no longer be convenient. It\u2019s better to lay it out like a custom application: select a contact from a list on the left and see that contact\u2019s details and interactions. This can be done by using \u201cAdd Widget to Page\u201d again. This time, we\u2019ll select the widget \u201cCard\u201d for the table \u201cContacts\u201d, and for \u201cSelect By\u201d will again use \u201cCONTACTS\u201d. You can move the resulting sections around to create a convenient layout. Move your mouse to the top left of each section until you see a \u201cdrag handle\u201d icon. Use that icon to drag each section into the desired spot relative to other sections. You can also resize sections by moving the mouse between them to find a dotted line. Drag this line to resize. Note how the same personal data is now shown in two places on the screen. These are not copies of data, but different presentations of the same data. Changing the data in one place will change it in the other.","title":"Customizing layout"},{"location":"lightweight-crm/#customizing-fields","text":"At this point, we may do some cleanup: hide unneeded columns in the main \u201cContacts\u201d table and rearrange fields in the Card widget. A quick way to hide columns is using the right panel. Using the three-dot menu on the top right of the \u201cContacts\u201d table, select \u201cWidget options\u201d. In the panel that opens, find a list of \u201cVisible columns\u201d. Move the mouse over each column to reveal the \u201ceye\u201d icon. Click it to hide all columns except \u201cCompany\u201d. To customize the Card widget, click it. The right panel will show the relevant options. You can select a different Theme, e.g. \u201cCompact\u201d. The rearrange fields, click \u201cEdit Layout\u201d in the right panel. You can now drag-and-drop fields in the card, resize them, or remove them. Click \u201cSave\u201d once you are done. In a few short steps, we have gone from a clunky, unwieldy spreadsheet to a concise, elegant record of your interactions in a simple, effective custom application.","title":"Customizing fields"},{"location":"lightweight-crm/#to-do-tasks-for-contacts","text":"The \u201cLightweight CRM\u201d example has another trick up its sleeve. The \u201cType\u201d column in the interactions table has an extra choice, \u201cTo-Do\u201d. After you talk to a contact, you can add an extra note about what you need to do for the next conversation, and the date when it\u2019s due. The \u201cContacts\u201d table makes these To-Do items visible, and sortable by due date. This way you can see at a glance what\u2019s coming up next. If you are interested in the details of setting it up, expand the section below. For your first introduction to Grist, you are welcome to skip it.","title":"To-Do Tasks for Contacts"},{"location":"lightweight-crm/#other-features","text":"Grist has more great features, some of which are used in the \u201cLightweight CRM\u201d example document. To read more about those, follow the links to their documentation. Any text column may be shown as a hyperlink. Lightweight CRM example uses it twice: for the \u201cwebsite\u201d field, and for a formula-constructed hyperlink to a Gmail search page for the given contact\u2019s email. The latter is handy if you use Gmail. Grist supports attachments. In the example, there is an \u201cAttachments\u201d field for each contact that may be used to store an image of a business card, for example. In an actual business, you\u2019ll need more. Specialized CRM products have tons of features. Their problem is complexity: trying to satisfy the needs of many different clients makes for a complicated product to use. The beauty of Grist is that you can start simple and add only the level of complexity you need, and nothing more. Other tutorials show how to model more complex data, analyze and chart data, and more. In the database world, this kind of reference or pointer is known as a \u201cforeign key\u201d. \u21a9","title":"Other features"},{"location":"limits/","text":"Limits # To help you assess whether Grist will work for a use-case you have in mind, here is a list of limitations that apply to its operation. Number of documents # The number of documents is limited to 10 in free plans. Paid plans allow up to 1000 documents per user, which may be increased via a support request. Number of collaborators # In free plans, each document may be shared with 2 other users, not counting the creator. The set of collaborators can be different for each document. In paid plans, documents can be shared with 2 other users without extra cost just as in the free plans. Paid plans also allow you to add users to a \u201cteam\u201d with paid seats, granting rights to users systematically on sets of documents. Number of tables per document # There is a limit of 500 on the number of tables allowed per document. This is a soft limit. If you find yourself with a large number of tables, consider merging ones that have the same structure. For example, if you have a table for each product type, consider using a single table with the product type as an extra column. Document availability # From time to time, during upgrades and operational transitions, individual Grist documents may become inaccessible for a period of some seconds. Please bear this in mind when using Grist\u2019s API. Separately, if 10 authorized API requests are currently being processed for a particular document, any other API requests will be rejected (with HTTP status code 429) until at least one of the original requests completes. A client that waits for one request to complete before sending the next would not hit this limit (assuming it is the sole client accessing the document).","title":"Limits"},{"location":"limits/#limits","text":"To help you assess whether Grist will work for a use-case you have in mind, here is a list of limitations that apply to its operation.","title":"Limits"},{"location":"limits/#number-of-documents","text":"The number of documents is limited to 10 in free plans. Paid plans allow up to 1000 documents per user, which may be increased via a support request.","title":"Number of documents"},{"location":"limits/#number-of-collaborators","text":"In free plans, each document may be shared with 2 other users, not counting the creator. The set of collaborators can be different for each document. In paid plans, documents can be shared with 2 other users without extra cost just as in the free plans. Paid plans also allow you to add users to a \u201cteam\u201d with paid seats, granting rights to users systematically on sets of documents.","title":"Number of collaborators"},{"location":"limits/#number-of-tables-per-document","text":"There is a limit of 500 on the number of tables allowed per document. This is a soft limit. If you find yourself with a large number of tables, consider merging ones that have the same structure. For example, if you have a table for each product type, consider using a single table with the product type as an extra column.","title":"Number of tables per document"},{"location":"limits/#document-availability","text":"From time to time, during upgrades and operational transitions, individual Grist documents may become inaccessible for a period of some seconds. Please bear this in mind when using Grist\u2019s API. Separately, if 10 authorized API requests are currently being processed for a particular document, any other API requests will be rejected (with HTTP status code 429) until at least one of the original requests completes. A client that waits for one request to complete before sending the next would not hit this limit (assuming it is the sole client accessing the document).","title":"Document availability"},{"location":"linking-widgets/","text":"Linking Page Widgets # One big reason for placing more than one widget on a page is that widgets can be linked. When linked, selecting a record in one widget will cause another widget to update and show only the data related to the selected record. For example, let\u2019s say you have a table of Departments in a company, and a table of Employees , with each employee tied to some department. You can have one Table widget listing departments and serving as a selector for a second Table widget listing employees: Previous Next To create this, first create a page with a Table widget for Departments data, as described in Page widgets . Then in the \u201cAdd New\u201d menu, select the \u201cAdd Widget to Page\u201d option to add another Table widget for Employees data. In the widget picker, use the \u201cSelect By\u201d dropdown and choose the \u201cDEPARTMENTS\u201d widget added in the first step. That\u2019s all it takes: now selecting a department in the first table will cause the second table to show only the employees in that department. Note that this relies on the Emploeees table having a column of type Reference with the target table of Departments . See Reference columns . Types of linking # Linking widgets only works when there is some relationships between records in the underlying data. There are several kinds of relationships supported. Same-record linking # Most directly you can link two widgets which show data from the same underlying table, usually linking a Table to a Card. This allows you to select a record in the Table widget and see more details of that record in the linked Card widget. For example, you can add a Card of Employees data and link it to an existing Table widget \u201cEMPLOYEES\u201d: When you select a record in the table, the new \u201cEMPLOYEES Card\u201d widget shows a card for the selected record. For another example of such linking, see the \u201cLightweight CRM\u201d document in \u201cExamples & Templates\u201d and the Customizing Layout section in the associated tutorial. Filter linking # As in the Employee-Department example, when one table has a reference to another (i.e. a column of type \u201cReference\u201d), the second table can serve as a selector for the first. Essentially, selecting a record can automatically filter another widget to show only those records that refer to the selected record. In the example shown earlier, the Employees table has a \u201cReference\u201d column pointing to the Departments table, so a list of departments can serve as a selector for employees. When a department is selected, only the employees in that department will be shown. The \u201cLightweight CRM\u201d document in \u201cExamples & Templates\u201d provides another example, where selecting a contact shows only the conversations with that contact. It\u2019s also described in the tutorial . When the target of linking is a Chart widget, you get dynamic charts that reflect data associated with the selected record. For example, you could link a pie chart to a department to show the sum of salaries for each job position in the selected department. Previous Next Indirect linking # Whenever a table A has a reference to B , A can be used in place of B as the source of linking. Instead of considering the currently selected record in A , linking will consider the referenced record in B as the selection. For instance, a Table widget showing Employees can serve as a selector for a Card widget showing data from Departments , using the fact that an employee record contains a \u201cDepartment\u201d reference. In the widget picker, if you select data from Departments , you\u2019ll see a \u201cSelect By\u201d option \u201cEMPLOYEES \u2022 Department\u201d: When you select an employee, you\u2019ll see the details of that employee\u2019s department. Multiple reference columns # When a table that\u2019s the target of linking has multiple reference columns, you may need to choose which one to use for linking. For instance, a Flight record might have fields \u2018DepartureAirport\u2019 and \u2018ArrivalAirport\u2019, each of which is a Reference to the table Airports . When you select an airport in a table, you can have a choice whether to show all flights departing from this airport or all flights arriving to it. The \u201cSelect By\u201d widget will show both options to choose from: Linking summary tables # When widgets display summarized data, as described in Summary tables , they can also be linked, both to the underlying data and to other summary tables. For example, you can summarize the table Employees by job position, and include the count of employees for each position, the average salary, or other summary data. You can also link the Employees table to it, so that selecting a position shows all employees in that position. Furthermore, you can link another summary table. For instance, you can summarize employees by position and gender, and link that to the summary by position. When selecting a job position, you can then see a summary by gender for that position. This is also convenient with charts. In this example, you see a pie chart with the average salary for men vs women for the selected job position. As you click different positions, the pie chart updates to reflect the selected one. More examples of such linking can be found in the Analyze and visualize tutorial. Changing link settings # After a widget is added, you can view and change its link settings from the right panel. One way to get to it is to click on the three-dots icon on the top right of the widget, and click on the \u201cData selection\u201d menu option: This opens the side panel, which shows what data is shown, and which widget, if any, serves as its selector. You can change the \u201cSelect By\u201d setting here, or click the green \u201cEdit Data Selection\u201d button, and change it in the widget picker dialog.","title":"Linking widgets"},{"location":"linking-widgets/#linking-page-widgets","text":"One big reason for placing more than one widget on a page is that widgets can be linked. When linked, selecting a record in one widget will cause another widget to update and show only the data related to the selected record. For example, let\u2019s say you have a table of Departments in a company, and a table of Employees , with each employee tied to some department. You can have one Table widget listing departments and serving as a selector for a second Table widget listing employees: Previous Next To create this, first create a page with a Table widget for Departments data, as described in Page widgets . Then in the \u201cAdd New\u201d menu, select the \u201cAdd Widget to Page\u201d option to add another Table widget for Employees data. In the widget picker, use the \u201cSelect By\u201d dropdown and choose the \u201cDEPARTMENTS\u201d widget added in the first step. That\u2019s all it takes: now selecting a department in the first table will cause the second table to show only the employees in that department. Note that this relies on the Emploeees table having a column of type Reference with the target table of Departments . See Reference columns .","title":"Linking Page Widgets"},{"location":"linking-widgets/#same-record-linking","text":"Most directly you can link two widgets which show data from the same underlying table, usually linking a Table to a Card. This allows you to select a record in the Table widget and see more details of that record in the linked Card widget. For example, you can add a Card of Employees data and link it to an existing Table widget \u201cEMPLOYEES\u201d: When you select a record in the table, the new \u201cEMPLOYEES Card\u201d widget shows a card for the selected record. For another example of such linking, see the \u201cLightweight CRM\u201d document in \u201cExamples & Templates\u201d and the Customizing Layout section in the associated tutorial.","title":"Same-record linking"},{"location":"linking-widgets/#filter-linking","text":"As in the Employee-Department example, when one table has a reference to another (i.e. a column of type \u201cReference\u201d), the second table can serve as a selector for the first. Essentially, selecting a record can automatically filter another widget to show only those records that refer to the selected record. In the example shown earlier, the Employees table has a \u201cReference\u201d column pointing to the Departments table, so a list of departments can serve as a selector for employees. When a department is selected, only the employees in that department will be shown. The \u201cLightweight CRM\u201d document in \u201cExamples & Templates\u201d provides another example, where selecting a contact shows only the conversations with that contact. It\u2019s also described in the tutorial . When the target of linking is a Chart widget, you get dynamic charts that reflect data associated with the selected record. For example, you could link a pie chart to a department to show the sum of salaries for each job position in the selected department. Previous Next","title":"Filter linking"},{"location":"linking-widgets/#indirect-linking","text":"Whenever a table A has a reference to B , A can be used in place of B as the source of linking. Instead of considering the currently selected record in A , linking will consider the referenced record in B as the selection. For instance, a Table widget showing Employees can serve as a selector for a Card widget showing data from Departments , using the fact that an employee record contains a \u201cDepartment\u201d reference. In the widget picker, if you select data from Departments , you\u2019ll see a \u201cSelect By\u201d option \u201cEMPLOYEES \u2022 Department\u201d: When you select an employee, you\u2019ll see the details of that employee\u2019s department.","title":"Indirect linking"},{"location":"linking-widgets/#multiple-reference-columns","text":"When a table that\u2019s the target of linking has multiple reference columns, you may need to choose which one to use for linking. For instance, a Flight record might have fields \u2018DepartureAirport\u2019 and \u2018ArrivalAirport\u2019, each of which is a Reference to the table Airports . When you select an airport in a table, you can have a choice whether to show all flights departing from this airport or all flights arriving to it. The \u201cSelect By\u201d widget will show both options to choose from:","title":"Multiple reference columns"},{"location":"linking-widgets/#linking-summary-tables","text":"When widgets display summarized data, as described in Summary tables , they can also be linked, both to the underlying data and to other summary tables. For example, you can summarize the table Employees by job position, and include the count of employees for each position, the average salary, or other summary data. You can also link the Employees table to it, so that selecting a position shows all employees in that position. Furthermore, you can link another summary table. For instance, you can summarize employees by position and gender, and link that to the summary by position. When selecting a job position, you can then see a summary by gender for that position. This is also convenient with charts. In this example, you see a pie chart with the average salary for men vs women for the selected job position. As you click different positions, the pie chart updates to reflect the selected one. More examples of such linking can be found in the Analyze and visualize tutorial.","title":"Linking summary tables"},{"location":"linking-widgets/#changing-link-settings","text":"After a widget is added, you can view and change its link settings from the right panel. One way to get to it is to click on the three-dots icon on the top right of the widget, and click on the \u201cData selection\u201d menu option: This opens the side panel, which shows what data is shown, and which widget, if any, serves as its selector. You can change the \u201cSelect By\u201d setting here, or click the green \u201cEdit Data Selection\u201d button, and change it in the widget picker dialog.","title":"Changing link settings"},{"location":"on-demand-tables/","text":"On-Demand Tables # On-demand tables are an experimental feature The design of on-demand tables may change. For example, configuration options may be added, or aspects of the behavior of on-demand tables may be changed entirely. A defining feature of spreadsheets is the ability to update cells instantly as data they depend on changes. But sometimes a table is just a store of data, without any fancy calculations needed. In that case, you can choose to mark the table as \u201cOn-Demand\u201d in Grist. Grist can then serve data from that table faster, and make certain optimizations that may be helpful as the table gets large and regular tables become slow. When a table is marked \u201cOn-Demand\u201d: Data in the table will not generally be available for use in formulas. The table remains available for viewing and editing, but with caveats. Here\u2019s what you need to know about viewing data: Viewing is limited to 10000 rows at a time. Subsets of the table\u2019s rows can be selected by linking widgets , as for regular tables. You can expect good performance of linked widgets when the subset of the table\u2019s rows is less than 10000 rows, even if the full table is much larger. Here\u2019s what you need to know about editing data: You can edit data as normal in an On-Demand table. Automatic updates of anything that depends on that data simply won\u2019t happen. After edits, you need to reload the webpage to see everything updated. Here are some reasons you might make a table On-Demand: You want to make summaries and charts of slices of a large dataset using linked widgets . You are storing a lot of data in the table, and all you need to do with it is read parts of it back out via the API. Make an On-Demand Table # To convert a table to be an \u201cOn Demand\u201d table, open the right panel, pick the \u201cTable\u201d panel, and the \u201cData\u201d section. Click on \u201cAdvanced Settings\u201d and you should see a \u201cMake On-Demand\u201d button. If you change your mind, and don\u2019t want the table to be \u201cOn-Demand\u201d anymore, you can find a button to undo this setting in the same place: Changing a table to become \u201cOn-Demand\u201d or to stop being \u201cOn-Demand\u201d will force the document to reload for all users viewing it at that moment. Formulas, References and On-Demand Tables # In general, formulas and on-demand tables don\u2019t go together. That said, if you\u2019re careful you can use the following very simple formulas: $column - where the column mentioned is not itself a formula. This copies data from another column verbatim. $reference.column - where reference is a reference column , and column is not itself a formula. This formula support is enough to unlock Grist\u2019s linking widgets feature, which is why it is present. In general, if you try using formulas and On-Demand tables, you are setting yourself up for sadness. Remember, like any edit of an On-Demand table, when you add or change a formula column you\u2019ll generally need to reload to see cell values updated. Some type conversions, such as converting a column to be a reference, are not effective for On-Demand tables. So it is important to perform such conversions before making a table On-Demand. From formulas in regular tables, you cannot access the content of on-demand tables.","title":"On-Demand tables"},{"location":"on-demand-tables/#on-demand-tables","text":"On-demand tables are an experimental feature The design of on-demand tables may change. For example, configuration options may be added, or aspects of the behavior of on-demand tables may be changed entirely. A defining feature of spreadsheets is the ability to update cells instantly as data they depend on changes. But sometimes a table is just a store of data, without any fancy calculations needed. In that case, you can choose to mark the table as \u201cOn-Demand\u201d in Grist. Grist can then serve data from that table faster, and make certain optimizations that may be helpful as the table gets large and regular tables become slow. When a table is marked \u201cOn-Demand\u201d: Data in the table will not generally be available for use in formulas. The table remains available for viewing and editing, but with caveats. Here\u2019s what you need to know about viewing data: Viewing is limited to 10000 rows at a time. Subsets of the table\u2019s rows can be selected by linking widgets , as for regular tables. You can expect good performance of linked widgets when the subset of the table\u2019s rows is less than 10000 rows, even if the full table is much larger. Here\u2019s what you need to know about editing data: You can edit data as normal in an On-Demand table. Automatic updates of anything that depends on that data simply won\u2019t happen. After edits, you need to reload the webpage to see everything updated. Here are some reasons you might make a table On-Demand: You want to make summaries and charts of slices of a large dataset using linked widgets . You are storing a lot of data in the table, and all you need to do with it is read parts of it back out via the API.","title":"On-Demand Tables"},{"location":"on-demand-tables/#make-an-on-demand-table","text":"To convert a table to be an \u201cOn Demand\u201d table, open the right panel, pick the \u201cTable\u201d panel, and the \u201cData\u201d section. Click on \u201cAdvanced Settings\u201d and you should see a \u201cMake On-Demand\u201d button. If you change your mind, and don\u2019t want the table to be \u201cOn-Demand\u201d anymore, you can find a button to undo this setting in the same place: Changing a table to become \u201cOn-Demand\u201d or to stop being \u201cOn-Demand\u201d will force the document to reload for all users viewing it at that moment.","title":"Make an On-Demand Table"},{"location":"on-demand-tables/#formulas-references-and-on-demand-tables","text":"In general, formulas and on-demand tables don\u2019t go together. That said, if you\u2019re careful you can use the following very simple formulas: $column - where the column mentioned is not itself a formula. This copies data from another column verbatim. $reference.column - where reference is a reference column , and column is not itself a formula. This formula support is enough to unlock Grist\u2019s linking widgets feature, which is why it is present. In general, if you try using formulas and On-Demand tables, you are setting yourself up for sadness. Remember, like any edit of an On-Demand table, when you add or change a formula column you\u2019ll generally need to reload to see cell values updated. Some type conversions, such as converting a column to be a reference, are not effective for On-Demand tables. So it is important to perform such conversions before making a table On-Demand. From formulas in regular tables, you cannot access the content of on-demand tables.","title":"Formulas, References and On-Demand Tables"},{"location":"page-widgets/","text":"Pages & widgets # Unlike traditional spreadsheets, in Grist you can create multiple views of the same data, and display multiple data sets on one page. This allows you to create useful dashboards and custom applications tailored to your needs. Pages # In Grist, you organize your document into \u201cpages\u201d. These are listed in the left panel, with collapsible groups. You may rearrange and group pages in the left panel by dragging them to suit your needs. You can rename pages using the three-dots menu next to the page name in the list, or by clicking the page name on top of the screen. Using the opener icon ( ) near the top of the left panel, you can collapse the panel to show only the initials of each page, leaving more screen space to view your data. To add a new page, use the \u201cAdd New\u201d button, and click \u201cAdd Page\u201d. At that point, you\u2019ll get to choose the page widget to include in the new page. Page widgets # A page contains sections, such as tables or charts, which we call \u201cpage widgets\u201d. Each page widget shows data from one table. A page may contain more than one page widget, and you can arrange and link them to create useful layouts. Here are the supported kinds of page widgets. The salient features of each one are described on separate pages. Table : similar to the spreadsheet grid and a good way to see many records at once. Card : shows a single record in a form-like layout which you can customize. Card List : uses the same layout options as a card, displays a scrollable list of records. Chart : plots data on a chart with support for several different chart types. Custom : inserts a custom webpage, optionally granting it access to the document\u2019s data. Widget picker # The menu opened by the \u201cAdd New\u201d button has options \u201cAdd Page\u201d and \u201cAdd Widget to Page\u201d. In either case, you\u2019ll see the \u201cpage widget picker\u201d where you can choose your desired widget: You can select the type of widget and the table of data to show (or \u201cNew Table\u201d to create a new table). The \u201csummary\u201d icon ( ) allows you to summarize data . When adding a widget to an existing page, you\u2019ll also see a \u201cSelect By\u201d option, which allows linking this widget to another one already on the page. This process is described in greater detail in Linking widgets . Once you\u2019ve added widgets, they can be moved around and resized, as described in Custom Layouts . Changing widget or its data # If you\u2019d like to change a widget or the data it displays after it\u2019s added, you may do so. Click the three-dots button on the top left of your widget, and select \u201cWidget options\u201d. This opens the right-side panel. Click on \u201cChange Widget\u201d. You can then use the widget picker to change the widget or the data it displays. Configuring field lists # Although different kinds of page widgets look very different, they all represent a list of records. Any of the widget types can be used to show the same underlying data. In a Table , each record is represented by a row, and columns represent the same kind of value for each record. A table is also a helpful representation of the underlying data to keep in mind when configuring other widget types. In a Card List , each row of the underlying data is shown as a card. Each column in the data corresponds to a field in this card. When talking about a Card widget, we\u2019ll use the term \u201cfield\u201d , which conceptually is the same as a \u201ccolumn\u201d in a Table widget. A Card is just like a Card List, but shows only one row of data at a time. In a Chart , each row of the underlying data table becomes a graphical element, such as a point on a line chart, a bar in a bar chart, or a slice of a pie chart. In this context, the columns of our data table are better known as data \u201cseries\u201d . Click on the opener icon ( ) to open the right panel. Depending on the currently-selected widget, you might see a tab for configuring a Column, Field, or Series. These are not different in substance, but different terms make more sense for different widgets. Clicking on the widget tab (highlighted in green in the images above), you\u2019ll see subtabs for \u201cWidget\u201d, \u201cSort & Filter\u201d, and \u201cData\u201d. We\u2019ll focus on the first one: \u201cWidget\u201d. You\u2019ll see options specific to the type of the selected widget, and below that two lists: \u201cVisible Columns\u201d and \u201cHidden Columns\u201d. The \u201cHidden Columns\u201d are the columns available in the data, but not shown in this widget. In a Card, these lists would show up as \u201cVisible Fields\u201d / \u201cHidden Fields\u201d. In a chart, they show up as \u201cVisible Series\u201d / \u201cHidden Series\u201d. These lists allow you to include, exclude, or rearrange fields in a widget. As you move your mouse over the items in the list, use the \u201ceye\u201d icons that pop up to show or hide them. Alternatively, you can select several items using the checkboxes, and hide or show them together. This ordered list of fields can be used to customize any of the page widget types. It has a particular importance in the Chart widget , where different chart types and options require you to place series in a certain order in the \u201cVisible Series\u201d list to ensure your data is plotted correctly.","title":"Pages & widgets"},{"location":"page-widgets/#pages","text":"In Grist, you organize your document into \u201cpages\u201d. These are listed in the left panel, with collapsible groups. You may rearrange and group pages in the left panel by dragging them to suit your needs. You can rename pages using the three-dots menu next to the page name in the list, or by clicking the page name on top of the screen. Using the opener icon ( ) near the top of the left panel, you can collapse the panel to show only the initials of each page, leaving more screen space to view your data. To add a new page, use the \u201cAdd New\u201d button, and click \u201cAdd Page\u201d. At that point, you\u2019ll get to choose the page widget to include in the new page.","title":"Pages"},{"location":"page-widgets/#page-widgets","text":"A page contains sections, such as tables or charts, which we call \u201cpage widgets\u201d. Each page widget shows data from one table. A page may contain more than one page widget, and you can arrange and link them to create useful layouts. Here are the supported kinds of page widgets. The salient features of each one are described on separate pages. Table : similar to the spreadsheet grid and a good way to see many records at once. Card : shows a single record in a form-like layout which you can customize. Card List : uses the same layout options as a card, displays a scrollable list of records. Chart : plots data on a chart with support for several different chart types. Custom : inserts a custom webpage, optionally granting it access to the document\u2019s data.","title":"Page widgets"},{"location":"page-widgets/#widget-picker","text":"The menu opened by the \u201cAdd New\u201d button has options \u201cAdd Page\u201d and \u201cAdd Widget to Page\u201d. In either case, you\u2019ll see the \u201cpage widget picker\u201d where you can choose your desired widget: You can select the type of widget and the table of data to show (or \u201cNew Table\u201d to create a new table). The \u201csummary\u201d icon ( ) allows you to summarize data . When adding a widget to an existing page, you\u2019ll also see a \u201cSelect By\u201d option, which allows linking this widget to another one already on the page. This process is described in greater detail in Linking widgets . Once you\u2019ve added widgets, they can be moved around and resized, as described in Custom Layouts .","title":"Widget picker"},{"location":"page-widgets/#changing-widget-or-its-data","text":"If you\u2019d like to change a widget or the data it displays after it\u2019s added, you may do so. Click the three-dots button on the top left of your widget, and select \u201cWidget options\u201d. This opens the right-side panel. Click on \u201cChange Widget\u201d. You can then use the widget picker to change the widget or the data it displays.","title":"Changing widget or its data"},{"location":"page-widgets/#configuring-field-lists","text":"Although different kinds of page widgets look very different, they all represent a list of records. Any of the widget types can be used to show the same underlying data. In a Table , each record is represented by a row, and columns represent the same kind of value for each record. A table is also a helpful representation of the underlying data to keep in mind when configuring other widget types. In a Card List , each row of the underlying data is shown as a card. Each column in the data corresponds to a field in this card. When talking about a Card widget, we\u2019ll use the term \u201cfield\u201d , which conceptually is the same as a \u201ccolumn\u201d in a Table widget. A Card is just like a Card List, but shows only one row of data at a time. In a Chart , each row of the underlying data table becomes a graphical element, such as a point on a line chart, a bar in a bar chart, or a slice of a pie chart. In this context, the columns of our data table are better known as data \u201cseries\u201d . Click on the opener icon ( ) to open the right panel. Depending on the currently-selected widget, you might see a tab for configuring a Column, Field, or Series. These are not different in substance, but different terms make more sense for different widgets. Clicking on the widget tab (highlighted in green in the images above), you\u2019ll see subtabs for \u201cWidget\u201d, \u201cSort & Filter\u201d, and \u201cData\u201d. We\u2019ll focus on the first one: \u201cWidget\u201d. You\u2019ll see options specific to the type of the selected widget, and below that two lists: \u201cVisible Columns\u201d and \u201cHidden Columns\u201d. The \u201cHidden Columns\u201d are the columns available in the data, but not shown in this widget. In a Card, these lists would show up as \u201cVisible Fields\u201d / \u201cHidden Fields\u201d. In a chart, they show up as \u201cVisible Series\u201d / \u201cHidden Series\u201d. These lists allow you to include, exclude, or rearrange fields in a widget. As you move your mouse over the items in the list, use the \u201ceye\u201d icons that pop up to show or hide them. Alternatively, you can select several items using the checkboxes, and hide or show them together. This ordered list of fields can be used to customize any of the page widget types. It has a particular importance in the Chart widget , where different chart types and options require you to place series in a certain order in the \u201cVisible Series\u201d list to ensure your data is plotted correctly.","title":"Configuring field lists"},{"location":"rest-api/","text":"Grist API # Grist has an API for manipulating documents, workspaces, and team sites. To access this API, you\u2019ll need an API key. An API key is owned by a single user, and has the same permissions as that user. To enable API access for yourself, click on the circle with your profile picture or initial on the top right of the screen. Then select the \u201cProfile Settings\u201d option. This shows a dialog with an \u201cAPI key\u201d section. Click on the \u201cCreate\u201d button to create an api key. You can now copy this key for use when making API calls. To be clear, copy the key you get when clicking \u201cCreate\u201d, not the key in the above screenshot, which isn\u2019t a real one. You can revoke your API key by clicking \u201cRemove\u201d from Profile Settings at any time. You\u2019ll then have the option to create a new one if you wish. To test your api key, try this from the command-line (substituting your api key): curl -H \"Authorization: Bearer API-KEY-GOES-HERE\" https://docs.getgrist.com/api/orgs You should get a list of organizations (this is what the API calls team and personal sites). Then you could, for example, change the name of your organization / site: curl -H \"Authorization: Bearer API-KEY-GOES-HERE\" \\ -H \"Content-Type: application/json\" \\ https://docs.getgrist.com/api/orgs/ORG-ID-GOES-HERE -X PATCH -d '{\"name\": \"Omega Devices\"}' For details of the endpoints available, see our API docs . There are also client libraries available: JavaScript/TypeScript client library Python client library","title":"API usage"},{"location":"rest-api/#grist-api","text":"Grist has an API for manipulating documents, workspaces, and team sites. To access this API, you\u2019ll need an API key. An API key is owned by a single user, and has the same permissions as that user. To enable API access for yourself, click on the circle with your profile picture or initial on the top right of the screen. Then select the \u201cProfile Settings\u201d option. This shows a dialog with an \u201cAPI key\u201d section. Click on the \u201cCreate\u201d button to create an api key. You can now copy this key for use when making API calls. To be clear, copy the key you get when clicking \u201cCreate\u201d, not the key in the above screenshot, which isn\u2019t a real one. You can revoke your API key by clicking \u201cRemove\u201d from Profile Settings at any time. You\u2019ll then have the option to create a new one if you wish. To test your api key, try this from the command-line (substituting your api key): curl -H \"Authorization: Bearer API-KEY-GOES-HERE\" https://docs.getgrist.com/api/orgs You should get a list of organizations (this is what the API calls team and personal sites). Then you could, for example, change the name of your organization / site: curl -H \"Authorization: Bearer API-KEY-GOES-HERE\" \\ -H \"Content-Type: application/json\" \\ https://docs.getgrist.com/api/orgs/ORG-ID-GOES-HERE -X PATCH -d '{\"name\": \"Omega Devices\"}' For details of the endpoints available, see our API docs . There are also client libraries available: JavaScript/TypeScript client library Python client library","title":"Grist API"},{"location":"sharing/","text":"Sharing # To collaborate in Grist, you can invite other users to access a document. For team plans, you can also add users to your team site, or to a workspace (see Team Sharing ). When the document is open, click on the sharing icon ( ) on the top right of the screen. It opens a menu with sharing and export options. Select \u201cManage Users\u201d. This option is also available in the Grist home page, when you click the three-dots icon to the right of a document\u2019s name. If the \u201cManage Users\u201d item is grayed out, it means you don\u2019t have permission to view or manage the sharing settings for this document. The sharing dialog that opens lists the users that have access to the document. To add a user, enter that user\u2019s email address and hit \u201cEnter\u201d or click \u201cInvite new member\u201d in the dropdown. You may select a role for any invited user, and click \u201cConfirm\u201d to save the changes and send any invitations. Roles # There are three primary roles supported by Grist: Viewer : allows a user to view the document but not make any changes to it. Some operations like sorting and filtering will work without affecting other users of the document. This is the default role when you type in an email address. Editor : allows a user to view or make changes to the document data, structure, or formulas, but not to its sharing settings. Owner : gives a user complete permissions to the document, including to view and change its sharing settings. A document may have one or more owners. If you are able to open the \u201cManage Users\u201d dialog, you have the \u201cowner\u201d role. You may not change your own access, but your access may be reduced or removed by another owner. The option to inherit access does not affect individual plans, and is explained in the Team Sharing article.","title":"Sharing a document"},{"location":"sharing/#sharing","text":"To collaborate in Grist, you can invite other users to access a document. For team plans, you can also add users to your team site, or to a workspace (see Team Sharing ). When the document is open, click on the sharing icon ( ) on the top right of the screen. It opens a menu with sharing and export options. Select \u201cManage Users\u201d. This option is also available in the Grist home page, when you click the three-dots icon to the right of a document\u2019s name. If the \u201cManage Users\u201d item is grayed out, it means you don\u2019t have permission to view or manage the sharing settings for this document. The sharing dialog that opens lists the users that have access to the document. To add a user, enter that user\u2019s email address and hit \u201cEnter\u201d or click \u201cInvite new member\u201d in the dropdown. You may select a role for any invited user, and click \u201cConfirm\u201d to save the changes and send any invitations.","title":"Sharing"},{"location":"sharing/#roles","text":"There are three primary roles supported by Grist: Viewer : allows a user to view the document but not make any changes to it. Some operations like sorting and filtering will work without affecting other users of the document. This is the default role when you type in an email address. Editor : allows a user to view or make changes to the document data, structure, or formulas, but not to its sharing settings. Owner : gives a user complete permissions to the document, including to view and change its sharing settings. A document may have one or more owners. If you are able to open the \u201cManage Users\u201d dialog, you have the \u201cowner\u201d role. You may not change your own access, but your access may be reduced or removed by another owner. The option to inherit access does not affect individual plans, and is explained in the Team Sharing article.","title":"Roles"},{"location":"summary-tables/","text":"Summary Tables # Summary tables are the workhorse of data analysis in Grist. They are similar to \u201cpivot tables\u201d in spreadsheets, and to GROUP BY clauses in databases. They let you get table-wide totals or any subtotals. Summary tables have many uses: Group projects by status, or by priority. Summarize bank transactions by year, or quarter, or by category. Group employees by position, or gender, or department. Summarize by any combination, such as position and gender and department. Group all records to calculate table-wide totals and statistics. Adding summaries # Click \u201cAdd New\u201d button and select \u201cAdd Page\u201d or \u201cAdd Widget to Page\u201d. In the widget picker, click the summation icon ( ) next to the table you\u2019d like to summarize. When creating a summary table, you choose a field or a combination of fields by which data should be grouped. These are called the \u201cGroup by\u201d fields. The summary table will contain one row for each group-by value. For instance, if \u201cPosition\u201d is selected as a group-by field, the summary table will contain one row for each job position. Grist\u2019s powerful formulas then allow arbitrary calculations on the matching subsets of the underlying data. Keep in mind that the group-by fields determine which groups should exist in the summary table. Do not select values you\u2019d like to calculate (e.g. for average salary) as group-by fields; these will be created using formulas in the next step. Tip: You can think of rows in a summary table as buckets into which your records will be placed. Group-by fields determine the labels for these buckets. For instance, a summary of projects grouped by status (e.g. \u201cActive\u201d, \u201cCompleted\u201d, \u201cNotStarted\u201d) will have three such buckets, one for each status. Every project goes into one of these three buckets. You can then easily calculate info for each folder, such as a count of projects or the total of their costs. Summary formulas # When you add a summary table, each of the selected group-by fields becomes a column in the new table. Everything else in the summary table is calculated using formula columns. Some of these columns are created automatically, as a convenience. Specifically, a column count will be added to show the number of records in the group represented by the current summary row. And for any numerical column in the original data, the summary table will contain a same-named column with the total. For instance, the summary of Employees grouped by Position would look like this: Tip: A summary widget will have a header like \u201cEMPLOYEES [by Position]\u201d, to indicate that it\u2019s showing summary data for the Employees table, grouped by \u201cPosition\u201d. You can click the title to rename it. If you select a cell in a column like count or AnnualPay and hit Enter , you\u2019ll see the formulas that calculate them: count is len($group) AnnualPay is SUM($group.AnnualPay) The mysterious $group is simply another column, hidden by default (but you may unhide it). It contains for each cell the group of records represented by this summary row. Side note for Python fans. $group is a special Python object. It\u2019s an iterable collection of records. Using an attribute like $group.A is a shorthand for the list of values in the A column of all the records in the group, similar to [r.A for r in $group] . If you unhide this column, it will show as a python list of numeric row IDs which identify the records in the group. Sometimes the automatically created columns don\u2019t make sense. For instance, the sum of PayRate isn\u2019t very meaningful. Simply delete such columns, either using the column menu or using the Alt + Minus keyboard shortcut. You are free to change formulas for the automatically created columns, or to add new formula columns. Note that summary tables do not allow adding non -formula columns. For instance, you might want to change the formula for PayRate from SUM($group.PayRate) to AVERAGE($group.PayRate) , which would be a more interesting value. Here are some useful recipies of formulas in summary tables: Average : AVERAGE($group.PayRate) or SUM($group.PayRate) / $count Standard deviation : STDEV($group.PayRate) Maximum or minimum : MAX($group.PayRate) , MIN($group.PayRate) Sum over a subset of records : SUM(r.AnnualPay for r in $group if r.EmploymentStatus == \"Active\") Weighted average : AVERAGE_WEIGHTED(zip($group.Life_Expectancy, $group.Population)) In fact, you may use the full power of Python to calculate what you\u2019d like. As for any table, your formula may refer to any of the columns in the summary table, not only $group . Changing summary columns # The group-by columns in a summary table are created when you add the widget. It\u2019s not possible to modify the values in them, or to modify their settings, such as type. The settings and values of the group-by columns reflect those in the underlying table. When new values appear in the underlying table for the group-by columns, the summary tables will also get new rows automatically. What you may change is which columns the table is grouped by. Click the three dots on the top right of the summary table, and click \u201cData selection\u201d: The settings in the side pane tell you which data is shown and how it\u2019s grouped: You can click \u201cEdit Data Selection\u201d button to open the same widget picker that you used to add the summary table. You can now deselect some \u201cGroup by\u201d fields and select others, and click \u201cSave\u201d to update the summary table. Linking summary tables # You can link summary tables to other widgets. If you have a summary table on a page, it can be used as a selector for a table of underlying data, or for a more detailed summary. For example, if you have a summary of Employees by \u201cPosition\u201d, it will be available as a \u201cSELECT BY\u201d option when adding an unsummarized table of Employees : The result is that you can select a position in the summary table, and see all employees in that position. You could similarly link a summary of Employees grouped by \u201cPosition\u201d and \u201cGender\u201d to the first widget: You can then select a position in the \u201cEmployees [by Position]\u201d widget, and see a breakdown by gender among the employees in that position. Note that such linking requires the new widget to include both \u201cPosition\u201d and \u201cGender\u201d in its group-by columns. For more about linking, see Linking widgets . Charting summarized data # Summary tables are a great source of data for charts, including dynamic charts. In the example above, we could add another widget showing Employees grouped by \u201cPosition\u201d and \u201cGender\u201d, but this time in a Chart widget. Select \u201cBar Chart\u201d for the chart type, and select \u201cGender\u201d and \u201cAnnualPay\u201d as Visible Series. You can now click on a position, and see visually the gender difference in average salary for this position. The Analyze and visualize tutorial shows other examples of charts based on summary tables. Detaching summary tables # Summary tables are computed from underlying data. Sometimes, however, its useful to \u201cdetach\u201d a summary table and turn it into an independent data table. For example, we\u2019ve seen how to summarize a table of Employees , grouping it by the column \u201cPosition\u201d. Let\u2019s say you want to associate some data with each position, such as a job description, or a workers compensation insurance code. Such data belongs in its own table, with one row for each position, and a few columns. Summary tables provide an easy way to create such a table. Add a page with a summary of Employees grouped by \u201cPosition\u201d. Now, in the right panel\u2019s \u201cData\u201d tab, click the \u201cDetach\u201d button. Your summary table just got turned into a brand new table with the same rows and an auto-generated name, like \u201cTable1\u201d. You can rename it to \u201cPositions\u201d, and add the columns you need: The calculated columns remain. In fact, anything you could calculate about each position in the \u201cEmployees [by Position]\u201d summary table, you may still calculate in the new \u201cPositions\u201d table. One difference is that new values will not get added to the detached table automatically. In other words, if a never-before-seen position (perhaps \u201cChief Troublemaker\u201d) appears in the underlying data, a summary table would update automatically to include it, but a detached table will not.","title":"Summary tables"},{"location":"summary-tables/#summary-tables","text":"Summary tables are the workhorse of data analysis in Grist. They are similar to \u201cpivot tables\u201d in spreadsheets, and to GROUP BY clauses in databases. They let you get table-wide totals or any subtotals. Summary tables have many uses: Group projects by status, or by priority. Summarize bank transactions by year, or quarter, or by category. Group employees by position, or gender, or department. Summarize by any combination, such as position and gender and department. Group all records to calculate table-wide totals and statistics.","title":"Summary Tables"},{"location":"summary-tables/#adding-summaries","text":"Click \u201cAdd New\u201d button and select \u201cAdd Page\u201d or \u201cAdd Widget to Page\u201d. In the widget picker, click the summation icon ( ) next to the table you\u2019d like to summarize. When creating a summary table, you choose a field or a combination of fields by which data should be grouped. These are called the \u201cGroup by\u201d fields. The summary table will contain one row for each group-by value. For instance, if \u201cPosition\u201d is selected as a group-by field, the summary table will contain one row for each job position. Grist\u2019s powerful formulas then allow arbitrary calculations on the matching subsets of the underlying data. Keep in mind that the group-by fields determine which groups should exist in the summary table. Do not select values you\u2019d like to calculate (e.g. for average salary) as group-by fields; these will be created using formulas in the next step. Tip: You can think of rows in a summary table as buckets into which your records will be placed. Group-by fields determine the labels for these buckets. For instance, a summary of projects grouped by status (e.g. \u201cActive\u201d, \u201cCompleted\u201d, \u201cNotStarted\u201d) will have three such buckets, one for each status. Every project goes into one of these three buckets. You can then easily calculate info for each folder, such as a count of projects or the total of their costs.","title":"Adding summaries"},{"location":"summary-tables/#summary-formulas","text":"When you add a summary table, each of the selected group-by fields becomes a column in the new table. Everything else in the summary table is calculated using formula columns. Some of these columns are created automatically, as a convenience. Specifically, a column count will be added to show the number of records in the group represented by the current summary row. And for any numerical column in the original data, the summary table will contain a same-named column with the total. For instance, the summary of Employees grouped by Position would look like this: Tip: A summary widget will have a header like \u201cEMPLOYEES [by Position]\u201d, to indicate that it\u2019s showing summary data for the Employees table, grouped by \u201cPosition\u201d. You can click the title to rename it. If you select a cell in a column like count or AnnualPay and hit Enter , you\u2019ll see the formulas that calculate them: count is len($group) AnnualPay is SUM($group.AnnualPay) The mysterious $group is simply another column, hidden by default (but you may unhide it). It contains for each cell the group of records represented by this summary row. Side note for Python fans. $group is a special Python object. It\u2019s an iterable collection of records. Using an attribute like $group.A is a shorthand for the list of values in the A column of all the records in the group, similar to [r.A for r in $group] . If you unhide this column, it will show as a python list of numeric row IDs which identify the records in the group. Sometimes the automatically created columns don\u2019t make sense. For instance, the sum of PayRate isn\u2019t very meaningful. Simply delete such columns, either using the column menu or using the Alt + Minus keyboard shortcut. You are free to change formulas for the automatically created columns, or to add new formula columns. Note that summary tables do not allow adding non -formula columns. For instance, you might want to change the formula for PayRate from SUM($group.PayRate) to AVERAGE($group.PayRate) , which would be a more interesting value. Here are some useful recipies of formulas in summary tables: Average : AVERAGE($group.PayRate) or SUM($group.PayRate) / $count Standard deviation : STDEV($group.PayRate) Maximum or minimum : MAX($group.PayRate) , MIN($group.PayRate) Sum over a subset of records : SUM(r.AnnualPay for r in $group if r.EmploymentStatus == \"Active\") Weighted average : AVERAGE_WEIGHTED(zip($group.Life_Expectancy, $group.Population)) In fact, you may use the full power of Python to calculate what you\u2019d like. As for any table, your formula may refer to any of the columns in the summary table, not only $group .","title":"Summary formulas"},{"location":"summary-tables/#changing-summary-columns","text":"The group-by columns in a summary table are created when you add the widget. It\u2019s not possible to modify the values in them, or to modify their settings, such as type. The settings and values of the group-by columns reflect those in the underlying table. When new values appear in the underlying table for the group-by columns, the summary tables will also get new rows automatically. What you may change is which columns the table is grouped by. Click the three dots on the top right of the summary table, and click \u201cData selection\u201d: The settings in the side pane tell you which data is shown and how it\u2019s grouped: You can click \u201cEdit Data Selection\u201d button to open the same widget picker that you used to add the summary table. You can now deselect some \u201cGroup by\u201d fields and select others, and click \u201cSave\u201d to update the summary table.","title":"Changing summary columns"},{"location":"summary-tables/#linking-summary-tables","text":"You can link summary tables to other widgets. If you have a summary table on a page, it can be used as a selector for a table of underlying data, or for a more detailed summary. For example, if you have a summary of Employees by \u201cPosition\u201d, it will be available as a \u201cSELECT BY\u201d option when adding an unsummarized table of Employees : The result is that you can select a position in the summary table, and see all employees in that position. You could similarly link a summary of Employees grouped by \u201cPosition\u201d and \u201cGender\u201d to the first widget: You can then select a position in the \u201cEmployees [by Position]\u201d widget, and see a breakdown by gender among the employees in that position. Note that such linking requires the new widget to include both \u201cPosition\u201d and \u201cGender\u201d in its group-by columns. For more about linking, see Linking widgets .","title":"Linking summary tables"},{"location":"summary-tables/#charting-summarized-data","text":"Summary tables are a great source of data for charts, including dynamic charts. In the example above, we could add another widget showing Employees grouped by \u201cPosition\u201d and \u201cGender\u201d, but this time in a Chart widget. Select \u201cBar Chart\u201d for the chart type, and select \u201cGender\u201d and \u201cAnnualPay\u201d as Visible Series. You can now click on a position, and see visually the gender difference in average salary for this position. The Analyze and visualize tutorial shows other examples of charts based on summary tables.","title":"Charting summarized data"},{"location":"summary-tables/#detaching-summary-tables","text":"Summary tables are computed from underlying data. Sometimes, however, its useful to \u201cdetach\u201d a summary table and turn it into an independent data table. For example, we\u2019ve seen how to summarize a table of Employees , grouping it by the column \u201cPosition\u201d. Let\u2019s say you want to associate some data with each position, such as a job description, or a workers compensation insurance code. Such data belongs in its own table, with one row for each position, and a few columns. Summary tables provide an easy way to create such a table. Add a page with a summary of Employees grouped by \u201cPosition\u201d. Now, in the right panel\u2019s \u201cData\u201d tab, click the \u201cDetach\u201d button. Your summary table just got turned into a brand new table with the same rows and an auto-generated name, like \u201cTable1\u201d. You can rename it to \u201cPositions\u201d, and add the columns you need: The calculated columns remain. In fact, anything you could calculate about each position in the \u201cEmployees [by Position]\u201d summary table, you may still calculate in the new \u201cPositions\u201d table. One difference is that new values will not get added to the detached table automatically. In other words, if a never-before-seen position (perhaps \u201cChief Troublemaker\u201d) appears in the underlying data, a summary table would update automatically to include it, but a detached table will not.","title":"Detaching summary tables"},{"location":"team-sharing/","text":"Team Sharing # We saw how to share individual documents with other users in the Sharing article. Team sites give your further control, allowing you to share collections of documents in whole or in part with others. Team sites are a paid feature. To determine whether you have a team site, look at the top left of the screen. If you see a name starting with the \u201c@\u201d symbol, you have a personal site, not a team site. To use the features in this section, upgrade to a team plan . a personal site a team site If you have a team site but aren\u2019t seeing it, click on the circle with your profile picture or initial on the top right of the screen, and check the list of sites at the bottom of the menu. Not seeing your team site? Try selecting the \u201cAdd account\u201d option in the same menu if the team site might be linked to a different email address. A fresh team site will look something like this, ready to be filled with Grist documents and shared with your team. If a colleague has shared a team site with you, you\u2019ll see the same thing, but depending on the role they chose for you, some options we will describe in this section may be inactive. If you need those options, ask your colleague to change your role. For a team site you own, you can create documents , create workspaces , or immediately start sharing the site with others. To share the site, click on the circle with your profile picture or initial on the top right of the screen. Then select the \u201cManage Users\u201d option. You can now invite people just as you did for individual documents in Sharing . Just as for documents, you can invite people as viewers, editors, or owners of the team site. All documents within the site will be accessible to those people, unless you turn off the \u201cInherit access\u201d sharing option for individual workspaces or documents (see Workspaces ). Roles # There are three primary roles supported by Grist for team sites: Viewer : allows a user to view the site but not make any changes to it. A viewer will be allowed to view all workspaces and documents within the site unless otherwise specified. Editor : allows a user to view or make changes to the site and all its workspaces and documents (unless otherwise specified). However, the sharing settings for the site, its workspaces, and its documents cannot be changed by an editor. Owner : gives a user complete permissions to the site\u2019s workspaces and documents, including their sharing settings. None of these roles give access to billing information or management. Billing managers can be added via the \u201cBilling Account\u201d option. Click on the circle with your profile picture or initial on the top right of the screen, and select \u201cBilling Account\u201d.","title":"Team sharing [team]"},{"location":"team-sharing/#team-sharing","text":"We saw how to share individual documents with other users in the Sharing article. Team sites give your further control, allowing you to share collections of documents in whole or in part with others. Team sites are a paid feature. To determine whether you have a team site, look at the top left of the screen. If you see a name starting with the \u201c@\u201d symbol, you have a personal site, not a team site. To use the features in this section, upgrade to a team plan . a personal site a team site If you have a team site but aren\u2019t seeing it, click on the circle with your profile picture or initial on the top right of the screen, and check the list of sites at the bottom of the menu. Not seeing your team site? Try selecting the \u201cAdd account\u201d option in the same menu if the team site might be linked to a different email address. A fresh team site will look something like this, ready to be filled with Grist documents and shared with your team. If a colleague has shared a team site with you, you\u2019ll see the same thing, but depending on the role they chose for you, some options we will describe in this section may be inactive. If you need those options, ask your colleague to change your role. For a team site you own, you can create documents , create workspaces , or immediately start sharing the site with others. To share the site, click on the circle with your profile picture or initial on the top right of the screen. Then select the \u201cManage Users\u201d option. You can now invite people just as you did for individual documents in Sharing . Just as for documents, you can invite people as viewers, editors, or owners of the team site. All documents within the site will be accessible to those people, unless you turn off the \u201cInherit access\u201d sharing option for individual workspaces or documents (see Workspaces ).","title":"Team Sharing"},{"location":"team-sharing/#roles","text":"There are three primary roles supported by Grist for team sites: Viewer : allows a user to view the site but not make any changes to it. A viewer will be allowed to view all workspaces and documents within the site unless otherwise specified. Editor : allows a user to view or make changes to the site and all its workspaces and documents (unless otherwise specified). However, the sharing settings for the site, its workspaces, and its documents cannot be changed by an editor. Owner : gives a user complete permissions to the site\u2019s workspaces and documents, including their sharing settings. None of these roles give access to billing information or management. Billing managers can be added via the \u201cBilling Account\u201d option. Click on the circle with your profile picture or initial on the top right of the screen, and select \u201cBilling Account\u201d.","title":"Roles"},{"location":"widget-card/","text":"Page widget: Card & Card List # The Card and Card List widgets allow viewing data as a form or a record, similar to how data is commonly presented in a custom application. In Grist, you can choose what fields to show and how to lay them out. A Card List shows a scrollable list of cards. A Card shows one at a time. A single Card is most useful when linked to another Table widget (see Linking widgets ). It can then show the details of the selected record. The single Card widget may also be used on its own. In this case, you\u2019ll see navigation buttons on top to move to the next or previous record, or to add a new one. Selecting theme # The widget options panel allows choosing the theme, or style, for the card: Editing card layout # To configure the layout of a card, click the green \u201cEdit Card Layout\u201d button below the theme selector, or click the three dots on the top right of the widget and select \u201cEdit Card Layout\u201d in the menu. While the layout editor is active, you\u2019ll see a single record with draggable fields, and a set of buttons on top of the widget. Resizing a field # To resize a field, move the mouse to a vertical border separating two fields and drag the border to your desired size. Only the width of fields may be changed, while the height changes dynamically to fit the field contents. Moving a field # To move a field, hold down the mouse button on a field and drag it. As you move the mouse near the edges of other fields, you will notice boxes with dashed borders indicating possible drop points in relation to other fields. Release the mouse over one of these boxes to place your field into the desired location. Deleting a field # To delete a field, move the mouse over it. An \u201cx\u201d icon will appear. Click this icon to remove the field. This is similar to hiding a column as removing a field from a widget does not delete the underlying data. You can also delete a field by hiding it in in the \u201cVisible Fields\u201d list in the side panel, as described in Configuring field list . This is available even when the layout editor is not active. Adding a field # To add a field, click the \u201cAdd Field\u201d button on top of the layout editor. In the dropdown menu, select \u201cCreate New Field\u201d to create a new column of data, or one of the existing fields in the table that are not currently shown in the card. When you click on the field, it will be added at the bottom of the layout. You can then move it or resize it as described above. Any new fields you create will only be added to the data when you save the layout. You can rename these in the \u201cField\u201d tab in the side panel. You can also add an existing field by making it visible using the \u201cHidden Fields\u201d list in the side panel, as described in Configuring field list . This is available even when the layout editor is not active. Saving the layout # When done editing the layout, remember to click \u201cSave Layout\u201d on top of the widget, or \u201cCancel\u201d to revert your changes. Once saved, the Card or Card List widget will update to show all cards in the updated layout.","title":"Card & Card List"},{"location":"widget-card/#page-widget-card-card-list","text":"The Card and Card List widgets allow viewing data as a form or a record, similar to how data is commonly presented in a custom application. In Grist, you can choose what fields to show and how to lay them out. A Card List shows a scrollable list of cards. A Card shows one at a time. A single Card is most useful when linked to another Table widget (see Linking widgets ). It can then show the details of the selected record. The single Card widget may also be used on its own. In this case, you\u2019ll see navigation buttons on top to move to the next or previous record, or to add a new one.","title":"Page widget: Card"},{"location":"widget-card/#selecting-theme","text":"The widget options panel allows choosing the theme, or style, for the card:","title":"Selecting theme"},{"location":"widget-card/#editing-card-layout","text":"To configure the layout of a card, click the green \u201cEdit Card Layout\u201d button below the theme selector, or click the three dots on the top right of the widget and select \u201cEdit Card Layout\u201d in the menu. While the layout editor is active, you\u2019ll see a single record with draggable fields, and a set of buttons on top of the widget.","title":"Editing card layout"},{"location":"widget-card/#resizing-a-field","text":"To resize a field, move the mouse to a vertical border separating two fields and drag the border to your desired size. Only the width of fields may be changed, while the height changes dynamically to fit the field contents.","title":"Resizing a field"},{"location":"widget-card/#moving-a-field","text":"To move a field, hold down the mouse button on a field and drag it. As you move the mouse near the edges of other fields, you will notice boxes with dashed borders indicating possible drop points in relation to other fields. Release the mouse over one of these boxes to place your field into the desired location.","title":"Moving a field"},{"location":"widget-card/#deleting-a-field","text":"To delete a field, move the mouse over it. An \u201cx\u201d icon will appear. Click this icon to remove the field. This is similar to hiding a column as removing a field from a widget does not delete the underlying data. You can also delete a field by hiding it in in the \u201cVisible Fields\u201d list in the side panel, as described in Configuring field list . This is available even when the layout editor is not active.","title":"Deleting a field"},{"location":"widget-card/#adding-a-field","text":"To add a field, click the \u201cAdd Field\u201d button on top of the layout editor. In the dropdown menu, select \u201cCreate New Field\u201d to create a new column of data, or one of the existing fields in the table that are not currently shown in the card. When you click on the field, it will be added at the bottom of the layout. You can then move it or resize it as described above. Any new fields you create will only be added to the data when you save the layout. You can rename these in the \u201cField\u201d tab in the side panel. You can also add an existing field by making it visible using the \u201cHidden Fields\u201d list in the side panel, as described in Configuring field list . This is available even when the layout editor is not active.","title":"Adding a field"},{"location":"widget-card/#saving-the-layout","text":"When done editing the layout, remember to click \u201cSave Layout\u201d on top of the widget, or \u201cCancel\u201d to revert your changes. Once saved, the Card or Card List widget will update to show all cards in the updated layout.","title":"Saving the layout"},{"location":"widget-chart/","text":"Page widget: Chart # Grist supports several chart types to help you visualize your data easily. Charts may be used to plot a regular table of data, a linked widget (as described in Linking widgets ), or a summary table (as described in Summary tables ). The most common chart types are illustrated here: Chart types # Each chart type plots several data series. Use the \u201cVisible Series\u201d list in the \u201cWidgets\u201d side panel for choosing the series to plot. The order of the list matters and determines how each series is used, as described below. Bar Chart # Needs two or more series: the first for bar labels (x-axis), the second for bar heights (y-axis). Additional series create additional bars at each data point and specify their heights. Line Chart # Needs two or more series: the first series is for the X values, the second is for Y values to create the line. Additional series specify Y values for additional lines. Pie Chart # Needs two series: the first for the pie slice labels, the second for the pie slice sizes. Area Chart # Similar to a line chart, needs two or more series: the first for the X values, the second for the Y values to create the line. Additional series specify Y values for additional lines. Scatter Plot # Needs three or more series: the first for the point labels, and the second and third for the X and Y values for each point, respectively. Additional series specify Y values for additional sets of points. Kaplan-Meier Plot # The Kaplan-Meier Plot is useful for certain studies, and needs two series: the first for the label of the line to which a point belongs, the second giving a survival time or time-to-failure of that point. The plot shows the survival times on the X axis, and the number of points that survive at that time on the Y axis. Chart options # A number of chart options are available, some of them specific to certain chart types. Group by first column : When checked, an extra series is expected as the first series in the \u201cVisible Series\u201d list, and should contain a group label for each data point. All points with the same group value are plotted as a separate line. For example: Invert Y-axis : When checked the Y axis is flipped, with smaller values above and larger values below. Connect gaps [for Line Charts only]: When checked, gaps caused by missing values are connected by connecting neighboring points. The \u201cShow Markers\u201d option described next can be used to keep a visual cue for which points are present. Show markers [for Line Charts only]: When checked, each point on the line is marked additionally by a small circle. See the example for \u201cGroup by first column\u201d above. Error bars [for Line and Bar Charts]: When set to \u201cSymmetric\u201d, each Y series should be followed by a series for the length of the error bars to show. When set to \u201cAbove+Below\u201d, each Y series should be followed by two series, one for the top error bars, and one for the bottom. In the example here, the first series (\u201cCell Line\u201d) specifies how to group the data into lines, since \u201cGroup by first column\u201d is checked. The second and third series specify the X and Y values, and the last series (\u201cSD\u201d) specifies the error bars for the Y values.","title":"Chart"},{"location":"widget-chart/#page-widget-chart","text":"Grist supports several chart types to help you visualize your data easily. Charts may be used to plot a regular table of data, a linked widget (as described in Linking widgets ), or a summary table (as described in Summary tables ). The most common chart types are illustrated here:","title":"Page widget: Chart"},{"location":"widget-chart/#chart-types","text":"Each chart type plots several data series. Use the \u201cVisible Series\u201d list in the \u201cWidgets\u201d side panel for choosing the series to plot. The order of the list matters and determines how each series is used, as described below.","title":"Chart types"},{"location":"widget-chart/#bar-chart","text":"Needs two or more series: the first for bar labels (x-axis), the second for bar heights (y-axis). Additional series create additional bars at each data point and specify their heights.","title":"Bar Chart"},{"location":"widget-chart/#line-chart","text":"Needs two or more series: the first series is for the X values, the second is for Y values to create the line. Additional series specify Y values for additional lines.","title":"Line Chart"},{"location":"widget-chart/#pie-chart","text":"Needs two series: the first for the pie slice labels, the second for the pie slice sizes.","title":"Pie Chart"},{"location":"widget-chart/#area-chart","text":"Similar to a line chart, needs two or more series: the first for the X values, the second for the Y values to create the line. Additional series specify Y values for additional lines.","title":"Area Chart"},{"location":"widget-chart/#scatter-plot","text":"Needs three or more series: the first for the point labels, and the second and third for the X and Y values for each point, respectively. Additional series specify Y values for additional sets of points.","title":"Scatter Plot"},{"location":"widget-chart/#kaplan-meier-plot","text":"The Kaplan-Meier Plot is useful for certain studies, and needs two series: the first for the label of the line to which a point belongs, the second giving a survival time or time-to-failure of that point. The plot shows the survival times on the X axis, and the number of points that survive at that time on the Y axis.","title":"Kaplan-Meier Plot"},{"location":"widget-chart/#chart-options","text":"A number of chart options are available, some of them specific to certain chart types. Group by first column : When checked, an extra series is expected as the first series in the \u201cVisible Series\u201d list, and should contain a group label for each data point. All points with the same group value are plotted as a separate line. For example: Invert Y-axis : When checked the Y axis is flipped, with smaller values above and larger values below. Connect gaps [for Line Charts only]: When checked, gaps caused by missing values are connected by connecting neighboring points. The \u201cShow Markers\u201d option described next can be used to keep a visual cue for which points are present. Show markers [for Line Charts only]: When checked, each point on the line is marked additionally by a small circle. See the example for \u201cGroup by first column\u201d above. Error bars [for Line and Bar Charts]: When set to \u201cSymmetric\u201d, each Y series should be followed by a series for the length of the error bars to show. When set to \u201cAbove+Below\u201d, each Y series should be followed by two series, one for the top error bars, and one for the bottom. In the example here, the first series (\u201cCell Line\u201d) specifies how to group the data into lines, since \u201cGroup by first column\u201d is checked. The second and third series specify the X and Y values, and the last series (\u201cSD\u201d) specifies the error bars for the Y values.","title":"Chart options"},{"location":"widget-custom/","text":"Page widget: Custom # Custom widgets are an experimental feature The design of custom widgets is likely to change. For example, configuration options may be added or removed, and the API for communicating with the document may be replaced entirely. The Custom widget allows an advanced user to insert almost anything in their document. To use it currently requires knowledge of web development, and access to a public web server (for example, GitHub Pages). This widget will show a webpage hosted externally. The webpage should be owned and controlled by you. To configure the Custom widget: Choose a URL for the webpage to show. Choose an access level for the page. None : the webpage is shown in the widget, but it has no access to the Grist document containing the widget. Full : the webpage is shown in the widget, and has full access to read and modify the Grist document containing the widget. The bulk of the configuration happens outside Grist, when preparing the webpage. Grist offers an API to such webpages, available by including the following: <script src=\"https://docs.getgrist.com/grist-plugin-api.js\"></script> This makes a global grist javascript object available. To initialize it, and get access to the Grist document, call: grist.ready(); You can now call the following methods on grist.docApi : grist.docApi.listTables() : returns a promise for a list of strings, containing the ids of every table in the document. grist.docApi.fetchTable(tableId) : returns a promise for the contents of the specified table, in the same format as the REST API .","title":"Custom"},{"location":"widget-custom/#page-widget-custom","text":"Custom widgets are an experimental feature The design of custom widgets is likely to change. For example, configuration options may be added or removed, and the API for communicating with the document may be replaced entirely. The Custom widget allows an advanced user to insert almost anything in their document. To use it currently requires knowledge of web development, and access to a public web server (for example, GitHub Pages). This widget will show a webpage hosted externally. The webpage should be owned and controlled by you. To configure the Custom widget: Choose a URL for the webpage to show. Choose an access level for the page. None : the webpage is shown in the widget, but it has no access to the Grist document containing the widget. Full : the webpage is shown in the widget, and has full access to read and modify the Grist document containing the widget. The bulk of the configuration happens outside Grist, when preparing the webpage. Grist offers an API to such webpages, available by including the following: <script src=\"https://docs.getgrist.com/grist-plugin-api.js\"></script> This makes a global grist javascript object available. To initialize it, and get access to the Grist document, call: grist.ready(); You can now call the following methods on grist.docApi : grist.docApi.listTables() : returns a promise for a list of strings, containing the ids of every table in the document. grist.docApi.fetchTable(tableId) : returns a promise for the contents of the specified table, in the same format as the REST API .","title":"Page widget: Custom"},{"location":"widget-table/","text":"Page widget: Table # The Table widget is a versatile spreadsheet-like grid. Here are some useful features to know. Column operations # Resize columns : Click on the line between column headers, and drag it to resize columns. Reorder columns : With a column selected, drag its header to move it to a different place relative to other columns. (You can also do this by reordering fields in the widget options panel.) Rename columns : With a column selected, click its header to rename it. Hit Enter to save the new name. Add columns : Click the \u201c+\u201d icon on the right of all the column headers to add a new column, or show any of the hidden columns. The column menu also allows inserting a new column next to an existing column, as do the keyboard shortcuts Alt + + (insert before) and Alt + = (insert after). After adding a column, the column name (set by default to \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, etc.) is immediately selected and highlighted to let you quickly rename it. Just type in the new name and hit Enter , or hit Escape to keep the default name. Hide columns : Move the mouse over the column header and click the triangle to open the column menu. Click \u201cHide column\u201d to hide the column. The column remains in the underlying data, and can be shown again using the \u201c+\u201d icon on the right of the column headers, or the field list in the widget options panel. Delete columns : Delete the actual column of data using the column menu option, or the Alt + Minus keyboard shortcut. The table is the only widget that allows deleting a column. Note: deleting and hiding are different. Hiding a columns removes it only from the current page widget, but leaves it in the data and available to formulas. Deleting a column removes it from everywhere. (Of course, undo still works for either operation!) Row operations # Add rows : Type into the last row in a table, which is highlighted to indicate that it\u2019s a placeholder for adding new records. Right click a row number to insert a blank row next to an existing row, or use the keyboard shortcuts \u2318 \u21e7 = (Mac) or Ctrl + Shift + = (Windows) to insert before, and \u2318 = (Mac) or Ctrl + = (Windows) to insert after. Delete rows : Right click a row number and select the \u201cDelete\u201d option to delete a row, or use the \u2318 + Minus (Mac) or Ctrl + Minus (Windows) shortcut. If you select a range of cells first, either of these delete actions will delete all rows included in the range. Link to rows : Right click a row number and select \u201cCopy anchor link\u201d to copy a link to the selected cell of that row. The link will be placed in your clipboard, ready to paste into an email or an instant messaging app. The link will open only for people with access to the document. Navigation and selection # Navigate using shortcuts : Use keyboard shortcuts to navigate the grid: Tab , Shift + Tab Move to the next or previous column, saving changes if editing a cell. \u2318 + Up (Mac) or Ctrl + Up (Windows) Move up to the first row. \u2318 + Down (Mac) or Ctrl + Down (Windows) Move down to the last row. Home or Fn + \u2190 (Mac) Move to the beginning of a row. End or Fn + \u2192 (Mac) Move to the end of a row. PageDown or Fn + \u2193 (Mac) Move down one page of rows. PageUp or Fn + \u2191 (Mac) Move up one page of rows. Alt + Down , Alt + Up Move down or up five rows. Select ranges : Click and drag a mouse across the grid to select a range of cells to copy (copy and paste using the usual keyboard shortcuts for your computer). Another way to select a range is to click one cell, and then hold Shift while clicking another cell, or while navigating with the arrow keys. Fill down data : Select a range of cells, and hit \u2318 + D (Mac) or Ctrl + D (Windows) to fill the whole selected range with the values of the cells in the top row of the range. Customization # Customize table looks : In the widget options panel, you can turn off horizontal or vertical grid lines, or turn on zebra striping. For example, this lets you change the look of your grid to a list like this:","title":"Table widget"},{"location":"widget-table/#page-widget-table","text":"The Table widget is a versatile spreadsheet-like grid. Here are some useful features to know.","title":"Page widget: Table"},{"location":"widget-table/#column-operations","text":"Resize columns : Click on the line between column headers, and drag it to resize columns. Reorder columns : With a column selected, drag its header to move it to a different place relative to other columns. (You can also do this by reordering fields in the widget options panel.) Rename columns : With a column selected, click its header to rename it. Hit Enter to save the new name. Add columns : Click the \u201c+\u201d icon on the right of all the column headers to add a new column, or show any of the hidden columns. The column menu also allows inserting a new column next to an existing column, as do the keyboard shortcuts Alt + + (insert before) and Alt + = (insert after). After adding a column, the column name (set by default to \u201cA\u201d, \u201cB\u201d, \u201cC\u201d, etc.) is immediately selected and highlighted to let you quickly rename it. Just type in the new name and hit Enter , or hit Escape to keep the default name. Hide columns : Move the mouse over the column header and click the triangle to open the column menu. Click \u201cHide column\u201d to hide the column. The column remains in the underlying data, and can be shown again using the \u201c+\u201d icon on the right of the column headers, or the field list in the widget options panel. Delete columns : Delete the actual column of data using the column menu option, or the Alt + Minus keyboard shortcut. The table is the only widget that allows deleting a column. Note: deleting and hiding are different. Hiding a columns removes it only from the current page widget, but leaves it in the data and available to formulas. Deleting a column removes it from everywhere. (Of course, undo still works for either operation!)","title":"Column operations"},{"location":"widget-table/#row-operations","text":"Add rows : Type into the last row in a table, which is highlighted to indicate that it\u2019s a placeholder for adding new records. Right click a row number to insert a blank row next to an existing row, or use the keyboard shortcuts \u2318 \u21e7 = (Mac) or Ctrl + Shift + = (Windows) to insert before, and \u2318 = (Mac) or Ctrl + = (Windows) to insert after. Delete rows : Right click a row number and select the \u201cDelete\u201d option to delete a row, or use the \u2318 + Minus (Mac) or Ctrl + Minus (Windows) shortcut. If you select a range of cells first, either of these delete actions will delete all rows included in the range. Link to rows : Right click a row number and select \u201cCopy anchor link\u201d to copy a link to the selected cell of that row. The link will be placed in your clipboard, ready to paste into an email or an instant messaging app. The link will open only for people with access to the document.","title":"Row operations"},{"location":"widget-table/#navigation-and-selection","text":"Navigate using shortcuts : Use keyboard shortcuts to navigate the grid: Tab , Shift + Tab Move to the next or previous column, saving changes if editing a cell. \u2318 + Up (Mac) or Ctrl + Up (Windows) Move up to the first row. \u2318 + Down (Mac) or Ctrl + Down (Windows) Move down to the last row. Home or Fn + \u2190 (Mac) Move to the beginning of a row. End or Fn + \u2192 (Mac) Move to the end of a row. PageDown or Fn + \u2193 (Mac) Move down one page of rows. PageUp or Fn + \u2191 (Mac) Move up one page of rows. Alt + Down , Alt + Up Move down or up five rows. Select ranges : Click and drag a mouse across the grid to select a range of cells to copy (copy and paste using the usual keyboard shortcuts for your computer). Another way to select a range is to click one cell, and then hold Shift while clicking another cell, or while navigating with the arrow keys. Fill down data : Select a range of cells, and hit \u2318 + D (Mac) or Ctrl + D (Windows) to fill the whole selected range with the values of the cells in the top row of the range.","title":"Navigation and selection"},{"location":"widget-table/#customization","text":"Customize table looks : In the widget options panel, you can turn off horizontal or vertical grid lines, or turn on zebra striping. For example, this lets you change the look of your grid to a list like this:","title":"Customization"},{"location":"workspaces/","text":"Workspaces # A team site can be divided into collections of documents called \u201cworkspaces\u201d which can be shared as a single unit with other users. This is convenient, for example, for documents related to a single project. You can only create workspaces on team sites, not personal sites. To check what kind of site you have, or to find a team site you have purchased, follow the steps at Team sharing . A team site, when first created, has a single workspace called \u201cHome.\u201d You can rename that workspace if you like, by hovering over the workspace name on the left bar, clicking on the three-dots icon, and selecting \u201cRename\u201d. Even better, you can create new workspaces, so you can group your documents and share them as a unit. To add a document to a specific workspace, click on that workspace in the left bar, then select \u201cAdd New\u201d, then \u201cCreate empty document\u201d (or \u201cImport document\u201d). You can control who has access to a workspace using \u201cManage Users.\u201d The controls are just like for sharing documents . Viewers of a team site will also be viewers of all its workspaces. Likewise for editors and owners. To exclude a workspace from inheriting team site viewers, editors, and owners, set \u201cInherit Access\u201d to \u201cNone\u201d. You can also set it to \u201cView Only\u201d to limit inheritance to view rights, or \u201cView & Edit\u201d to limit inheritance to view and edit rights (excluding the right to control sharing options). To move a document from one workspace to another, hover over the document, click on the three-dots icon to the right of the document\u2019s name, and select \u201cMove\u201d. You\u2019ll then have the option to pick the workspace you want.","title":"Workspaces [team]"},{"location":"workspaces/#workspaces","text":"A team site can be divided into collections of documents called \u201cworkspaces\u201d which can be shared as a single unit with other users. This is convenient, for example, for documents related to a single project. You can only create workspaces on team sites, not personal sites. To check what kind of site you have, or to find a team site you have purchased, follow the steps at Team sharing . A team site, when first created, has a single workspace called \u201cHome.\u201d You can rename that workspace if you like, by hovering over the workspace name on the left bar, clicking on the three-dots icon, and selecting \u201cRename\u201d. Even better, you can create new workspaces, so you can group your documents and share them as a unit. To add a document to a specific workspace, click on that workspace in the left bar, then select \u201cAdd New\u201d, then \u201cCreate empty document\u201d (or \u201cImport document\u201d). You can control who has access to a workspace using \u201cManage Users.\u201d The controls are just like for sharing documents . Viewers of a team site will also be viewers of all its workspaces. Likewise for editors and owners. To exclude a workspace from inheriting team site viewers, editors, and owners, set \u201cInherit Access\u201d to \u201cNone\u201d. You can also set it to \u201cView Only\u201d to limit inheritance to view rights, or \u201cView & Edit\u201d to limit inheritance to view and edit rights (excluding the right to control sharing options). To move a document from one workspace to another, hover over the document, click on the three-dots icon to the right of the document\u2019s name, and select \u201cMove\u201d. You\u2019ll then have the option to pick the workspace you want.","title":"Workspaces"}]}