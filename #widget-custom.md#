# Page widget: Custom

!!! warning "Custom widgets are an experimental feature"
    The design of custom widgets is likely to change.  For example,
    configuration options may be added or removed, and the API for
    communicating with the document may be replaced entirely.

The **Custom** widget allows a user to insert almost
anything in their document.  To create a custom widget currently
requires knowledge of web development, and access to a public web
server (for example, GitHub Pages).

This widget will show a webpage hosted externally, make data
from your document available to it, and optionally allow the webpage
to modify your document.  The webpage should be owned and controlled
by you or someone you trust.

## 

## Configuring

To configure the Custom widget:

 * Choose a URL for the webpage to show.

 * Choose an access level for the page.
   - *None*: the webpage is shown in the widget, but it has no access to
     the Grist document containing the widget.
   - *Read table*: the webpage is shown in the widget, and is given read access
     to the table the widget is configured to select data from.
   - *Full*: the webpage is shown in the widget, and has full access to
     read and modify the Grist document containing the widget.

The bulk of the configuration happens outside Grist, when preparing
the webpage.  Grist offers an API to such webpages, available by
including the following:

```
<script src="https://docs.getgrist.com/grist-plugin-api.js"></script>
```

This makes a global `grist` javascript object available.  To
initialize it, and get access to the Grist document, call:

```
grist.ready();
```

You can now call the following methods:

 * `grist.onRecord(callback)`: asks Grist to call `callback` with the contents of the
   currently selected record in the table the widget selects from.  The `callback` will
   be called whenever the record changes.
 * `grist.onRecords(callback)`: asks Grist to call `callback` with a list of all
   records the widget selects from.  The `callback` will be called whenever the list
   changes.
 * `grist.docApi.listTables()`: returns a promise for a list of strings, containing the
   ids of every table in the document.
 * `grist.docApi.fetchTable(tableId)`: returns a promise for the contents of the specified
   table, in the same format as the [REST API](api.md#tag/Data-Tables/paths/~1docs~1{docId}~1tables~1{tableId}~1data/get).

The `onRecord` and `onRecords` methods are particularly useful, since they...

## An example

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>onRecord</title>
    <script src="https://docs.getgrist.com/grist-plugin-api.js"></script>
  </head>
  <body>
    <pre id="readout">Waiting for data...</pre>
    <script>
      grist.ready();
      grist.onRecord(function(record) {
        document.getElementById('readout').innerHTML = JSON.stringify(record, null, 2);
      });
    </script>
  </body>
</html>
```

[https://gristlabs.github.io/grist-widget/inspect/onRecord.html](https://gristlabs.github.io/grist-widget/inspect/onRecord.html)
